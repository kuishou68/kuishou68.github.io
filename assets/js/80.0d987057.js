(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{433:function(s,e,t){"use strict";t.r(e);var n=t(25),a=Object(n.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"前端面试题之react篇"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端面试题之react篇"}},[s._v("#")]),s._v(" 前端面试题之React篇")]),s._v(" "),t("h2",{attrs:{id:""}},[t("a",{staticClass:"header-anchor",attrs:{href:"#"}},[s._v("#")]),s._v(" "),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/1500604/1618317949340-04bf1cbc-f74c-4f76-8dbf-fe7de4714d30.png",alt:"img"}})]),s._v(" "),t("h2",{attrs:{id:"一、组件基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、组件基础"}},[s._v("#")]),s._v(" 一、组件基础")]),s._v(" "),t("h3",{attrs:{id:"_1-react-事件机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-react-事件机制"}},[s._v("#")]),s._v(" 1. React 事件机制")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("<div onClick={this.handleClick.bind(this)}>点我</div>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("React并不是将click事件绑定到了div的真实DOM上，而是在document处监听了所有的事件，当事件发生并且冒泡到document处的时候，React将事件内容封装并交由真正的处理函数运行。这样的方式不仅仅减少了内存的消耗，还能在组件挂在销毁时统一订阅和移除事件。")]),s._v(" "),t("p",[s._v("除此之外，冒泡到document上的事件也不是原生的浏览器事件，而是由react自己实现的合成事件（SyntheticEvent）。因此如果不想要是事件冒泡的话应该调用event.preventDefault()方法，而不是调用event.stopProppagation()方法。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/jpeg/1500604/1611890469312-7504e85d-c6db-481e-b9d3-5307a3de708c.jpeg",alt:"img"}})]),s._v(" "),t("p",[s._v("JSX 上写的事件并没有绑定在对应的真实 DOM 上，而是通过事件代理的方式，将所有的事件都统一绑定在了 "),t("code",[s._v("document")]),s._v(" 上。这样的方式不仅减少了内存消耗，还能在组件挂载销毁时统一订阅和移除事件。")]),s._v(" "),t("p",[s._v("另外冒泡到 "),t("code",[s._v("document")]),s._v(" 上的事件也不是原生浏览器事件，而是 React 自己实现的合成事件（SyntheticEvent）。因此我们如果不想要事件冒泡的话，调用 "),t("code",[s._v("event.stopPropagation")]),s._v(" 是无效的，而应该调用 "),t("code",[s._v("event.preventDefault")]),s._v("。")]),s._v(" "),t("p",[s._v("实现合成事件的目的如下：")]),s._v(" "),t("ul",[t("li",[s._v("合成事件首先抹平了浏览器之间的兼容问题，另外这是一个跨浏览器原生事件包装器，赋予了跨浏览器开发的能力；")]),s._v(" "),t("li",[s._v("对于原生浏览器事件来说，浏览器会给监听器创建一个事件对象。如果你有很多的事件监听，那么就需要分配很多的事件对象，造成高额的内存分配问题。但是对于合成事件来说，有一个事件池专门来管理它们的创建和销毁，当事件需要被使用时，就会从池子中复用对象，事件回调结束后，就会销毁事件对象上的属性，从而便于下次复用事件对象。")])]),s._v(" "),t("h3",{attrs:{id:"_2-react的事件和普通的html事件有什么不同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-react的事件和普通的html事件有什么不同"}},[s._v("#")]),s._v(" 2. React的事件和普通的HTML事件有什么不同？")]),s._v(" "),t("p",[s._v("区别：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("对于事件名称命名方式，原生事件为全小写，react 事件采用小驼峰；")])]),s._v(" "),t("li",[t("p",[s._v("对于事件函数处理语法，原生事件为字符串，react 事件为函数；")])]),s._v(" "),t("li",[t("p",[s._v("react 事件不能采用 return false 的方式来阻止浏览器的默认行为，而必须要地明确地调用"),t("code",[s._v("preventDefault()")]),s._v("来阻止默认行为。")])])]),s._v(" "),t("p",[s._v("合成事件是 react 模拟原生 DOM 事件所有能力的一个事件对象，其优点如下：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("兼容所有浏览器，更好的跨平台；")])]),s._v(" "),t("li",[t("p",[s._v("将事件统一存放在一个数组，避免频繁的新增与删除（垃圾回收）。")])]),s._v(" "),t("li",[t("p",[s._v("方便 react 统一管理和事务机制。")])])]),s._v(" "),t("p",[s._v("事件的执行顺序为原生事件先执行，合成事件后执行，合成事件会冒泡绑定到 document 上，所以尽量避免原生事件与合成事件混用，如果原生事件阻止冒泡，可能会导致合成事件不执行，因为需要冒泡到document 上合成事件才会执行。")]),s._v(" "),t("h3",{attrs:{id:"_3-react-组件中怎么做事件代理-它的原理是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-react-组件中怎么做事件代理-它的原理是什么"}},[s._v("#")]),s._v(" 3. React 组件中怎么做事件代理？它的原理是什么？")]),s._v(" "),t("p",[s._v("React基于Virtual DOM实现了一个SyntheticEvent层（合成事件层），定义的事件处理器会接收到一个合成事件对象的实例，它符合W3C标准，且与原生的浏览器事件拥有同样的接口，支持冒泡机制，所有的事件都自动绑定在最外层上。")]),s._v(" "),t("p",[s._v("在React底层，主要对合成事件做了两件事：")]),s._v(" "),t("ul",[t("li",[s._v("**事件委派：**React会把所有的事件绑定到结构的最外层，使用统一的事件监听器，这个事件监听器上维持了一个映射来保存所有组件内部事件监听和处理函数。")]),s._v(" "),t("li",[s._v("**自动绑定：**React组件中，每个方法的上下文都会指向该组件的实例，即自动绑定this为当前组件。")])]),s._v(" "),t("h3",{attrs:{id:"_4-react-高阶组件、render-props、hooks-有什么区别-为什么要不断迭代"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-react-高阶组件、render-props、hooks-有什么区别-为什么要不断迭代"}},[s._v("#")]),s._v(" 4. React 高阶组件、Render props、hooks 有什么区别，为什么要不断迭代")]),s._v(" "),t("p",[s._v("这三者是目前react解决代码复用的主要方式：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("高阶组件（HOC）是 React 中用于复用组件逻辑的一种高级技巧。HOC 自身不是 React API 的一部分，它是一种基于 React 的组合特性而形成的设计模式。具体而言，高阶组件是参数为组件，返回值为新组件的函数。")])]),s._v(" "),t("li",[t("p",[s._v("render props是指一种在 React 组件之间使用一个值为函数的 prop 共享代码的简单技术，更具体的说，render prop 是一个用于告知组件需要渲染什么内容的函数 prop。")])]),s._v(" "),t("li",[t("p",[s._v("通常，render props 和高阶组件只渲染一个子节点。让 Hook 来服务这个使用场景更加简单。这两种模式仍有用武之地，（例如，一个虚拟滚动条组件或许会有一个 renderltem 属性，或是一个可见的容器组件或许会有它自己的 DOM 结构）。但在大部分场景下，Hook 足够了，并且能够帮助减少嵌套。")])])]),s._v(" "),t("p",[t("strong",[s._v("（1）HOC")])]),s._v(" "),t("p",[s._v("官方解释∶")]),s._v(" "),t("p",[s._v("高阶组件（HOC）是 React 中用于复用组件逻辑的一种高级技巧。HOC 自身不是 React API 的一部分，它是一种基于 React 的组合特性而形成的设计模式。")]),s._v(" "),t("p",[s._v("简言之，HOC是一种组件的设计模式，HOC接受一个组件和额外的参数（如果需要），返回一个新的组件。HOC 是纯函数，没有副作用。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// hoc的定义\nfunction withSubscription(WrappedComponent, selectData) {\n  return class extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        data: selectData(DataSource, props)\n      };\n    }\n    // 一些通用的逻辑处理\n    render() {\n      // ... 并使用新数据渲染被包装的组件!\n      return <WrappedComponent data={this.state.data} {...this.props} />;\n    }\n  };\n\n// 使用\nconst BlogPostWithSubscription = withSubscription(BlogPost,\n  (DataSource, props) => DataSource.getBlogPost(props.id));\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("p",[s._v("HOC的优缺点∶")]),s._v(" "),t("ul",[t("li",[s._v("优点∶ 逻辑服用、不影响被包裹组件的内部逻辑。")]),s._v(" "),t("li",[s._v("缺点∶ hoc传递给被包裹组件的props容易和被包裹后的组件重名，进而被覆盖")])]),s._v(" "),t("p",[s._v("**（2）**"),t("strong",[s._v("Render props")])]),s._v(" "),t("p",[s._v("官方解释∶")]),s._v(" "),t("p",[s._v('"render prop"是指一种在 React 组件之间使用一个值为函数的 prop 共享代码的简单技术')]),s._v(" "),t("p",[s._v('具有render prop 的组件接受一个返回React元素的函数，将render的渲染逻辑注入到组件内部。在这里，"render"的命名可以是任何其他有效的标识符。')]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// DataProvider组件内部的渲染逻辑如下\nclass DataProvider extends React.Components {\n     state = {\n    name: 'Tom'\n  }\n\n    render() {\n    return (\n        <div>\n          <p>共享数据组件自己内部的渲染逻辑</p>\n          { this.props.render(this.state) }\n      </div>\n    );\n  }\n}\n\n// 调用方式\n<DataProvider render={data => (\n  <h1>Hello {data.name}</h1>\n)}/>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])]),t("p",[s._v("由此可以看到，render props的优缺点也很明显∶")]),s._v(" "),t("ul",[t("li",[s._v("优点：数据共享、代码复用，将组件内的state作为props传递给调用者，将渲染逻辑交给调用者。")]),s._v(" "),t("li",[s._v("缺点：无法在 return 语句外访问数据、嵌套写法不够优雅")])]),s._v(" "),t("p",[s._v("**（3）**"),t("strong",[s._v("Hooks")])]),s._v(" "),t("p",[s._v("官方解释∶")]),s._v(" "),t("p",[s._v("Hook是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。通过自定义hook，可以复用代码逻辑。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// 自定义一个获取订阅数据的hook\nfunction useSubscription() {\n  const data = DataSource.getComments();\n  return [data];\n}\n// \nfunction CommentList(props) {\n  const {data} = props;\n  const [subData] = useSubscription();\n    ...\n}\n// 使用\n<CommentList data='hello' />\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[s._v("以上可以看出，hook解决了hoc的prop覆盖的问题，同时使用的方式解决了render props的嵌套地狱的问题。hook的优点如下∶")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("使用直观；")])]),s._v(" "),t("li",[t("p",[s._v("解决hoc的prop 重名问题；")])]),s._v(" "),t("li",[t("p",[s._v("解决render props 因共享数据 而出现嵌套地狱的问题；")])]),s._v(" "),t("li",[t("p",[s._v("能在return之外使用数据的问题。")])])]),s._v(" "),t("p",[s._v("需要注意的是：hook只能在组件顶层使用，不可在分支语句中使用。")]),s._v(" "),t("p",[t("strong",[s._v("总结∶")])]),s._v(" "),t("p",[s._v("Hoc、render props和hook都是为了解决代码复用的问题，但是hoc和render props都有特定的使用场景和明显的缺点。hook是react16.8更新的新的API，让组件逻辑复用更简洁明了，同时也解决了hoc和render props的一些缺点。")]),s._v(" "),t("h3",{attrs:{id:"_5-对react-fiber的理解-它解决了什么问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-对react-fiber的理解-它解决了什么问题"}},[s._v("#")]),s._v(" 5. 对React-Fiber的理解，它解决了什么问题？")]),s._v(" "),t("p",[s._v("React V15 在渲染时，会递归比对 VirtualDOM 树，找出需要变动的节点，然后同步更新它们， 一气呵成。这个过程期间， React 会占据浏览器资源，这会导致用户触发的事件得不到响应，并且会导致掉帧，"),t("strong",[s._v("导致用户感觉到卡顿")]),s._v("。")]),s._v(" "),t("p",[s._v("为了给用户制造一种应用很快的“假象”，不能让一个任务长期霸占着资源。 可以将浏览器的渲染、布局、绘制、资源加载(例如 HTML 解析)、事件响应、脚本执行视作操作系统的“进程”，需要通过某些调度策略合理地分配 CPU 资源，从而提高浏览器的用户响应速率, 同时兼顾任务执行效率。")]),s._v(" "),t("p",[s._v("所以 React 通过Fiber 架构，让这个执行过程变成可被中断。“适时”地让出 CPU 执行权，除了可以让浏览器及时地响应用户的交互，还有其他好处:")]),s._v(" "),t("ul",[t("li",[s._v("分批延时对DOM进行操作，避免一次性操作大量 DOM 节点，可以得到更好的用户体验；")]),s._v(" "),t("li",[s._v("给浏览器一点喘息的机会，它会对代码进行编译优化（JIT）及进行热代码优化，或者对 reflow 进行修正。")])]),s._v(" "),t("h4",{attrs:{id:"-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[s._v("#")])]),s._v(" "),t("p",[s._v("**核心思想：**Fiber 也称协程或者纤程。它和线程并不一样，协程本身是没有并发或者并行能力的（需要配合线程），它只是一种控制流程的让出机制。让出 CPU 的执行权，让 CPU 能在这段时间执行其他的操作。渲染的过程可以被中断，可以将控制权交回浏览器，让位给高优先级的任务，浏览器空闲后再恢复渲染。")]),s._v(" "),t("h3",{attrs:{id:"_6-react-component-和-react-purecomponent-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-react-component-和-react-purecomponent-的区别"}},[s._v("#")]),s._v(" 6. React.Component 和 React.PureComponent 的区别")]),s._v(" "),t("p",[s._v("PureComponent表示一个纯组件，可以用来优化React程序，减少render函数执行的次数，从而提高组件的性能。")]),s._v(" "),t("p",[s._v("在React中，当prop或者state发生变化时，可以通过在shouldComponentUpdate生命周期函数中执行return false来阻止页面的更新，从而减少不必要的render执行。React.PureComponent会自动执行 shouldComponentUpdate。")]),s._v(" "),t("p",[s._v("不过，pureComponent中的 shouldComponentUpdate() 进行的是"),t("strong",[s._v("浅比较")]),s._v("，也就是说如果是引用数据类型的数据，只会比较不是同一个地址，而不会比较这个地址里面的数据是否一致。浅比较会忽略属性和或状态突变情况，其实也就是数据引用指针没有变化，而数据发生改变的时候render是不会执行的。如果需要重新渲染那么就需要重新开辟空间引用数据。PureComponent一般会用在一些纯展示组件上。")]),s._v(" "),t("p",[s._v("使用pureComponent的"),t("strong",[s._v("好处")]),s._v("：当组件更新时，如果组件的props或者state都没有改变，render函数就不会触发。省去虚拟DOM的生成和对比过程，达到提升性能的目的。这是因为react自动做了一层浅比较。")]),s._v(" "),t("h3",{attrs:{id:"_7-component-element-instance-之间有什么区别和联系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-component-element-instance-之间有什么区别和联系"}},[s._v("#")]),s._v(" 7. Component, Element, Instance 之间有什么区别和联系？")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("**元素：**一个元素"),t("code",[s._v("element")]),s._v("是一个普通对象(plain object)，描述了对于一个DOM节点或者其他组件"),t("code",[s._v("component")]),s._v("，你想让它在屏幕上呈现成什么样子。元素"),t("code",[s._v("element")]),s._v("可以在它的属性"),t("code",[s._v("props")]),s._v("中包含其他元素(译注:用于形成元素树)。创建一个React元素"),t("code",[s._v("element")]),s._v("成本很低。元素"),t("code",[s._v("element")]),s._v("创建之后是不可变的。")])]),s._v(" "),t("li",[t("p",[s._v("**组件：**一个组件"),t("code",[s._v("component")]),s._v("可以通过多种方式声明。可以是带有一个"),t("code",[s._v("render()")]),s._v("方法的类，简单点也可以定义为一个函数。这两种情况下，它都把属性"),t("code",[s._v("props")]),s._v("作为输入，把返回的一棵元素树作为输出。")])]),s._v(" "),t("li",[t("p",[s._v("**实例：**一个实例"),t("code",[s._v("instance")]),s._v("是你在所写的组件类"),t("code",[s._v("component class")]),s._v("中使用关键字"),t("code",[s._v("this")]),s._v("所指向的东西(译注:组件实例)。它用来存储本地状态和响应生命周期事件很有用。")])])]),s._v(" "),t("p",[s._v("函数式组件("),t("code",[s._v("Functional component")]),s._v(")根本没有实例"),t("code",[s._v("instance")]),s._v("。类组件("),t("code",[s._v("Class component")]),s._v(")有实例"),t("code",[s._v("instance")]),s._v("，但是永远也不需要直接创建一个组件的实例，因为React帮我们做了这些。")]),s._v(" "),t("h3",{attrs:{id:"_8-react-createclass和extends-component的区别有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-react-createclass和extends-component的区别有哪些"}},[s._v("#")]),s._v(" 8. React.createClass和extends Component的区别有哪些？")]),s._v(" "),t("p",[s._v("React.createClass和extends Component的bai区别主要在于：")]),s._v(" "),t("p",[t("strong",[s._v("（1）语法区别")])]),s._v(" "),t("ul",[t("li",[s._v("createClass本质上是一个工厂函数，extends的方式更加接近最新的ES6规范的class写法。两种方式在语法上的差别主要体现在方法的定义和静态属性的声明上。")]),s._v(" "),t("li",[s._v("createClass方式的方法定义使用逗号，隔开，因为creatClass本质上是一个函数，传递给它的是一个Object；而class的方式定义方法时务必谨记不要使用逗号隔开，这是ES6 class的语法规范。")])]),s._v(" "),t("p",[t("strong",[s._v("（2）propType 和 getDefaultProps")])]),s._v(" "),t("ul",[t("li",[s._v("React.createClass：通过proTypes对象和getDefaultProps()方法来设置和获取props.")]),s._v(" "),t("li",[s._v("React.Component：通过设置两个属性propTypes和defaultProps")])]),s._v(" "),t("p",[t("strong",[s._v("（3）状态的区别")])]),s._v(" "),t("ul",[t("li",[s._v("React.createClass：通过getInitialState()方法返回一个包含初始值的对象")]),s._v(" "),t("li",[s._v("React.Component：通过constructor设置初始状态")])]),s._v(" "),t("p",[t("strong",[s._v("（4）this区别")])]),s._v(" "),t("ul",[t("li",[s._v("React.createClass：会正确绑定this")]),s._v(" "),t("li",[s._v("React.Component：由于使用了 ES6，这里会有些微不同，属性并不会自动绑定到 React 类的实例上。")])]),s._v(" "),t("p",[t("strong",[s._v("（5）Mixins")])]),s._v(" "),t("ul",[t("li",[s._v("React.createClass：使用 React.createClass 的话，可以在创建组件时添加一个叫做 mixins 的属性，并将可供混合的类的集合以数组的形式赋给 mixins。")]),s._v(" "),t("li",[s._v("如果使用 ES6 的方式来创建组件，那么 "),t("code",[s._v("React mixins")]),s._v(" 的特性将不能被使用了。")])]),s._v(" "),t("h3",{attrs:{id:"_9-react-高阶组件是什么-和普通组件有什么区别-适用什么场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-react-高阶组件是什么-和普通组件有什么区别-适用什么场景"}},[s._v("#")]),s._v(" 9. React 高阶组件是什么，和普通组件有什么区别，适用什么场景")]),s._v(" "),t("p",[s._v("官方解释∶")]),s._v(" "),t("p",[s._v("高阶组件（HOC）是 React 中用于复用组件逻辑的一种高级技巧。HOC 自身不是 React API 的一部分，它是一种基于 React 的组合特性而形成的设计模式。")]),s._v(" "),t("p",[s._v("高阶组件（HOC）就是一个函数，且该函数接受一个组件作为参数，并返回一个新的组件，它只是一种组件的设计模式，这种设计模式是由react自身的组合性质必然产生的。我们将它们称为纯组件，因为它们可以接受任何动态提供的子组件，但它们不会修改或复制其输入组件中的任何行为。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// hoc的定义\nfunction withSubscription(WrappedComponent, selectData) {\n  return class extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        data: selectData(DataSource, props)\n      };\n    }\n    // 一些通用的逻辑处理\n    render() {\n      // ... 并使用新数据渲染被包装的组件!\n      return <WrappedComponent data={this.state.data} {...this.props} />;\n    }\n  };\n\n// 使用\nconst BlogPostWithSubscription = withSubscription(BlogPost,\n  (DataSource, props) => DataSource.getBlogPost(props.id));\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("p",[t("strong",[s._v("1）HOC的优缺点")])]),s._v(" "),t("ul",[t("li",[s._v("优点∶ 逻辑服用、不影响被包裹组件的内部逻辑。")]),s._v(" "),t("li",[s._v("缺点∶hoc传递给被包裹组件的props容易和被包裹后的组件重名，进而被覆盖")])]),s._v(" "),t("p",[t("strong",[s._v("2）适用场景")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("代码复用，逻辑抽象")])]),s._v(" "),t("li",[t("p",[s._v("渲染劫持")])]),s._v(" "),t("li",[t("p",[s._v("State 抽象和更改")])]),s._v(" "),t("li",[t("p",[s._v("Props 更改")])])]),s._v(" "),t("p",[t("strong",[s._v("3）具体应用例子")])]),s._v(" "),t("ul",[t("li",[s._v("**权限控制：**利用高阶组件的 "),t("strong",[s._v("条件渲染")]),s._v(" 特性可以对页面进行权限控制，权限控制一般分为两个维度：页面级别和 页面元素级别")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// HOC.js\nfunction withAdminAuth(WrappedComponent) {\n    return class extends React.Component {\n        state = {\n            isAdmin: false,\n        }\n        async UNSAFE_componentWillMount() {\n            const currentRole = await getCurrentUserRole();\n            this.setState({\n                isAdmin: currentRole === 'Admin',\n            });\n        }\n        render() {\n            if (this.state.isAdmin) {\n                return <WrappedComponent {...this.props} />;\n            } else {\n                return (<div>您没有权限查看该页面，请联系管理员！</div>);\n            }\n        }\n    };\n}\n\n// pages/page-a.js\nclass PageA extends React.Component {\n    constructor(props) {\n        super(props);\n        // something here...\n    }\n    UNSAFE_componentWillMount() {\n        // fetching data\n    }\n    render() {\n        // render page with data\n    }\n}\nexport default withAdminAuth(PageA);\n\n\n// pages/page-b.js\nclass PageB extends React.Component {\n    constructor(props) {\n        super(props);\n    // something here...\n        }\n    UNSAFE_componentWillMount() {\n    // fetching data\n    }\n    render() {\n    // render page with data\n    }\n}\nexport default withAdminAuth(PageB);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br")])]),t("ul",[t("li",[s._v("**组件渲染性能追踪：**借助父组件子组件生命周期规则捕获子组件的生命周期，可以方便的对某个组件的渲染时间进行记录∶")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("class Home extends React.Component {\n        render() {\n            return (<h1>Hello World.</h1>);\n        }\n    }\n    function withTiming(WrappedComponent) {\n        return class extends WrappedComponent {\n            constructor(props) {\n                super(props);\n                this.start = 0;\n                this.end = 0;\n            }\n            UNSAFE_componentWillMount() {\n                super.componentWillMount && super.componentWillMount();\n                this.start = Date.now();\n            }\n            componentDidMount() {\n                super.componentDidMount && super.componentDidMount();\n                this.end = Date.now();\n                console.log(`${WrappedComponent.name} 组件渲染时间为 ${this.end - this.start} ms`);\n            }\n            render() {\n                return super.render();\n            }\n        };\n    }\n\n    export default withTiming(Home);   \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br")])]),t("p",[s._v("注意：withTiming 是利用 反向继承 实现的一个高阶组件，功能是计算被包裹组件（这里是 Home 组件）的渲染时间。")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("页面复用")])])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const withFetching = fetching => WrappedComponent => {\n    return class extends React.Component {\n        state = {\n            data: [],\n        }\n        async UNSAFE_componentWillMount() {\n            const data = await fetching();\n            this.setState({\n                data,\n            });\n        }\n        render() {\n            return <WrappedComponent data={this.state.data} {...this.props} />;\n        }\n    }\n}\n\n// pages/page-a.js\nexport default withFetching(fetching('science-fiction'))(MovieList);\n// pages/page-b.js\nexport default withFetching(fetching('action'))(MovieList);\n// pages/page-other.js\nexport default withFetching(fetching('some-other-type'))(MovieList);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])]),t("h3",{attrs:{id:"_10-对componentwillreceiveprops-的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-对componentwillreceiveprops-的理解"}},[s._v("#")]),s._v(" 10. 对componentWillReceiveProps 的理解")]),s._v(" "),t("p",[s._v("该方法当"),t("code",[s._v("props")]),s._v("发生变化时执行，初始化"),t("code",[s._v("render")]),s._v("时不执行，在这个回调函数里面，你可以根据属性的变化，通过调用"),t("code",[s._v("this.setState()")]),s._v("来更新你的组件状态，旧的属性还是可以通过"),t("code",[s._v("this.props")]),s._v("来获取,这里调用更新状态是安全的，并不会触发额外的"),t("code",[s._v("render")]),s._v("调用。")]),s._v(" "),t("p",[s._v("**使用好处：**在这个生命周期中，可以在子组件的render函数执行前获取新的props，从而更新子组件自己的state。 可以将数据请求放在这里进行执行，需要传的参数则从componentWillReceiveProps(nextProps)中获取。而不必将所有的请求都放在父组件中。于是该请求只会在该组件渲染时才会发出，从而减轻请求负担。componentWillReceiveProps在初始化render的时候不会执行，它会在Component接受到新的状态(Props)时被触发，一般用于父组件状态更新时子组件的重新渲染。")]),s._v(" "),t("h3",{attrs:{id:"_11-哪些方法会触发-react-重新渲染-重新渲染-render-会做些什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-哪些方法会触发-react-重新渲染-重新渲染-render-会做些什么"}},[s._v("#")]),s._v(" 11. 哪些方法会触发 React 重新渲染？重新渲染 render 会做些什么？")]),s._v(" "),t("p",[t("strong",[s._v("（1）哪些方法会触发 react 重新渲染?")])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("setState（）方法被调用")])])]),s._v(" "),t("p",[s._v("setState 是 React 中最常用的命令，通常情况下，执行 setState 会触发 render。但是这里有个点值得关注，执行 setState 的时候不一定会重新渲染。当 setState 传入 null 时，并不会触发 render。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('class App extends React.Component {\n  state = {\n    a: 1\n  };\n\n  render() {\n    console.log("render");\n    return (\n      <React.Fragement>\n        <p>{this.state.a}</p>\n        <button\n          onClick={() => {\n            this.setState({ a: 1 }); // 这里并没有改变 a 的值\n          }}\n        >\n          Click me\n        </button>\n        <button onClick={() => this.setState(null)}>setState null</button>\n        <Child />\n      </React.Fragement>\n    );\n  }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])]),t("ul",[t("li",[t("strong",[s._v("父组件重新渲染")])])]),s._v(" "),t("p",[s._v("只要父组件重新渲染了，即使传入子组件的 props 未发生变化，那么子组件也会重新渲染，进而触发 render")]),s._v(" "),t("p",[t("strong",[s._v("（2）重新渲染 render 会做些什么?")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("会对新旧 VNode 进行对比，也就是我们所说的Diff算法。")])]),s._v(" "),t("li",[t("p",[s._v("对新旧两棵树进行一个深度优先遍历，这样每一个节点都会一个标记，在到深度遍历的时候，每遍历到一和个节点，就把该节点和新的节点树进行对比，如果有差异就放到一个对象里面")])]),s._v(" "),t("li",[t("p",[s._v("遍历差异对象，根据差异的类型，根据对应对规则更新VNode")])])]),s._v(" "),t("p",[s._v("React 的处理 render 的基本思维模式是每次一有变动就会去重新渲染整个应用。在 Virtual DOM 没有出现之前，最简单的方法就是直接调用 innerHTML。Virtual DOM厉害的地方并不是说它比直接操作 DOM 快，而是说不管数据怎么变，都会尽量以最小的代价去更新 DOM。React 将 render 函数返回的虚拟 DOM 树与老的进行比较，从而确定 DOM 要不要更新、怎么更新。当 DOM 树很大时，遍历两棵树进行各种比对还是相当耗性能的，特别是在顶层 setState 一个微小的修改，默认会去遍历整棵树。尽管 React 使用高度优化的 Diff 算法，但是这个过程仍然会损耗性能.")]),s._v(" "),t("h3",{attrs:{id:"_12-react如何判断什么时候重新渲染组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-react如何判断什么时候重新渲染组件"}},[s._v("#")]),s._v(" 12. React如何判断什么时候重新渲染组件？")]),s._v(" "),t("p",[s._v("组件状态的改变可以因为"),t("code",[s._v("props")]),s._v("的改变，或者直接通过"),t("code",[s._v("setState")]),s._v("方法改变。组件获得新的状态，然后React决定是否应该重新渲染组件。只要组件的state发生变化，React就会对组件进行重新渲染。这是因为React中的"),t("code",[s._v("shouldComponentUpdate")]),s._v("方法默认返回"),t("code",[s._v("true")]),s._v("，这就是导致每次更新都重新渲染的原因。")]),s._v(" "),t("p",[s._v("当React将要渲染组件时会执行"),t("code",[s._v("shouldComponentUpdate")]),s._v("方法来看它是否返回"),t("code",[s._v("true")]),s._v("（组件应该更新，也就是重新渲染）。所以需要重写"),t("code",[s._v("shouldComponentUpdate")]),s._v("方法让它根据情况返回"),t("code",[s._v("true")]),s._v("或者"),t("code",[s._v("false")]),s._v("来告诉React什么时候重新渲染什么时候跳过重新渲染。")]),s._v(" "),t("h3",{attrs:{id:"_13-react声明组件有哪几种方法-有什么不同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-react声明组件有哪几种方法-有什么不同"}},[s._v("#")]),s._v(" 13. React声明组件有哪几种方法，有什么不同？")]),s._v(" "),t("p",[s._v("React 声明组件的三种方式：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("函数式定义的"),t("code",[s._v("无状态组件")])])]),s._v(" "),t("li",[t("p",[s._v("ES5原生方式"),t("code",[s._v("React.createClass")]),s._v("定义的组件")])]),s._v(" "),t("li",[t("p",[s._v("ES6形式的"),t("code",[s._v("extends React.Component")]),s._v("定义的组件")])])]),s._v(" "),t("p",[t("strong",[s._v("（1）无状态函数式组件")])]),s._v(" "),t("p",[s._v("它是为了创建纯展示组件，这种组件只负责根据传入的props来展示，不涉及到state状态的操作")]),s._v(" "),t("p",[s._v("组件不会被实例化，整体渲染性能得到提升，不能访问this对象，不能访问生命周期的方法")]),s._v(" "),t("p",[t("strong",[s._v("（2）ES5 原生方式 React.createClass // RFC")])]),s._v(" "),t("p",[s._v("React.createClass会自绑定函数方法，导致不必要的性能开销，增加代码过时的可能性。")]),s._v(" "),t("p",[t("strong",[s._v("（3）E6继承形式 React.Component // RCC")])]),s._v(" "),t("p",[s._v("目前极为推荐的创建有状态组件的方式，最终会取代React.createClass形式；相对于 React.createClass可以更好实现代码复用。")]),s._v(" "),t("p",[t("strong",[s._v("无状态组件相对于于后者的区别：")])]),s._v(" "),t("p",[s._v("与无状态组件相比，React.createClass和React.Component都是创建有状态的组件，这些组件是要被实例化的，并且可以访问组件的生命周期方法。")]),s._v(" "),t("p",[t("strong",[s._v("React.createClass与React.Component区别：")])]),s._v(" "),t("p",[t("strong",[s._v("① 函数this自绑定")])]),s._v(" "),t("ul",[t("li",[s._v("React.createClass创建的组件，其每一个成员函数的this都有React自动绑定，函数中的this会被正确设置。")]),s._v(" "),t("li",[s._v("React.Component创建的组件，其成员函数不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件实例对象。")])]),s._v(" "),t("p",[t("strong",[s._v("② 组件属性类型propTypes及其默认props属性defaultProps配置不同")])]),s._v(" "),t("ul",[t("li",[s._v("React.createClass在创建组件时，有关组件props的属性类型及组件默认的属性会作为组件实例的属性来配置，其中defaultProps是使用getDefaultProps的方法来获取默认组件属性的")]),s._v(" "),t("li",[s._v("React.Component在创建组件时配置这两个对应信息时，他们是作为组件类的属性，不是组件实例的属性，也就是所谓的类的静态属性来配置的。")])]),s._v(" "),t("p",[t("strong",[s._v("③ 组件初始状态state的配置不同")])]),s._v(" "),t("ul",[t("li",[s._v("React.createClass创建的组件，其状态state是通过getInitialState方法来配置组件相关的状态；")]),s._v(" "),t("li",[s._v("React.Component创建的组件，其状态state是在constructor中像初始化组件属性一样声明的。")])]),s._v(" "),t("h3",{attrs:{id:"_14-对有状态组件和无状态组件的理解及使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-对有状态组件和无状态组件的理解及使用场景"}},[s._v("#")]),s._v(" 14. 对有状态组件和无状态组件的理解及使用场景")]),s._v(" "),t("p",[t("strong",[s._v("（1）有状态组件")])]),s._v(" "),t("p",[t("strong",[s._v("特点：")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("是类组件")])]),s._v(" "),t("li",[t("p",[s._v("有继承")])]),s._v(" "),t("li",[t("p",[s._v("可以使用this")])]),s._v(" "),t("li",[t("p",[s._v("可以使用react的生命周期")])]),s._v(" "),t("li",[t("p",[s._v("使用较多，容易频繁触发生命周期钩子函数，影响性能")])]),s._v(" "),t("li",[t("p",[s._v("内部使用 state，维护自身状态的变化，有状态组件根据外部组件传入的 props 和自身的 state进行渲染。")])])]),s._v(" "),t("p",[t("strong",[s._v("使用场景：")])]),s._v(" "),t("ul",[t("li",[s._v("需要使用到状态的。")]),s._v(" "),t("li",[s._v("需要使用状态操作组件的（无状态组件的也可以实现新版本react hooks也可实现）")])]),s._v(" "),t("p",[t("strong",[s._v("总结：")])]),s._v(" "),t("p",[s._v("类组件可以维护自身的状态变量，即组件的 state ，类组件还有不同的生命周期方法，可以让开发者能够在组件的不同阶段（挂载、更新、卸载），对组件做更多的控制。类组件则既可以充当无状态组件，也可以充当有状态组件。当一个类组件不需要管理自身状态时，也可称为无状态组件。")]),s._v(" "),t("p",[t("strong",[s._v("（2）无状态组件")])]),s._v(" "),t("p",[t("strong",[s._v("特点：")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("不依赖自身的状态state")])]),s._v(" "),t("li",[t("p",[s._v("可以是类组件或者函数组件。")])]),s._v(" "),t("li",[t("p",[s._v("可以完全避免使用 this 关键字。（由于使用的是箭头函数事件无需绑定）")])]),s._v(" "),t("li",[t("p",[s._v("有更高的性能。当不需要使用生命周期钩子时，应该首先使用无状态函数组件")])]),s._v(" "),t("li",[t("p",[s._v("组件内部不维护 state ，只根据外部组件传入的 props 进行渲染的组件，当 props 改变时，组件重新渲染。")])])]),s._v(" "),t("p",[t("strong",[s._v("使用场景：")])]),s._v(" "),t("ul",[t("li",[s._v("组件不需要管理 state，纯展示")])]),s._v(" "),t("p",[t("strong",[s._v("优点：")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("简化代码、专注于 render")])]),s._v(" "),t("li",[t("p",[s._v("组件不需要被实例化，无生命周期，提升性能。 输出（渲染）只取决于输入（属性），无副作用")])]),s._v(" "),t("li",[t("p",[s._v("视图和数据的解耦分离")])])]),s._v(" "),t("p",[t("strong",[s._v("缺点：")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("无法使用 ref")])]),s._v(" "),t("li",[t("p",[s._v("无生命周期方法")])]),s._v(" "),t("li",[t("p",[s._v("无法控制组件的重渲染，因为无法使用shouldComponentUpdate 方法，当组件接受到新的属性时则会重渲染")])])]),s._v(" "),t("p",[t("strong",[s._v("总结：")])]),s._v(" "),t("p",[s._v("组件内部状态且与外部无关的组件，可以考虑用状态组件，这样状态树就不会过于复杂，易于理解和管理。当一个组件不需要管理自身状态时，也就是无状态组件，应该优先设计为函数组件。比如自定义的 "),t("code",[s._v("、")]),s._v(" 等组件。")]),s._v(" "),t("h3",{attrs:{id:"_15-对react中fragment的理解-它的使用场景是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-对react中fragment的理解-它的使用场景是什么"}},[s._v("#")]),s._v(" 15. 对React中Fragment的理解，它的使用场景是什么？")]),s._v(" "),t("p",[s._v("在React中，组件返回的元素只能有一个根元素。为了不添加多余的DOM节点，我们可以使用Fragment标签来包裹所有的元素，Fragment标签不会渲染出任何元素。React官方对Fragment的解释：")]),s._v(" "),t("p",[s._v("React 中的一个常见模式是一个组件返回多个元素。Fragments 允许你将子列表分组，而无需向 DOM 添加额外节点。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("import React, { Component, Fragment } from 'react'\n\n// 一般形式\nrender() {\n  return (\n    <React.Fragment>\n      <ChildA />\n      <ChildB />\n      <ChildC />\n    </React.Fragment>\n  );\n}\n// 也可以写成以下形式\nrender() {\n  return (\n    <>\n      <ChildA />\n      <ChildB />\n      <ChildC />\n    </>\n  );\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br")])]),t("h3",{attrs:{id:"_16-react如何获取组件对应的dom元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-react如何获取组件对应的dom元素"}},[s._v("#")]),s._v(" 16. React如何获取组件对应的DOM元素？")]),s._v(" "),t("p",[s._v("可以用ref来获取某个子节点的实例，然后通过当前class组件实例的一些特定属性来直接获取子节点实例。ref有三种实现方法:")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("字符串格式")]),s._v("：字符串格式，这是React16版本之前用得最多的，例如："),t("code",[s._v("span")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("函数格式")]),s._v("：ref对应一个方法，该方法有一个参数，也就是对应的节点实例，例如："),t("code",[s._v("this.info = ele}>")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("createRef方法")]),s._v("：React 16提供的一个API，使用React.createRef()来实现")])])]),s._v(" "),t("h3",{attrs:{id:"_17-react中可以在render访问refs吗-为什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-react中可以在render访问refs吗-为什么"}},[s._v("#")]),s._v(" 17. React中可以在render访问refs吗？为什么？")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("<>\n  <span id=\"name\" ref={this.spanRef}>{this.state.title}</span>\n  <span>{\n     this.spanRef.current ? '有值' : '无值'\n  }</span>\n</>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("不可以，render 阶段 DOM 还没有生成，无法获取 DOM。DOM 的获取需要在 pre-commit 阶段和 commit 阶段：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/1500604/1611822510207-8101671e-8b5a-4968-88b1-85d44e078b0b.png",alt:"img"}})]),s._v(" "),t("h3",{attrs:{id:"_18-对react的插槽-portals-的理解-如何使用-有哪些使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18-对react的插槽-portals-的理解-如何使用-有哪些使用场景"}},[s._v("#")]),s._v(" 18. 对React的插槽(Portals)的理解，如何使用，有哪些使用场景")]),s._v(" "),t("p",[s._v("React 官方对 Portals 的定义：")]),s._v(" "),t("p",[s._v("Portal 提供了一种将子节点渲染到存在于父组件以外的 DOM 节点的优秀的方案")]),s._v(" "),t("p",[s._v("Portals 是React 16提供的官方解决方案，使得组件可以脱离父组件层级挂载在DOM树的任何位置。通俗来讲，就是我们 render 一个组件，但这个组件的 DOM 结构并不在本组件内。")]),s._v(" "),t("p",[s._v("Portals语法如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("ReactDOM.createPortal(child, container);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("第一个参数 child 是可渲染的 React 子项，比如元素，字符串或者片段等;")]),s._v(" "),t("li",[s._v("第二个参数 container 是一个 DOM 元素。")])]),s._v(" "),t("p",[s._v("一般情况下，组件的render函数返回的元素会被挂载在它的父级组件上：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("import DemoComponent from './DemoComponent';\nrender() {\n  // DemoComponent元素会被挂载在id为parent的div的元素上\n  return (\n    <div id=\"parent\">\n        <DemoComponent />\n    </div>\n  );\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("然而，有些元素需要被挂载在更高层级的位置。最典型的应用场景：当父组件具有"),t("code",[s._v("overflow: hidden")]),s._v("或者"),t("code",[s._v("z-index")]),s._v("的样式设置时，组件有可能被其他元素遮挡，这时就可以考虑要不要使用Portal使组件的挂载脱离父组件。例如：对话框，模态窗。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("import DemoComponent from './DemoComponent';\nrender() {\n  // react会将DemoComponent组件直接挂载在真实的 dom 节点 domNode 上，生命周期还和16版本之前相同。\n  return ReactDOM.createPortal(\n    <DemoComponent />,\n    domNode,\n  );\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h3",{attrs:{id:"_19-在react中如何避免不必要的render"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_19-在react中如何避免不必要的render"}},[s._v("#")]),s._v(" 19. 在React中如何避免不必要的render？")]),s._v(" "),t("p",[s._v("React 基于虚拟 DOM 和高效 Diff 算法的完美配合，实现了对 DOM 最小粒度的更新。大多数情况下，React 对 DOM 的渲染效率足以业务日常。但在个别复杂业务场景下，性能问题依然会困扰我们。此时需要采取一些措施来提升运行性能，其很重要的一个方向，就是避免不必要的渲染（Render）。这里提下优化的点：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("shouldComponentUpdate 和 PureComponent")])])]),s._v(" "),t("p",[s._v("在 React 类组件中，可以利用 shouldComponentUpdate或者 PureComponent 来减少因父组件更新而触发子组件的 render，从而达到目的。shouldComponentUpdate 来决定是否组件是否重新渲染，如果不希望组件重新渲染，返回 false 即可。")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("利用高阶组件")])])]),s._v(" "),t("p",[s._v("在函数组件中，并没有 shouldComponentUpdate 这个生命周期，可以利用高阶组件，封装一个类似 PureComponet 的功能")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("使用 React.memo")])])]),s._v(" "),t("p",[s._v("React.memo 是 React 16.6 新的一个 API，用来缓存组件的渲染，避免不必要的更新，其实也是一个高阶组件，与 PureComponent 十分类似，但不同的是， React.memo只能用于函数组件。")]),s._v(" "),t("h3",{attrs:{id:"_20-对-react-intl-的理解-它的工作原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20-对-react-intl-的理解-它的工作原理"}},[s._v("#")]),s._v(" 20. 对 React-Intl 的理解，它的工作原理？")]),s._v(" "),t("p",[s._v("React-intl是雅虎的语言国际化开源项目FormatJS的一部分，通过其提供的组件和API可以与ReactJS绑定。")]),s._v(" "),t("p",[s._v("React-intl提供了两种使用方法，一种是引用React组件，另一种是直接调取API，官方更加推荐在React项目中使用前者，只有在无法使用React组件的地方，才应该调用框架提供的API。它提供了一系列的React组件，包括数字格式化、字符串格式化、日期格式化等。")]),s._v(" "),t("p",[s._v("在React-intl中，可以配置不同的语言包，他的工作原理就是根据需要，在语言包之间进行切换。")]),s._v(" "),t("h3",{attrs:{id:"_21-对-react-context-的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_21-对-react-context-的理解"}},[s._v("#")]),s._v(" 21. 对 React context 的理解")]),s._v(" "),t("p",[s._v("在React中，数据传递一般使用props传递数据，维持单向数据流，这样可以让组件之间的关系变得简单且可预测，但是单项数据流在某些场景中并不适用。单纯一对的父子组件传递并无问题，但要是组件之间层层依赖深入，props就需要层层传递显然，这样做太繁琐了。")]),s._v(" "),t("p",[s._v("Context 提供了一种在组件之间共享此类值的方式，而不必显式地通过组件树的逐层传递 props。")]),s._v(" "),t("p",[s._v("可以把context当做是特定一个组件树内共享的store，用来做数据传递。"),t("strong",[s._v("简单说就是，当你不想在组件树中通过逐层传递props或者state的方式来传递数据时，可以使用Context来实现跨层级的组件数据传递。")])]),s._v(" "),t("p",[s._v("JS的代码块在执行期间，会创建一个相应的作用域链，这个作用域链记录着运行时JS代码块执行期间所能访问的活动对象，包括变量和函数，JS程序通过作用域链访问到代码块内部或者外部的变量和函数。")]),s._v(" "),t("p",[s._v("假如以JS的作用域链作为类比，React组件提供的Context对象其实就好比一个提供给子组件访问的作用域，而 Context对象的属性可以看成作用域上的活动对象。由于组件 的 Context 由其父节点链上所有组件通 过 getChildContext（）返回的Context对象组合而成，所以，组件通过Context是可以访问到其父组件链上所有节点组件提供的Context的属性。")]),s._v(" "),t("h3",{attrs:{id:"_22-为什么react并不推荐优先考虑使用context"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22-为什么react并不推荐优先考虑使用context"}},[s._v("#")]),s._v(" 22. 为什么React并不推荐优先考虑使用Context？")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("Context目前还处于实验阶段，可能会在后面的发行版本中有很大的变化，事实上这种情况已经发生了，所以为了避免给今后升级带来大的影响和麻烦，不建议在app中使用context。")])]),s._v(" "),t("li",[t("p",[s._v("尽管不建议在app中使用context，但是独有组件而言，由于影响范围小于app，如果可以做到高内聚，不破坏组件树之间的依赖关系，可以考虑使用context")])]),s._v(" "),t("li",[t("p",[s._v("对于组件之间的数据通信或者状态管理，有效使用props或者state解决，然后再考虑使用第三方的成熟库进行解决，以上的方法都不是最佳的方案的时候，在考虑context。")])]),s._v(" "),t("li",[t("p",[s._v("context的更新需要通过setState()触发，但是这并不是很可靠的，Context支持跨组件的访问，但是如果中间的子组件通过一些方法不影响更新，比如 shouldComponentUpdate() 返回false 那么不能保证Context的更新一定可以使用Context的子组件，因此，Context的可靠性需要关注")])])]),s._v(" "),t("h3",{attrs:{id:"_23-react中什么是受控组件和非控组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_23-react中什么是受控组件和非控组件"}},[s._v("#")]),s._v(" 23. React中什么是受控组件和非控组件？")]),s._v(" "),t("p",[t("strong",[s._v("（1）受控组件")])]),s._v(" "),t("p",[s._v("在使用表单来收集用户输入时，例如"),t("input"),t("select",[t("textearea",[s._v("等元素都要绑定一个change事件，当表单的状态发生变化，就会触发onChange事件，更新组件的state。这种组件在React中被称为"),t("strong",[s._v("受控组件")]),s._v("，在受控组件中，组件渲染出的状态与它的value或checked属性相对应，react通过这种方式消除了组件的局部状态，使整个状态可控。react官方推荐使用受控表单组件。")])],1)]),s._v(" "),t("p",[s._v("受控组件更新state的流程：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("可以通过初始state中设置表单的默认值")])]),s._v(" "),t("li",[t("p",[s._v("每当表单的值发生变化时，调用onChange事件处理器")])]),s._v(" "),t("li",[t("p",[s._v("事件处理器通过事件对象e拿到改变后的状态，并更新组件的state")])]),s._v(" "),t("li",[t("p",[s._v("一旦通过setState方法更新state，就会触发视图的重新渲染，完成表单组件的更新")])])]),s._v(" "),t("p",[t("strong",[s._v("受控组件缺陷：")])]),s._v(" "),t("p",[s._v("表单元素的值都是由React组件进行管理，当有多个输入框，或者多个这种组件时，如果想同时获取到全部的值就必须每个都要编写事件处理函数，这会让代码看着很臃肿，所以为了解决这种情况，出现了非受控组件。")]),s._v(" "),t("p",[t("strong",[s._v("（2）非受控组件")])]),s._v(" "),t("p",[s._v("如果一个表单组件没有value props（单选和复选按钮对应的是checked props）时，就可以称为非受控组件。在非受控组件中，可以使用一个ref来从DOM获得表单值。而不是为每个状态更新编写一个事件处理程序。")]),s._v(" "),t("p",[s._v("React官方的解释：")]),s._v(" "),t("p",[s._v("要编写一个非受控组件，而不是为每个状态更新都编写数据处理函数，你可以使用 ref来从 DOM 节点中获取表单数据。")]),s._v(" "),t("p",[s._v("因为非受控组件将真实数据储存在 DOM 节点中，所以在使用非受控组件时，有时候反而更容易同时集成 React 和非 React 代码。如果你不介意代码美观性，并且希望快速编写代码，使用非受控组件往往可以减少你的代码量。否则，你应该使用受控组件。")]),s._v(" "),t("p",[s._v("例如，下面的代码在非受控组件中接收单个属性：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('class NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleSubmit(event) {\n    alert(\'A name was submitted: \' + this.input.value);\n    event.preventDefault();\n  }\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type="text" ref={(input) => this.input = input} />\n        </label>\n        <input type="submit" value="Submit" />\n      </form>\n    );\n  }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])]),t("p",[s._v("**总结：**页面中所有输入类的DOM如果是现用现取的称为非受控组件，而通过setState将输入的值维护到了state中，需要时再从state中取出，这里的数据就受到了state的控制，称为受控组件。")]),s._v(" "),t("h3",{attrs:{id:"_24-react中refs的作用是什么-有哪些应用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_24-react中refs的作用是什么-有哪些应用场景"}},[s._v("#")]),s._v(" 24. React中refs的作用是什么？有哪些应用场景？")]),s._v(" "),t("p",[s._v("Refs 提供了一种方式，用于访问在 render 方法中创建的 React 元素或 DOM 节点。Refs 应该谨慎使用，如下场景使用 Refs 比较适合：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("处理焦点、文本选择或者媒体的控制")])]),s._v(" "),t("li",[t("p",[s._v("触发必要的动画")])]),s._v(" "),t("li",[t("p",[s._v("集成第三方 DOM 库")])])]),s._v(" "),t("p",[s._v("Refs 是使用 "),t("code",[s._v("React.createRef()")]),s._v(" 方法创建的，他通过 "),t("code",[s._v("ref")]),s._v(" 属性附加到 React 元素上。要在整个组件中使用 Refs，需要将 "),t("code",[s._v("ref")]),s._v(" 在构造函数中分配给其实例属性：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("class MyComponent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.myRef = React.createRef()\n  }\n  render() {\n    return <div ref={this.myRef} />\n  }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("由于函数组件没有实例，因此不能在函数组件上直接使用 "),t("code",[s._v("ref")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("function MyFunctionalComponent() {\n  return <input />;\n}\nclass Parent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.textInput = React.createRef();\n  }\n  render() {\n    // 这将不会工作！\n    return (\n      <MyFunctionalComponent ref={this.textInput} />\n    );\n  }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("但可以通过闭合的帮助在函数组件内部进行使用 Refs：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('function CustomTextInput(props) {\n  // 这里必须声明 textInput，这样 ref 回调才可以引用它\n  let textInput = null;\n  function handleClick() {\n    textInput.focus();\n  }\n  return (\n    <div>\n      <input\n        type="text"\n        ref={(input) => { textInput = input; }} />\n      <input\n        type="button"\n        value="Focus the text input"\n        onClick={handleClick}\n      />\n    </div>\n  );  \n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("p",[t("strong",[s._v("注意：")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("不应该过度的使用 Refs")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("ref")]),s._v(" 的返回值取决于节点的类型：")])]),s._v(" "),t("li",[t("p",[s._v("当 "),t("code",[s._v("ref")]),s._v(" 属性被用于一个普通的 HTML 元素时，"),t("code",[s._v("React.createRef()")]),s._v(" 将接收底层 DOM 元素作为他的 "),t("code",[s._v("current")]),s._v(" 属性以创建 "),t("code",[s._v("ref")]),s._v("。")])]),s._v(" "),t("li",[t("p",[s._v("当 "),t("code",[s._v("ref")]),s._v(" 属性被用于一个自定义的类组件时，"),t("code",[s._v("ref")]),s._v(" 对象将接收该组件已挂载的实例作为他的 "),t("code",[s._v("current")]),s._v("。")])]),s._v(" "),t("li",[t("p",[s._v("当在父组件中需要访问子组件中的 "),t("code",[s._v("ref")]),s._v(" 时可使用传递 Refs 或回调 Refs。")])])]),s._v(" "),t("h3",{attrs:{id:"_25-react中除了在构造函数中绑定this-还有别的方式吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_25-react中除了在构造函数中绑定this-还有别的方式吗"}},[s._v("#")]),s._v(" 25. React中除了在构造函数中绑定this，还有别的方式吗？")]),s._v(" "),t("ul",[t("li",[s._v("在构造函数中绑定this")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("constructor(props){\n      super(props); \n       this.state={\n           msg:'hello world',\n       }\n       this.getMsg = this.getMsg.bind(this)\n   }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("ul",[t("li",[s._v("函数定义的时候使用箭头函数")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("constructor(props){\n    super(props);\n    this.state={\n           msg:'hello world',\n    }\n    render(){\n      <button onClcik={()=>{alert(this.state.msg)}}>点我</button>\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("ul",[t("li",[s._v("函数调用是使用bind绑定this")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v(" <button onClick={this.getMsg.bind(this)}>点我</button>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"_26-react组件的构造函数有什么作用-它是必须的吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_26-react组件的构造函数有什么作用-它是必须的吗"}},[s._v("#")]),s._v(" 26. React组件的构造函数有什么作用？它是必须的吗？")]),s._v(" "),t("p",[s._v("构造函数主要用于两个目的：")]),s._v(" "),t("ul",[t("li",[s._v("通过将对象分配给this.state来初始化本地状态")]),s._v(" "),t("li",[s._v("将事件处理程序方法绑定到实例上")])]),s._v(" "),t("p",[s._v("所以，当在React class中需要设置state的初始值或者绑定事件时，需要加上构造函数，官方Demo：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("class LikeButton extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      liked: false\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.setState({liked: !this.state.liked});\n  }\n  render() {\n    const text = this.state.liked ? 'liked' : 'haven\\'t liked';\n    return (\n      <div onClick={this.handleClick}>\n        You {text} this. Click to toggle.\n      </div>\n    );\n  }\n}\nReactDOM.render(\n  <LikeButton />,\n  document.getElementById('example')\n);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("p",[s._v("构造函数用来新建父类的this对象；子类必须在constructor方法中调用super方法；否则新建实例时会报错；因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法；子类就得不到this对象。")]),s._v(" "),t("p",[t("strong",[s._v("注意：")])]),s._v(" "),t("ul",[t("li",[s._v("constructor () 必须配上 super(), 如果要在constructor 内部使用 this.props 就要 传入props , 否则不用")]),s._v(" "),t("li",[s._v("JavaScript中的 bind 每次都会返回一个新的函数, 为了性能等考虑, 尽量在constructor中绑定事件")])]),s._v(" "),t("h3",{attrs:{id:"_27-react-forwardref是什么-它有什么作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_27-react-forwardref是什么-它有什么作用"}},[s._v("#")]),s._v(" 27. React.forwardRef是什么？它有什么作用？")]),s._v(" "),t("p",[s._v("React.forwardRef 会创建一个React组件，这个组件能够将其接受的 ref 属性转发到其组件树下的另一个组件中。这种技术并不常见，但在以下两种场景中特别有用：")]),s._v(" "),t("ul",[t("li",[s._v("转发 refs 到 DOM 组件")]),s._v(" "),t("li",[s._v("在高阶组件中转发 refs")])]),s._v(" "),t("h3",{attrs:{id:"_28-类组件与函数组件有什么异同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_28-类组件与函数组件有什么异同"}},[s._v("#")]),s._v(" 28. 类组件与函数组件有什么异同？")]),s._v(" "),t("p",[t("strong",[s._v("相同点：")])]),s._v(" "),t("p",[s._v("组件是 React 可复用的最小代码片段，它们会返回要在页面中渲染的 React 元素。也正因为组件是 React 的最小编码单位，所以无论是函数组件还是类组件，在使用方式和最终呈现效果上都是完全一致的。")]),s._v(" "),t("p",[s._v("我们甚至可以将一个类组件改写成函数组件，或者把函数组件改写成一个类组件（虽然并不推荐这种重构行为）。从使用者的角度而言，很难从使用体验上区分两者，而且在现代浏览器中，闭包和类的性能只在极端场景下才会有明显的差别。所以，基本可认为两者作为组件是完全一致的。")]),s._v(" "),t("p",[t("strong",[s._v("不同点：")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("它们在开发时的心智模型上却存在巨大的差异。类组件是基于面向对象编程的，它主打的是继承、生命周期等核心概念；而函数组件内核是函数式编程，主打的是 immutable、没有副作用、引用透明等特点。")])]),s._v(" "),t("li",[t("p",[s._v("之前，在使用场景上，如果存在需要使用生命周期的组件，那么主推类组件；设计模式上，如果需要使用继承，那么主推类组件。但现在由于 React Hooks 的推出，生命周期概念的淡出，函数组件可以完全取代类组件。其次继承并不是组件最佳的设计模式，官方更推崇“组合优于继承”的设计概念，所以类组件在这方面的优势也在淡出。")])]),s._v(" "),t("li",[t("p",[s._v("性能优化上，类组件主要依靠 shouldComponentUpdate 阻断渲染来提升性能，而函数组件依靠 React.memo 缓存渲染结果来提升性能。")])]),s._v(" "),t("li",[t("p",[s._v("从上手程度而言，类组件更容易上手，从未来趋势上看，由于React Hooks 的推出，函数组件成了社区未来主推的方案。")])]),s._v(" "),t("li",[t("p",[s._v("类组件在未来时间切片与并发模式中，由于生命周期带来的复杂度，并不易于优化。而函数组件本身轻量简单，且在 Hooks 的基础上提供了比原先更细粒度的逻辑组织与复用，更能适应 React 的未来发展。")])])]),s._v(" "),t("h2",{attrs:{id:"二、数据管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、数据管理"}},[s._v("#")]),s._v(" 二、数据管理")]),s._v(" "),t("h3",{attrs:{id:"_1-react-setstate-调用的原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-react-setstate-调用的原理"}},[s._v("#")]),s._v(" 1. React setState 调用的原理")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/1500604/1611908814278-be06f25f-ee6f-44d5-93f1-c0a24eecd456.png",alt:"img"}})]),s._v(" "),t("p",[s._v("具体的执行过程如下（源码级解析）：")]),s._v(" "),t("ul",[t("li",[s._v("首先调用了"),t("code",[s._v("setState")]),s._v(" 入口函数，入口函数在这里就是充当一个分发器的角色，根据入参的不同，将其分发到不同的功能函数中去；")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("ReactComponent.prototype.setState = function (partialState, callback) {\n  this.updater.enqueueSetState(this, partialState);\n  if (callback) {\n    this.updater.enqueueCallback(this, callback, 'setState');\n  }\n};\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("ul",[t("li",[t("code",[s._v("enqueueSetState")]),s._v(" 方法将新的 "),t("code",[s._v("state")]),s._v(" 放进组件的状态队列里，并调用 "),t("code",[s._v("enqueueUpdate")]),s._v(" 来处理将要更新的实例对象；")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("enqueueSetState: function (publicInstance, partialState) {\n  // 根据 this 拿到对应的组件实例\n  var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');\n  // 这个 queue 对应的就是一个组件实例的 state 数组\n  var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);\n  queue.push(partialState);\n  //  enqueueUpdate 用来处理当前的组件实例\n  enqueueUpdate(internalInstance);\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("ul",[t("li",[s._v("在 "),t("code",[s._v("enqueueUpdate")]),s._v(" 方法中引出了一个关键的对象——"),t("code",[s._v("batchingStrategy")]),s._v("，该对象所具备的"),t("code",[s._v("isBatchingUpdates")]),s._v(" 属性直接决定了当下是要走更新流程，还是应该排队等待；如果轮到执行，就调用 "),t("code",[s._v("batchedUpdates")]),s._v(" 方法来直接发起更新流程。由此可以推测，"),t("code",[s._v("batchingStrategy")]),s._v(" 或许正是 React 内部专门用于管控批量更新的对象。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("function enqueueUpdate(component) {\n  ensureInjected();\n  // 注意这一句是问题的关键，isBatchingUpdates标识着当前是否处于批量创建/更新组件的阶段\n  if (!batchingStrategy.isBatchingUpdates) {\n    // 若当前没有处于批量创建/更新组件的阶段，则立即更新组件\n    batchingStrategy.batchedUpdates(enqueueUpdate, component);\n    return;\n  }\n  // 否则，先把组件塞入 dirtyComponents 队列里，让它“再等等”\n  dirtyComponents.push(component);\n  if (component._updateBatchNumber == null) {\n    component._updateBatchNumber = updateBatchNumber + 1;\n  }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[t("strong",[s._v("注意：")]),t("code",[s._v("batchingStrategy")]),s._v(" 对象可以理解为“锁管理器”。这里的“锁”，是指 React 全局唯一的 "),t("code",[s._v("isBatchingUpdates")]),s._v(" 变量，"),t("code",[s._v("isBatchingUpdates")]),s._v(" 的初始值是 "),t("code",[s._v("false")]),s._v("，意味着“当前并未进行任何批量更新操作”。每当 React 调用 "),t("code",[s._v("batchedUpdate")]),s._v(" 去执行更新动作时，会先把这个锁给“锁上”（置为 "),t("code",[s._v("true")]),s._v("），表明“现在正处于批量更新过程中”。当锁被“锁上”的时候，任何需要更新的组件都只能暂时进入 "),t("code",[s._v("dirtyComponents")]),s._v(" 里排队等候下一次的批量更新，而不能随意“插队”。此处体现的“任务锁”的思想，是 React 面对大量状态仍然能够实现有序分批处理的基石。")]),s._v(" "),t("h3",{attrs:{id:"_2-react-setstate-调用之后发生了什么-是同步还是异步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-react-setstate-调用之后发生了什么-是同步还是异步"}},[s._v("#")]),s._v(" 2. React setState 调用之后发生了什么？是同步还是异步？")]),s._v(" "),t("p",[t("strong",[s._v("（1）React中setState后发生了什么")])]),s._v(" "),t("p",[s._v("在代码中调用setState函数之后，React 会将传入的参数对象与组件当前的状态合并，然后触发调和过程(Reconciliation)。经过调和过程，React 会以相对高效的方式根据新的状态构建 React 元素树并且着手重新渲染整个UI界面。")]),s._v(" "),t("p",[s._v("在 React 得到元素树之后，React 会自动计算出新的树与老树的节点差异，然后根据差异对界面进行最小化重渲染。在差异计算算法中，React 能够相对精确地知道哪些位置发生了改变以及应该如何改变，这就保证了按需更新，而不是全部重新渲染。")]),s._v(" "),t("p",[s._v("如果在短时间内频繁setState。React会将state的改变压入栈中，在合适的时机，批量更新state和视图，达到提高性能的效果。")]),s._v(" "),t("p",[t("strong",[s._v("（2）setState 是同步还是异步的")])]),s._v(" "),t("p",[s._v("假如所有setState是同步的，意味着每执行一次setState时（有可能一个同步代码中，多次setState），都重新vnode diff + dom修改，这对性能来说是极为不好的。如果是异步，则可以把一个同步代码中的多个setState合并成一次组件更新。所以默认是异步的，但是在一些情况下是同步的。")]),s._v(" "),t("p",[s._v("setState 并不是单纯同步/异步的，它的表现会因调用场景的不同而不同。在源码中，通过 isBatchingUpdates 来判断setState 是先存进 state 队列还是直接更新，如果值为 true 则执行异步操作，为 false 则直接更新。")]),s._v(" "),t("ul",[t("li",[s._v("**异步：**在 React 可以控制的地方，就为 true，比如在 React 生命周期事件和合成事件中，都会走合并操作，延迟更新的策略。")]),s._v(" "),t("li",[s._v("**同步：**在 React 无法控制的地方，比如原生事件，具体就是在 addEventListener 、setTimeout、setInterval 等事件中，就只能同步更新。")])]),s._v(" "),t("p",[s._v("一般认为，做异步设计是为了性能优化、减少渲染次数：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("setState")]),s._v("设计为异步，可以显著的提升性能。如果每次调用 "),t("code",[s._v("setState")]),s._v("都进行一次更新，那么意味着"),t("code",[s._v("render")]),s._v("函数会被频繁调用，界面重新渲染，这样效率是很低的；最好的办法应该是获取到多个更新，之后进行批量更新；")]),s._v(" "),t("li",[s._v("如果同步更新了"),t("code",[s._v("state")]),s._v("，但是还没有执行"),t("code",[s._v("render")]),s._v("函数，那么"),t("code",[s._v("state")]),s._v("和"),t("code",[s._v("props")]),s._v("不能保持同步。"),t("code",[s._v("state")]),s._v("和"),t("code",[s._v("props")]),s._v("不能保持一致性，会在开发中产生很多的问题；")])]),s._v(" "),t("h3",{attrs:{id:"_3-react中的setstate批量更新的过程是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-react中的setstate批量更新的过程是什么"}},[s._v("#")]),s._v(" 3. React中的setState批量更新的过程是什么？")]),s._v(" "),t("p",[s._v("调用 "),t("code",[s._v("setState")]),s._v(" 时，组件的 "),t("code",[s._v("state")]),s._v(" 并不会立即改变， "),t("code",[s._v("setState")]),s._v(" 只是把要修改的 "),t("code",[s._v("state")]),s._v(" 放入一个队列， "),t("code",[s._v("React")]),s._v(" 会优化真正的执行时机，并出于性能原因，会将 "),t("code",[s._v("React")]),s._v(" 事件处理程序中的多次"),t("code",[s._v("React")]),s._v(" 事件处理程序中的多次 "),t("code",[s._v("setState")]),s._v(" 的状态修改合并成一次状态修改。 最终更新只产生一次组件及其子组件的重新渲染，这对于大型应用程序中的性能提升至关重要。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("this.setState({\n  count: this.state.count + 1    ===>    入队，[count+1的任务]\n});\nthis.setState({\n  count: this.state.count + 1    ===>    入队，[count+1的任务，count+1的任务]\n});\n                                          ↓\n                                         合并 state，[count+1的任务]\n                                          ↓\n                                         执行 count+1的任务\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("需要注意的是，只要同步代码还在执行，“攒起来”这个动作就不会停止。（注：这里之所以多次 +1 最终只有一次生效，是因为在同一个方法中多次 setState 的合并动作不是单纯地将更新累加。比如这里对于相同属性的设置，React 只会为其保留最后一次的更新）。")]),s._v(" "),t("h3",{attrs:{id:"_4-react中有使用过getdefaultprops吗-它有什么作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-react中有使用过getdefaultprops吗-它有什么作用"}},[s._v("#")]),s._v(" 4.  React中有使用过getDefaultProps吗？它有什么作用？")]),s._v(" "),t("p",[s._v("通过实现组件的getDefaultProps，对属性设置默认值（ES5的写法）：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('var ShowTitle = React.createClass({\n  getDefaultProps:function(){\n    return{\n      title : "React"\n    }\n  },\n  render : function(){\n    return <h1>{this.props.title}</h1>\n  }\n});\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("h3",{attrs:{id:"_5-react中setstate的第二个参数作用是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-react中setstate的第二个参数作用是什么"}},[s._v("#")]),s._v(" 5. React中setState的第二个参数作用是什么？")]),s._v(" "),t("p",[t("code",[s._v("setState")]),s._v(" 的第二个参数是一个可选的回调函数。这个回调函数将在组件重新渲染后执行。等价于在 "),t("code",[s._v("componentDidUpdate")]),s._v(" 生命周期内执行。通常建议使用 "),t("code",[s._v("componentDidUpdate")]),s._v(" 来代替此方式。在这个回调函数中你可以拿到更新后 "),t("code",[s._v("state")]),s._v(" 的值：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("this.setState({\n    key1: newState1,\n    key2: newState2,\n    ...\n}, callback) // 第二个参数是 state 更新完成后的回调函数\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h3",{attrs:{id:"_6-react中的setstate和replacestate的区别是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-react中的setstate和replacestate的区别是什么"}},[s._v("#")]),s._v(" 6. React中的setState和replaceState的区别是什么？")]),s._v(" "),t("p",[s._v("**（1）**"),t("strong",[s._v("setState()")])]),s._v(" "),t("p",[s._v("setState()用于设置状态对象，其语法如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("setState(object nextState[, function callback])\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("nextState，将要设置的新状态，该状态会和当前的state合并")]),s._v(" "),t("li",[s._v("callback，可选参数，回调函数。该函数会在setState设置成功，且组件重新渲染后调用。")])]),s._v(" "),t("p",[s._v("合并nextState和当前state，并重新渲染组件。setState是React事件处理函数中和请求回调函数中触发UI更新的主要方法。")]),s._v(" "),t("p",[s._v("**（2）**"),t("strong",[s._v("replaceState()")])]),s._v(" "),t("p",[s._v("replaceState()方法与setState()类似，但是方法只会保留nextState中状态，原state不在nextState中的状态都会被删除。其语法如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("replaceState(object nextState[, function callback])\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("nextState，将要设置的新状态，该状态会替换当前的state。")]),s._v(" "),t("li",[s._v("callback，可选参数，回调函数。该函数会在replaceState设置成功，且组件重新渲染后调用。")])]),s._v(" "),t("p",[s._v("**总结：**setState 是修改其中的部分状态，相当于 Object.assign，只是覆盖，不会减少原来的状态。而replaceState 是完全替换原来的状态，相当于赋值，将原来的 state 替换为另一个对象，如果新状态属性减少，那么 state 中就没有这个状态了。")]),s._v(" "),t("h3",{attrs:{id:"_7-在react中组件的this-state和setstate有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-在react中组件的this-state和setstate有什么区别"}},[s._v("#")]),s._v(" 7. 在React中组件的this.state和setState有什么区别？")]),s._v(" "),t("p",[s._v("this.state通常是用来初始化state的，this.setState是用来修改state值的。如果初始化了state之后再使用this.state，之前的state会被覆盖掉，如果使用this.setState，只会替换掉相应的state值。所以，如果想要修改state的值，就需要使用setState，而不能直接修改state，直接修改state之后页面是不会更新的。")]),s._v(" "),t("h3",{attrs:{id:"_8-state-是怎么注入到组件的-从-reducer-到组件经历了什么样的过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-state-是怎么注入到组件的-从-reducer-到组件经历了什么样的过程"}},[s._v("#")]),s._v(" 8. state 是怎么注入到组件的，从 reducer 到组件经历了什么样的过程")]),s._v(" "),t("p",[s._v("通过connect和mapStateToProps将state注入到组件中：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("import { connect } from 'react-redux'\nimport { setVisibilityFilter } from '@/reducers/Todo/actions'\nimport Link from '@/containers/Todo/components/Link'\n\nconst mapStateToProps = (state, ownProps) => ({\n    active: ownProps.filter === state.visibilityFilter\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    setFilter: () => {\n        dispatch(setVisibilityFilter(ownProps.filter))\n    }\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Link)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("p",[s._v("上面代码中，active就是注入到Link组件中的状态。 mapStateToProps（state，ownProps）中带有两个参数，含义是∶")]),s._v(" "),t("ul",[t("li",[s._v("state-store管理的全局状态对象，所有都组件状态数据都存储在该对象中。")]),s._v(" "),t("li",[s._v("ownProps 组件通过props传入的参数。")])]),s._v(" "),t("p",[t("strong",[s._v("reducer 到组件经历的过程：")])]),s._v(" "),t("ul",[t("li",[s._v("reducer对action对象处理，更新组件状态，并将新的状态值返回store。")]),s._v(" "),t("li",[s._v("通过connect（mapStateToProps，mapDispatchToProps）（Component）对组件 Component进行升级，此时将状态值从store取出并作为props参数传递到组件。")])]),s._v(" "),t("p",[t("strong",[s._v("高阶组件实现源码∶")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("import React from 'react'\nimport PropTypes from 'prop-types'\n\n// 高阶组件 contect \nexport const connect = (mapStateToProps, mapDispatchToProps) => (WrappedComponent) => {\n    class Connect extends React.Component {\n        // 通过对context调用获取store\n        static contextTypes = {\n            store: PropTypes.object\n        }\n\n        constructor() {\n            super()\n            this.state = {\n                allProps: {}\n            }\n        }\n\n        // 第一遍需初始化所有组件初始状态\n        componentWillMount() {\n            const store = this.context.store\n            this._updateProps()\n            store.subscribe(() => this._updateProps()); // 加入_updateProps()至store里的监听事件列表\n        }\n\n        // 执行action后更新props，使组件可以更新至最新状态（类似于setState）\n        _updateProps() {\n            const store = this.context.store;\n            let stateProps = mapStateToProps ?\n                mapStateToProps(store.getState(), this.props) : {} // 防止 mapStateToProps 没有传入\n            let dispatchProps = mapDispatchToProps ?\n                mapDispatchToProps(store.dispatch, this.props) : {\n                                    dispatch: store.dispatch\n                                } // 防止 mapDispatchToProps 没有传入\n            this.setState({\n                allProps: {\n                    ...stateProps,\n                    ...dispatchProps,\n                    ...this.props\n                }\n            })\n        }\n\n        render() {\n            return <WrappedComponent {...this.state.allProps} />\n        }\n    }\n    return Connect\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br")])]),t("h3",{attrs:{id:"_9-react组件的state和props有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-react组件的state和props有什么区别"}},[s._v("#")]),s._v(" 9. React组件的state和props有什么区别？")]),s._v(" "),t("p",[t("strong",[s._v("（1）props")])]),s._v(" "),t("p",[s._v("props是一个从外部传进组件的参数，主要作为就是从父组件向子组件传递数据，它具有可读性和不变性，只能通过外部组件主动传入新的props来重新渲染子组件，否则子组件的props以及展现形式不会改变。")]),s._v(" "),t("p",[t("strong",[s._v("（2）state")])]),s._v(" "),t("p",[s._v("state的主要作用是用于组件保存、控制以及修改自己的状态，它只能在constructor中初始化，它算是组件的私有属性，不可通过外部访问和修改，只能通过组件内部的this.setState来修改，修改state属性会导致组件的重新渲染。")]),s._v(" "),t("p",[t("strong",[s._v("（3）区别")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("props 是传递给组件的（类似于函数的形参），而state 是在组件内被组件自己管理的（类似于在一个函数内声明的变量）。")])]),s._v(" "),t("li",[t("p",[s._v("props 是不可修改的，所有 React 组件都必须像纯函数一样保护它们的 props 不被更改。")])]),s._v(" "),t("li",[t("p",[s._v("state 是在组件中创建的，一般在 constructor中初始化 state。state 是多变的、可以修改，每次setState都异步更新的。")])])]),s._v(" "),t("h3",{attrs:{id:"_10-react中的props为什么是只读的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-react中的props为什么是只读的"}},[s._v("#")]),s._v(" 10. React中的props为什么是只读的？")]),s._v(" "),t("p",[t("code",[s._v("this.props")]),s._v("是组件之间沟通的一个接口，原则上来讲，它只能从父组件流向子组件。React具有浓重的函数式编程的思想。")]),s._v(" "),t("p",[s._v("提到函数式编程就要提一个概念：纯函数。它有几个特点：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("给定相同的输入，总是返回相同的输出。")])]),s._v(" "),t("li",[t("p",[s._v("过程没有副作用。")])]),s._v(" "),t("li",[t("p",[s._v("不依赖外部状态。")])])]),s._v(" "),t("p",[t("code",[s._v("this.props")]),s._v("就是汲取了纯函数的思想。props的不可以变性就保证的相同的输入，页面显示的内容是一样的，并且不会产生副作用")]),s._v(" "),t("h3",{attrs:{id:"_11-在react中组件的props改变时更新组件的有哪些方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-在react中组件的props改变时更新组件的有哪些方法"}},[s._v("#")]),s._v(" 11. 在React中组件的props改变时更新组件的有哪些方法？")]),s._v(" "),t("p",[s._v("在一个组件传入的props更新时重新渲染该组件常用的方法是在"),t("code",[s._v("componentWillReceiveProps")]),s._v("中将新的props更新到组件的state中（这种state被成为派生状态（Derived State）），从而实现重新渲染。React 16.3中还引入了一个新的钩子函数"),t("code",[s._v("getDerivedStateFromProps")]),s._v("来专门实现这一需求。")]),s._v(" "),t("p",[s._v("**（1）**"),t("strong",[s._v("componentWillReceiveProps（已废弃）")])]),s._v(" "),t("p",[s._v("在react的componentWillReceiveProps(nextProps)生命周期中，可以在子组件的render函数执行前，通过this.props获取旧的属性，通过nextProps获取新的props，对比两次props是否相同，从而更新子组件自己的state。")]),s._v(" "),t("p",[s._v("这样的好处是，可以将数据请求放在这里进行执行，需要传的参数则从componentWillReceiveProps(nextProps)中获取。而不必将所有的请求都放在父组件中。于是该请求只会在该组件渲染时才会发出，从而减轻请求负担。")]),s._v(" "),t("p",[s._v("**（2）**"),t("strong",[s._v("getDerivedStateFromProps（16.3引入）")])]),s._v(" "),t("p",[s._v("这个生命周期函数是为了替代"),t("code",[s._v("componentWillReceiveProps")]),s._v("存在的，所以在需要使用"),t("code",[s._v("componentWillReceiveProps")]),s._v("时，就可以考虑使用"),t("code",[s._v("getDerivedStateFromProps")]),s._v("来进行替代。")]),s._v(" "),t("p",[s._v("两者的参数是不相同的，而"),t("code",[s._v("getDerivedStateFromProps")]),s._v("是一个静态函数，也就是这个函数不能通过this访问到class的属性，也并不推荐直接访问属性。而是应该通过参数提供的nextProps以及prevState来进行判断，根据新传入的props来映射到state。")]),s._v(" "),t("p",[s._v("需要注意的是，"),t("strong",[s._v("如果props传入的内容不需要影响到你的state，那么就需要返回一个null")]),s._v("，这个返回值是必须的，所以尽量将其写到函数的末尾：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("static getDerivedStateFromProps(nextProps, prevState) {\n    const {type} = nextProps;\n    // 当传入的type发生变化的时候，更新state\n    if (type !== prevState.type) {\n        return {\n            type,\n        };\n    }\n    // 否则，对于state不进行任何操作\n    return null;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("h3",{attrs:{id:"_12-react中怎么检验props-验证props的目的是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-react中怎么检验props-验证props的目的是什么"}},[s._v("#")]),s._v(" 12. React中怎么检验props？验证props的目的是什么？")]),s._v(" "),t("p",[t("strong",[s._v("React")]),s._v("为我们提供了"),t("strong",[s._v("PropTypes")]),s._v("以供验证使用。当我们向"),t("strong",[s._v("Props")]),s._v("传入的数据无效（向Props传入的数据类型和验证的数据类型不符）就会在控制台发出警告信息。它可以避免随着应用越来越复杂从而出现的问题。并且，它还可以让程序变得更易读。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("import PropTypes from 'prop-types';\n\nclass Greeting extends React.Component {\n  render() {\n    return (\n      <h1>Hello, {this.props.name}</h1>\n    );\n  }\n}\n\nGreeting.propTypes = {\n  name: PropTypes.string\n};\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[s._v("当然，如果项目汇中使用了TypeScript，那么就可以不用PropTypes来校验，而使用TypeScript定义接口来校验props。")]),s._v(" "),t("h2",{attrs:{id:"三、生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、生命周期"}},[s._v("#")]),s._v(" 三、生命周期")]),s._v(" "),t("h3",{attrs:{id:"_1-react的生命周期有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-react的生命周期有哪些"}},[s._v("#")]),s._v(" 1. React的生命周期有哪些？")]),s._v(" "),t("p",[s._v("React 通常将组件生命周期分为三个阶段：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("装载阶段（Mount），组件第一次在DOM树中被渲染的过程；")])]),s._v(" "),t("li",[t("p",[s._v("更新过程（Update），组件状态发生变化，重新更新渲染的过程；")])]),s._v(" "),t("li",[t("p",[s._v("卸载过程（Unmount），组件从DOM树中被移除的过程；")])])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/1500604/1611914193870-a5a93315-a094-40aa-959a-e3e3c58c8a96.png",alt:"img"}})]),s._v(" "),t("h4",{attrs:{id:"_1-组件挂载阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-组件挂载阶段"}},[s._v("#")]),s._v(" 1）组件挂载阶段")]),s._v(" "),t("p",[s._v("挂载阶段组件被创建，然后组件实例插入到 DOM 中，完成组件的第一次渲染，该过程只会发生一次，在此阶段会依次调用以下这些方法：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("constructor")])]),s._v(" "),t("li",[t("p",[s._v("getDerivedStateFromProps")])]),s._v(" "),t("li",[t("p",[s._v("render")])]),s._v(" "),t("li",[t("p",[s._v("componentDidMount")])])]),s._v(" "),t("h5",{attrs:{id:"_1-constructor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-constructor"}},[s._v("#")]),s._v(" （1）constructor")]),s._v(" "),t("p",[s._v("组件的构造函数，第一个被执行，若没有显式定义它，会有一个默认的构造函数，但是若显式定义了构造函数，我们必须在构造函数中执行 "),t("code",[s._v("super(props)")]),s._v("，否则无法在构造函数中拿到this。")]),s._v(" "),t("p",[s._v("如果不初始化 state 或不进行方法绑定，则不需要为 React 组件实现构造函数"),t("strong",[s._v("Constructor")]),s._v("。")]),s._v(" "),t("p",[s._v("constructor中通常只做两件事：")]),s._v(" "),t("ul",[t("li",[s._v("初始化组件的 state")]),s._v(" "),t("li",[s._v("给事件处理方法绑定 this")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("constructor(props) {\n  super(props);\n  // 不要在构造函数中调用 setState，可以直接给 state 设置初始值\n  this.state = { counter: 0 }\n  this.handleClick = this.handleClick.bind(this)\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h5",{attrs:{id:"_2-getderivedstatefromprops"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-getderivedstatefromprops"}},[s._v("#")]),s._v(" （2）getDerivedStateFromProps")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("static getDerivedStateFromProps(props, state)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这是个静态方法，所以不能在这个函数里使用 "),t("code",[s._v("this")]),s._v("，有两个参数 "),t("code",[s._v("props")]),s._v(" 和 "),t("code",[s._v("state")]),s._v("，分别指接收到的新参数和当前组件的 "),t("code",[s._v("state")]),s._v(" 对象，这个函数会返回一个对象用来更新当前的 "),t("code",[s._v("state")]),s._v(" 对象，如果不需要更新可以返回 "),t("code",[s._v("null")]),s._v("。")]),s._v(" "),t("p",[s._v("该函数会在装载时，接收到新的 "),t("code",[s._v("props")]),s._v(" 或者调用了 "),t("code",[s._v("setState")]),s._v(" 和 "),t("code",[s._v("forceUpdate")]),s._v(" 时被调用。如当接收到新的属性想修改 "),t("code",[s._v("state")]),s._v(" ，就可以使用。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// 当 props.counter 变化时，赋值给 state \nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      counter: 0\n    }\n  }\n  static getDerivedStateFromProps(props, state) {\n    if (props.counter !== state.counter) {\n      return {\n        counter: props.counter\n      }\n    }\n    return null\n  }\n  \n  handleClick = () => {\n    this.setState({\n      counter: this.state.counter + 1\n    })\n  }\n  render() {\n    return (\n      <div>\n        <h1 onClick={this.handleClick}>Hello, world!{this.state.counter}</h1>\n      </div>\n    )\n  }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br")])]),t("p",[s._v("现在可以显式传入 "),t("code",[s._v("counter")]),s._v(" ，但是这里有个问题，如果想要通过点击实现 "),t("code",[s._v("state.counter")]),s._v(" 的增加，但这时会发现值不会发生任何变化，一直保持 "),t("code",[s._v("props")]),s._v(" 传进来的值。这是由于在 React 16.4^ 的版本中 "),t("code",[s._v("setState")]),s._v(" 和 "),t("code",[s._v("forceUpdate")]),s._v(" 也会触发这个生命周期，所以当组件内部 "),t("code",[s._v("state")]),s._v(" 变化后，就会重新走这个方法，同时会把 "),t("code",[s._v("state")]),s._v(" 值赋值为 "),t("code",[s._v("props")]),s._v(" 的值。因此需要多加一个字段来记录之前的 "),t("code",[s._v("props")]),s._v(" 值，这样就会解决上述问题。具体如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// 这里只列出需要变化的地方\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      // 增加一个 preCounter 来记录之前的 props 传来的值\n      preCounter: 0,\n      counter: 0\n    }\n  }\n  static getDerivedStateFromProps(props, state) {\n    // 跟 state.preCounter 进行比较\n    if (props.counter !== state.preCounter) {\n      return {\n        counter: props.counter,\n        preCounter: props.counter\n      }\n    }\n    return null\n  }\n  handleClick = () => {\n    this.setState({\n      counter: this.state.counter + 1\n    })\n  }\n  render() {\n    return (\n      <div>\n        <h1 onClick={this.handleClick}>Hello, world!{this.state.counter}</h1>\n      </div>\n    )\n  }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br")])]),t("h5",{attrs:{id:"_3-render"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-render"}},[s._v("#")]),s._v(" （3）render")]),s._v(" "),t("p",[s._v("render是React 中最核心的方法，一个组件中必须要有这个方法，它会根据状态 "),t("code",[s._v("state")]),s._v(" 和属性 "),t("code",[s._v("props")]),s._v(" 渲染组件。这个函数只做一件事，就是返回需要渲染的内容，所以不要在这个函数内做其他业务逻辑，通常调用该方法会返回以下类型中一个：")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("React 元素")]),s._v("：这里包括原生的 DOM 以及 React 组件；")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("数组和 Fragment（片段）")]),s._v("：可以返回多个元素；")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("Portals（插槽）")]),s._v("：可以将子元素渲染到不同的 DOM 子树种；")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("字符串和数字")]),s._v("：被渲染成 DOM 中的 text 节点；")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("布尔值或 null")]),s._v("：不渲染任何内容。")])])]),s._v(" "),t("h5",{attrs:{id:"_4-componentdidmount"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-componentdidmount"}},[s._v("#")]),s._v(" （4）componentDidMount()")]),s._v(" "),t("p",[s._v("componentDidMount()会在组件挂载后（插入 DOM 树中）立即调。该阶段通常进行以下操作：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("执行依赖于DOM的操作；")])]),s._v(" "),t("li",[t("p",[s._v("发送网络请求；（官方建议）")])]),s._v(" "),t("li",[t("p",[s._v("添加订阅消息（会在componentWillUnmount取消订阅）；")])])]),s._v(" "),t("p",[s._v("如果在 "),t("code",[s._v("componentDidMount")]),s._v(" 中调用 "),t("code",[s._v("setState")]),s._v(" ，就会触发一次额外的渲染，多调用了一次 "),t("code",[s._v("render")]),s._v(" 函数，由于它是在浏览器刷新屏幕前执行的，所以用户对此是没有感知的，但是我应当避免这样使用，这样会带来一定的性能问题，尽量是在 "),t("code",[s._v("constructor")]),s._v(" 中初始化 "),t("code",[s._v("state")]),s._v(" 对象。")]),s._v(" "),t("p",[s._v("在组件装载之后，将计数数字变为1：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('class App extends React.Component  {\n  constructor(props) {\n    super(props)\n    this.state = {\n      counter: 0\n    }\n  }\n  componentDidMount () {\n    this.setState({\n      counter: 1\n    })\n  }\n  render ()  {\n    return (\n      <div className="counter">\n        counter值: { this.state.counter }\n      </div>\n    )\n  }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])]),t("h4",{attrs:{id:"_2-组件更新阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-组件更新阶段"}},[s._v("#")]),s._v(" 2）组件更新阶段")]),s._v(" "),t("p",[s._v("当组件的 "),t("code",[s._v("props")]),s._v(" 改变了，或组件内部调用了 "),t("code",[s._v("setState/forceUpdate")]),s._v("，会触发更新重新渲染，这个过程可能会发生多次。这个阶段会依次调用下面这些方法：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("getDerivedStateFromProps")])]),s._v(" "),t("li",[t("p",[s._v("shouldComponentUpdate")])]),s._v(" "),t("li",[t("p",[s._v("render")])]),s._v(" "),t("li",[t("p",[s._v("getSnapshotBeforeUpdate")])]),s._v(" "),t("li",[t("p",[s._v("componentDidUpdate")])])]),s._v(" "),t("h5",{attrs:{id:"_1-shouldcomponentupdate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-shouldcomponentupdate"}},[s._v("#")]),s._v(" （1）shouldComponentUpdate")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("shouldComponentUpdate(nextProps, nextState)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("在说这个生命周期函数之前，来看两个问题：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("setState 函数在任何情况下都会导致组件重新渲染吗？例如下面这种情况：")])])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("this.setState({number: this.state.number})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[t("strong",[s._v("如果没有调用 setState，props 值也没有变化，是不是组件就不会重新渲染？")])])]),s._v(" "),t("p",[s._v("第一个问题答案是 "),t("strong",[s._v("会")]),s._v(" ，第二个问题如果是父组件重新渲染时，不管传入的 props 有没有变化，都会引起子组件的重新渲染。")]),s._v(" "),t("p",[s._v("那么有没有什么方法解决在这两个场景下不让组件重新渲染进而提升性能呢？这个时候 "),t("code",[s._v("shouldComponentUpdate")]),s._v(" 登场了，这个生命周期函数是用来提升速度的，它是在重新渲染组件开始前触发的，默认返回 "),t("code",[s._v("true")]),s._v("，可以比较 "),t("code",[s._v("this.props")]),s._v(" 和 "),t("code",[s._v("nextProps")]),s._v(" ，"),t("code",[s._v("this.state")]),s._v(" 和 "),t("code",[s._v("nextState")]),s._v(" 值是否变化，来确认返回 true 或者 "),t("code",[s._v("false")]),s._v("。当返回 "),t("code",[s._v("false")]),s._v(" 时，组件的更新过程停止，后续的 "),t("code",[s._v("render")]),s._v("、"),t("code",[s._v("componentDidUpdate")]),s._v(" 也不会被调用。")]),s._v(" "),t("p",[s._v("**注意：**添加 "),t("code",[s._v("shouldComponentUpdate")]),s._v(" 方法时，不建议使用深度相等检查（如使用 "),t("code",[s._v("JSON.stringify()")]),s._v("），因为深比较效率很低，可能会比重新渲染组件效率还低。而且该方法维护比较困难，建议使用该方法会产生明显的性能提升时使用。")]),s._v(" "),t("h5",{attrs:{id:"_2-getsnapshotbeforeupdate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-getsnapshotbeforeupdate"}},[s._v("#")]),s._v(" （2）getSnapshotBeforeUpdate")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("getSnapshotBeforeUpdate(prevProps, prevState)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这个方法在 "),t("code",[s._v("render")]),s._v(" 之后，"),t("code",[s._v("componentDidUpdate")]),s._v(" 之前调用，有两个参数 "),t("code",[s._v("prevProps")]),s._v(" 和 "),t("code",[s._v("prevState")]),s._v("，表示更新之前的 "),t("code",[s._v("props")]),s._v(" 和 "),t("code",[s._v("state")]),s._v("，这个函数必须要和 "),t("code",[s._v("componentDidUpdate")]),s._v(" 一起使用，并且要有一个返回值，默认是 "),t("code",[s._v("null")]),s._v("，这个返回值作为第三个参数传给 "),t("code",[s._v("componentDidUpdate")]),s._v("。")]),s._v(" "),t("h5",{attrs:{id:"_3-componentdidupdate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-componentdidupdate"}},[s._v("#")]),s._v(" （3）componentDidUpdate")]),s._v(" "),t("p",[s._v("componentDidUpdate() 会在更新后会被立即调用，首次渲染不会执行此方法。 该阶段通常进行以下操作：")]),s._v(" "),t("ul",[t("li",[s._v("当组件更新后，对 DOM 进行操作；")]),s._v(" "),t("li",[s._v("如果你对更新前后的 props 进行了比较，也可以选择在此处进行网络请求；（例如，当 props 未发生变化时，则不会执行网络请求）。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("componentDidUpdate(prevProps, prevState, snapshot){}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("该方法有三个参数：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("prevProps: 更新前的props")])]),s._v(" "),t("li",[t("p",[s._v("prevState: 更新前的state")])]),s._v(" "),t("li",[t("p",[s._v("snapshot: getSnapshotBeforeUpdate()生命周期的返回值")])])]),s._v(" "),t("h4",{attrs:{id:"_3-组件卸载阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-组件卸载阶段"}},[s._v("#")]),s._v(" 3）组件卸载阶段")]),s._v(" "),t("p",[s._v("卸载阶段只有一个生命周期函数，componentWillUnmount() 会在组件卸载及销毁之前直接调用。在此方法中执行必要的清理操作：")]),s._v(" "),t("ul",[t("li",[s._v("清除 timer，取消网络请求或清除")]),s._v(" "),t("li",[s._v("取消在 componentDidMount() 中创建的订阅等；")])]),s._v(" "),t("p",[s._v("这个生命周期在一个组件被卸载和销毁之前被调用，因此你不应该再这个方法中使用 "),t("code",[s._v("setState")]),s._v("，因为组件一旦被卸载，就不会再装载，也就不会重新渲染。")]),s._v(" "),t("h4",{attrs:{id:"_4-错误处理阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-错误处理阶段"}},[s._v("#")]),s._v(" 4）错误处理阶段")]),s._v(" "),t("p",[s._v("componentDidCatch(error, info)，此生命周期在后代组件抛出错误后被调用。 它接收两个参数∶")]),s._v(" "),t("ul",[t("li",[s._v("error：抛出的错误。")]),s._v(" "),t("li",[s._v("info：带有 componentStack key 的对象，其中包含有关组件引发错误的栈信息")])]),s._v(" "),t("p",[s._v("React常见的生命周期如下：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1500604/1606974748814-56e52599-8cda-4305-8135-eaf64d75fbb9.png",alt:"img"}})]),s._v(" "),t("p",[t("strong",[s._v("React常见生命周期的过程大致如下：")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("挂载阶段，首先执行constructor构造方法，来创建组件")])]),s._v(" "),t("li",[t("p",[s._v("创建完成之后，就会执行render方法，该方法会返回需要渲染的内容")])]),s._v(" "),t("li",[t("p",[s._v("随后，React会将需要渲染的内容挂载到DOM树上")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("挂载完成之后就会执行****componentDidMount生命周期函数")])])]),s._v(" "),t("li",[t("p",[s._v("如果我们给组件创建一个props（用于组件通信）、调用setState（更改state中的数据）、调用forceUpdate（强制更新组件）时，都会重新调用render函数")])]),s._v(" "),t("li",[t("p",[s._v("render函数重新执行之后，就会重新进行DOM树的挂载")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("挂载完成之后就会执行****componentDidUpdate生命周期函数")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("当移除组件时，就会执行****componentWillUnmount生命周期函数")])])])]),s._v(" "),t("p",[t("strong",[s._v("React主要生命周期总结：")])]),s._v(" "),t("ol",[t("li",[t("p",[t("strong",[s._v("getDefaultProps")]),s._v("：这个函数会在组件创建之前被调用一次（有且仅有一次），它被用来初始化组件的 Props；")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("getInitialState")]),s._v("：用于初始化组件的 state 值；")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("componentWillMount")]),s._v("：在组件创建后、render 之前，会走到 componentWillMount 阶段。这个阶段我个人一直没用过、非常鸡肋。后来React 官方已经不推荐大家在 componentWillMount 里做任何事情、到现在 "),t("strong",[s._v("React16 直接废弃了这个生命周期")]),s._v("，足见其鸡肋程度了；")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("render")]),s._v("：这是所有生命周期中唯一一个你必须要实现的方法。一般来说需要返回一个 jsx 元素，这时 React 会根据 props 和 state 来把组件渲染到界面上；不过有时，你可能不想渲染任何东西，这种情况下让它返回 null 或者 false 即可；")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("componentDidMount")]),s._v("：会在组件挂载后（插入 DOM 树中后）立即调用，标志着组件挂载完成。一些操作如果依赖获取到 DOM 节点信息，我们就会放在这个阶段来做。此外，这还是 React 官方推荐的发起 ajax 请求的时机。该方法和 componentWillMount 一样，有且仅有一次调用。")])])]),s._v(" "),t("h3",{attrs:{id:"_2-react-废弃了哪些生命周期-为什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-react-废弃了哪些生命周期-为什么"}},[s._v("#")]),s._v(" 2. React 废弃了哪些生命周期？为什么？")]),s._v(" "),t("p",[s._v("被废弃的三个函数都是在render之前，因为fber的出现，很可能因为高优先级任务的出现而打断现有任务导致它们会被执行多次。另外的一个原因则是，React想约束使用者，好的框架能够让人不得已写出容易维护和扩展的代码，这一点又是从何谈起，可以从新增加以及即将废弃的生命周期分析入手")]),s._v(" "),t("p",[t("strong",[s._v("1) componentWillMount")])]),s._v(" "),t("p",[s._v("首先这个函数的功能完全可以使用componentDidMount和 constructor来代替，异步获取的数据的情况上面已经说明了，而如果抛去异步获取数据，其余的即是初始化而已，这些功能都可以在constructor中执行，除此之外，如果在 willMount 中订阅事件，但在服务端这并不会执行 willUnMount事件，也就是说服务端会导致内存泄漏所以componentWilIMount完全可以不使用，但使用者有时候难免因为各 种各样的情况在 componentWilMount中做一些操作，那么React为了约束开发者，干脆就抛掉了这个API")]),s._v(" "),t("p",[t("strong",[s._v("2) componentWillReceiveProps")])]),s._v(" "),t("p",[s._v("在老版本的 React 中，如果组件自身的某个 state 跟其 props 密切相关的话，一直都没有一种很优雅的处理方式去更新 state，而是需要在 componentWilReceiveProps 中判断前后两个 props 是否相同，如果不同再将新的 props更新到相应的 state 上去。这样做一来会破坏 state 数据的单一数据源，导致组件状态变得不可预测，另一方面也会增加组件的重绘次数。类似的业务需求也有很多，如一个可以横向滑动的列表，当前高亮的 Tab 显然隶属于列表自身的时，根据传入的某个值，直接定位到某个 Tab。为了解决这些问题，React引入了第一个新的生命周期：getDerivedStateFromProps。它有以下的优点∶")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("getDSFP是静态方法，在这里不能使用this，也就是一个纯函数，开发者不能写出副作用的代码")])]),s._v(" "),t("li",[t("p",[s._v("开发者只能通过prevState而不是prevProps来做对比，保证了state和props之间的简单关系以及不需要处理第一次渲染时prevProps为空的情况")])]),s._v(" "),t("li",[t("p",[s._v("基于第一点，将状态变化（setState）和昂贵操作（tabChange）区分开，更加便于 render 和 commit 阶段操作或者说优化。")])])]),s._v(" "),t("p",[t("strong",[s._v("3) componentWillUpdate")])]),s._v(" "),t("p",[s._v("与 componentWillReceiveProps 类似，许多开发者也会在 componentWillUpdate 中根据 props 的变化去触发一些回调 。 但不论是 componentWilReceiveProps 还 是 componentWilUpdate，都有可能在一次更新中被调用多次，也就是说写在这里的回调函数也有可能会被调用多次，这显然是不可取的。与 componentDidMount 类 似， componentDidUpdate 也不存在这样的问题，一次更新中 componentDidUpdate 只会被调用一次，所以将原先写在 componentWillUpdate 中 的 回 调 迁 移 至 componentDidUpdate 就可以解决这个问题。")]),s._v(" "),t("p",[s._v("另外一种情况则是需要获取DOM元素状态，但是由于在fber中，render可打断，可能在wilMount中获取到的元素状态很可能与实际需要的不同，这个通常可以使用第二个新增的生命函数的解决 getSnapshotBeforeUpdate(prevProps, prevState)")]),s._v(" "),t("p",[t("strong",[s._v("4) getSnapshotBeforeUpdate(prevProps, prevState)")])]),s._v(" "),t("p",[s._v("返回的值作为componentDidUpdate的第三个参数。与willMount不同的是，getSnapshotBeforeUpdate会在最终确定的render执行之前执行，也就是能保证其获取到的元素状态与didUpdate中获取到的元素状态相同。官方参考代码：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("class ScrollingList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.listRef = React.createRef();\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    // 我们是否在 list 中添加新的 items ？\n    // 捕获滚动位置以便我们稍后调整滚动位置。\n    if (prevProps.list.length < this.props.list.length) {\n      const list = this.listRef.current;\n      return list.scrollHeight - list.scrollTop;\n    }\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    // 如果我们 snapshot 有值，说明我们刚刚添加了新的 items，\n    // 调整滚动位置使得这些新 items 不会将旧的 items 推出视图。\n    //（这里的 snapshot 是 getSnapshotBeforeUpdate 的返回值）\n    if (snapshot !== null) {\n      const list = this.listRef.current;\n      list.scrollTop = list.scrollHeight - snapshot;\n    }\n  }\n\n  render() {\n    return (\n      <div ref={this.listRef}>{/* ...contents... */}</div>\n    );\n  }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br")])]),t("h3",{attrs:{id:"_3-react-16-x-中-props-改变后在哪个生命周期中处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-react-16-x-中-props-改变后在哪个生命周期中处理"}},[s._v("#")]),s._v(" 3. React 16.X 中 props 改变后在哪个生命周期中处理")]),s._v(" "),t("p",[t("strong",[s._v("在getDerivedStateFromProps中进行处理。")])]),s._v(" "),t("p",[s._v("这个生命周期函数是为了替代"),t("code",[s._v("componentWillReceiveProps")]),s._v("存在的，所以在需要使用"),t("code",[s._v("componentWillReceiveProps")]),s._v("时，就可以考虑使用"),t("code",[s._v("getDerivedStateFromProps")]),s._v("来进行替代。")]),s._v(" "),t("p",[s._v("两者的参数是不相同的，而"),t("code",[s._v("getDerivedStateFromProps")]),s._v("是一个静态函数，也就是这个函数不能通过this访问到class的属性，也并不推荐直接访问属性。而是应该通过参数提供的nextProps以及prevState来进行判断，根据新传入的props来映射到state。")]),s._v(" "),t("p",[s._v("需要注意的是，"),t("strong",[s._v("如果props传入的内容不需要影响到你的state，那么就需要返回一个null")]),s._v("，这个返回值是必须的，所以尽量将其写到函数的末尾：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("static getDerivedStateFromProps(nextProps, prevState) {\n    const {type} = nextProps;\n    // 当传入的type发生变化的时候，更新state\n    if (type !== prevState.type) {\n        return {\n            type,\n        };\n    }\n    // 否则，对于state不进行任何操作\n    return null;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("h3",{attrs:{id:"_4-react-性能优化在哪个生命周期-它优化的原理是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-react-性能优化在哪个生命周期-它优化的原理是什么"}},[s._v("#")]),s._v(" 4. React 性能优化在哪个生命周期？它优化的原理是什么？")]),s._v(" "),t("p",[s._v("react的父级组件的render函数重新渲染会引起子组件的render方法的重新渲染。但是，有的时候子组件的接受父组件的数据没有变动。子组件render的执行会影响性能，这时就可以使用shouldComponentUpdate来解决这个问题。")]),s._v(" "),t("p",[s._v("使用方法如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("shouldComponentUpdate(nexrProps) {\n    if (this.props.num === nexrProps.num) {\n        return false\n    }\n    return true;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("shouldComponentUpdate提供了两个参数nextProps和nextState，表示下一次props和一次state的值，当函数返回false时候，render()方法不执行，组件也就不会渲染，返回true时，组件照常重渲染。此方法就是拿当前props中值和下一次props中的值进行对比，数据相等时，返回false，反之返回true。")]),s._v(" "),t("p",[s._v("需要注意，在进行新旧对比的时候，是**浅对比，**也就是说如果比较的数据时引用数据类型，只要数据的引用的地址没变，即使内容变了，也会被判定为true。")]),s._v(" "),t("p",[s._v("面对这个问题，可以使用如下方法进行解决：")]),s._v(" "),t("p",[s._v("（1）使用setState改变数据之前，先采用ES6中assgin进行拷贝，但是assgin只深拷贝的数据的第一层，所以说不是最完美的解决办法：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const o2 = Object.assign({},this.state.obj)\n    o2.student.count = '00000';\n    this.setState({\n        obj: o2,\n    })\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("（2）使用JSON.parse(JSON.stringfy())进行深拷贝，但是遇到数据为undefined和函数时就会错。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const o2 = JSON.parse(JSON.stringify(this.state.obj))\n    o2.student.count = '00000';\n    this.setState({\n        obj: o2,\n    })\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h3",{attrs:{id:"_5-state-和-props-触发更新的生命周期分别有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-state-和-props-触发更新的生命周期分别有什么区别"}},[s._v("#")]),s._v(" 5. state 和 props 触发更新的生命周期分别有什么区别？")]),s._v(" "),t("p",[t("strong",[s._v("state 更新流程：")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/jpeg/1500604/1616079696588-fe9625ce-a23f-42ef-ae52-247b29b5ee3c.jpeg",alt:"img"}})]),s._v(" "),t("p",[s._v("这个过程当中涉及的函数：")]),s._v(" "),t("ol",[t("li",[s._v("shouldComponentUpdate: 当组件的 state 或 props 发生改变时，都会首先触发这个生命周期函数。它会接收两个参数：nextProps, nextState——它们分别代表传入的新 props 和新的 state 值。拿到这两个值之后，我们就可以通过一些对比逻辑来决定是否有 re-render（重渲染）的必要了。如果该函数的返回值为 false，则生命周期终止，反之继续；")])]),s._v(" "),t("p",[s._v("注意：此方法仅作为"),t("strong",[s._v("性能优化的方式")]),s._v("而存在。不要企图依靠此方法来“阻止”渲染，因为这可能会产生 bug。应该"),t("strong",[s._v("考虑使用内置的 PureComponent 组件")]),s._v("，而不是手动编写 "),t("code",[s._v("shouldComponentUpdate()")])]),s._v(" "),t("ol",[t("li",[s._v("componentWillUpdate：当组件的 state 或 props 发生改变时，会在渲染之前调用 componentWillUpdate。componentWillUpdate "),t("strong",[s._v("是 React16 废弃的三个生命周期之一")]),s._v("。过去，我们可能希望能在这个阶段去收集一些必要的信息（比如更新前的 DOM 信息等等），现在我们完全可以在 React16 的 getSnapshotBeforeUpdate 中去做这些事；")]),s._v(" "),t("li",[s._v("componentDidUpdate：componentDidUpdate() 会在UI更新后会被立即调用。它接收 prevProps（上一次的 props 值）作为入参，也就是说在此处我们仍然可以进行 props 值对比（再次说明 componentWillUpdate 确实鸡肋哈）。")])]),s._v(" "),t("p",[t("strong",[s._v("props 更新流程：")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/jpeg/1500604/1616079696446-71709f4d-1b94-4405-9538-5167ed5e4f2a.jpeg",alt:"img"}})]),s._v(" "),t("p",[s._v("相对于 state 更新，props 更新后唯一的区别是增加了对 componentWillReceiveProps 的调用。关于 componentWillReceiveProps，需要知道这些事情：")]),s._v(" "),t("ul",[t("li",[s._v("componentWillReceiveProps：它在Component接受到新的 props 时被触发。componentWillReceiveProps 会接收一个名为 nextProps 的参数（对应新的 props 值）。"),t("strong",[s._v("该生命周期是 React16 废弃掉的三个生命周期之一")]),s._v("。在它被废弃前，可以用它来比较 this.props 和 nextProps 来重新setState。在 React16 中，用一个类似的新生命周期 getDerivedStateFromProps 来代替它。")])]),s._v(" "),t("h3",{attrs:{id:"_6-react中发起网络请求应该在哪个生命周期中进行-为什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-react中发起网络请求应该在哪个生命周期中进行-为什么"}},[s._v("#")]),s._v(" 6. React中发起网络请求应该在哪个生命周期中进行？为什么？")]),s._v(" "),t("p",[s._v("对于异步请求，最好放在componentDidMount中去操作，对于同步的状态改变，可以放在componentWillMount中，一般用的比较少。")]),s._v(" "),t("p",[s._v("如果认为在componentWillMount里发起请求能提早获得结果，这种想法其实是错误的，通常componentWillMount比componentDidMount早不了多少微秒，网络上任何一点延迟，这一点差异都可忽略不计。")]),s._v(" "),t("p",[s._v("**react的生命周期：**constructor() -> componentWillMount() -> render() -> componentDidMount()")]),s._v(" "),t("p",[s._v("上面这些方法的调用是有次序的，由上而下依次调用。")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("constructor被调用是在组件准备要挂载的最开始，此时组件尚未挂载到网页上。")])]),s._v(" "),t("li",[t("p",[s._v("componentWillMount方法的调用在constructor之后，在render之前，在这方法里的代码调用setState方法不会触发重新render，所以它一般不会用来作加载数据之用。")])]),s._v(" "),t("li",[t("p",[s._v("componentDidMount方法中的代码，是在组件已经完全挂载到网页上才会调用被执行，所以可以保证数据的加载。此外，在这方法中调用setState方法，会触发重新渲染。所以，官方设计这个方法就是用来加载外部数据用的，或处理其他的副作用代码。与组件上的数据无关的加载，也可以在constructor里做，但constructor是做组件state初绐化工作，并不是做加载数据这工作的，constructor里也不能setState，还有加载的时间太长或者出错，页面就无法加载出来。所以有副作用的代码都会集中在componentDidMount方法里。")])])]),s._v(" "),t("p",[s._v("总结：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("跟服务器端渲染（同构）有关系，如果在componentWillMount里面获取数据，fetch data会执行两次，一次在服务器端一次在客户端。在componentDidMount中可以解决这个问题，componentWillMount同样也会render两次。")])]),s._v(" "),t("li",[t("p",[s._v("在componentWillMount中fetch data，数据一定在render后才能到达，如果忘记了设置初始状态，用户体验不好。")])]),s._v(" "),t("li",[t("p",[s._v("react16.0以后，componentWillMount可能会被执行多次。")])])]),s._v(" "),t("h3",{attrs:{id:"_7-react-16中新生命周期有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-react-16中新生命周期有哪些"}},[s._v("#")]),s._v(" 7. React 16中新生命周期有哪些")]),s._v(" "),t("p",[s._v("关于 React16 开始应用的新生命周期：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/jpeg/1500604/1616079836302-3fdd2b2a-6d54-4a7e-92bd-86a6aa27aea6.jpeg",alt:"img"}})]),s._v(" "),t("p",[s._v("可以看出，React16 自上而下地对生命周期做了另一种维度的解读：")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("Render 阶段")]),s._v("：用于计算一些必要的状态信息。这个阶段可能会被 React 暂停，这一点和 React16 引入的 Fiber 架构（我们后面会重点讲解）是有关的；")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("Pre-commit阶段")]),s._v("：所谓“commit”，这里指的是“更新真正的 DOM 节点”这个动作。所谓 Pre-commit，就是说我在这个阶段其实还并没有去更新真实的 DOM，不过 DOM 信息已经是可以读取的了；")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("Commit 阶段")]),s._v("：在这一步，React 会完成真实 DOM 的更新工作。Commit 阶段，我们可以拿到真实 DOM（包括 refs）。")])])]),s._v(" "),t("p",[s._v("与此同时，新的生命周期在流程方面，仍然遵循“挂载”、“更新”、“卸载”这三个广义的划分方式。它们分别对应到：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("挂载过程：")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("constructor")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("getDerivedStateFromProps")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("render")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("componentDidMount")])])]),s._v(" "),t("li",[t("p",[s._v("更新过程：")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("getDerivedStateFromProps")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("shouldComponentUpdate")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("render")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("getSnapshotBeforeUpdate")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("componentDidUpdate")])])]),s._v(" "),t("li",[t("p",[s._v("卸载过程：")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("componentWillUnmount")])])])]),s._v(" "),t("h2",{attrs:{id:"四、组件通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、组件通信"}},[s._v("#")]),s._v(" 四、组件通信")]),s._v(" "),t("p",[s._v("React组件间通信常见的几种情况:")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("父组件向子组件通信")])]),s._v(" "),t("li",[t("p",[s._v("子组件向父组件通信")])]),s._v(" "),t("li",[t("p",[s._v("跨级组件通信")])]),s._v(" "),t("li",[t("p",[s._v("非嵌套关系的组件通信")])])]),s._v(" "),t("h3",{attrs:{id:"_1-父子组件的通信方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-父子组件的通信方式"}},[s._v("#")]),s._v(" 1. 父子组件的通信方式？")]),s._v(" "),t("p",[t("strong",[s._v("父组件向子组件通信")]),s._v("：父组件通过 props 向子组件传递需要的信息。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('// 子组件: Child\nconst Child = props =>{\n  return <p>{props.name}</p>\n}\n// 父组件 Parent\nconst Parent = ()=>{\n    return <Child name="react"></Child>\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[t("strong",[s._v("子组件向父组件通信")]),s._v("：: props+回调的方式。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('// 子组件: Child\nconst Child = props =>{\n  const cb = msg =>{\n      return ()=>{\n          props.callback(msg)\n      }\n  }\n  return (\n      <button onClick={cb("你好!")}>你好</button>\n  )\n}\n// 父组件 Parent\nclass Parent extends Component {\n    callback(msg){\n        console.log(msg)\n    }\n    render(){\n        return <Child callback={this.callback.bind(this)}></Child>    \n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])]),t("h3",{attrs:{id:"_2-跨级组件的通信方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-跨级组件的通信方式"}},[s._v("#")]),s._v(" 2. 跨级组件的通信方式？")]),s._v(" "),t("p",[s._v("父组件向子组件的子组件通信，向更深层子组件通信：")]),s._v(" "),t("ul",[t("li",[s._v("使用props，利用中间组件层层传递,但是如果父组件结构较深，那么中间每一层组件都要去传递props，增加了复杂度，并且这些props并不是中间组件自己需要的。")]),s._v(" "),t("li",[s._v("使用context，context相当于一个大容器，可以把要通信的内容放在这个容器中，这样不管嵌套多深，都可以随意取用，对于跨越多层的全局数据可以使用context实现。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('// context方式实现跨级组件通信 \n// Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据\nconst BatteryContext = createContext();\n//  子组件的子组件 \nclass GrandChild extends Component {\n    render(){\n        return (\n            <BatteryContext.Consumer>\n                {\n                    color => <h1 style={{"color":color}}>我是红色的:{color}</h1>\n                }\n            </BatteryContext.Consumer>\n        )\n    }\n}\n//  子组件\nconst Child = () =>{\n    return (\n        <GrandChild/>\n    )\n}\n// 父组件\nclass Parent extends Component {\n      state = {\n          color:"red"\n      }\n      render(){\n          const {color} = this.state\n          return (\n          <BatteryContext.Provider value={color}>\n              <Child></Child>\n          </BatteryContext.Provider>\n          )\n      }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br")])]),t("h3",{attrs:{id:"_3-非嵌套关系组件的通信方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-非嵌套关系组件的通信方式"}},[s._v("#")]),s._v(" 3. 非嵌套关系组件的通信方式？")]),s._v(" "),t("p",[s._v("即没有任何包含关系的组件，包括兄弟组件以及不在同一个父级中的非兄弟组件。")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("可以使用自定义事件通信（发布订阅模式）")])]),s._v(" "),t("li",[t("p",[s._v("可以通过redux等进行全局状态管理")])]),s._v(" "),t("li",[t("p",[s._v("如果是兄弟组件通信，可以找到这两个兄弟节点共同的父节点, 结合父子间通信方式进行通信。")])])]),s._v(" "),t("h3",{attrs:{id:"_4-如何解决-props-层级过深的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-如何解决-props-层级过深的问题"}},[s._v("#")]),s._v(" 4. 如何解决 props 层级过深的问题")]),s._v(" "),t("ul",[t("li",[s._v("使用Context API：提供一种组件之间的状态共享，而不必通过显式组件树逐层传递props；")]),s._v(" "),t("li",[s._v("使用Redux等状态库。")])]),s._v(" "),t("h3",{attrs:{id:"_5-组件通信的方式有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-组件通信的方式有哪些"}},[s._v("#")]),s._v(" 5. 组件通信的方式有哪些")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("⽗组件向⼦组件通讯")]),s._v(": ⽗组件可以向⼦组件通过传 props 的⽅式，向⼦组件进⾏通讯")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("⼦组件向⽗组件通讯")]),s._v(": props+回调的⽅式，⽗组件向⼦组件传递props进⾏通讯，此props为作⽤域为⽗组件⾃身的函 数，⼦组件调⽤该函数，将⼦组件想要传递的信息，作为参数，传递到⽗组件的作⽤域中")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("兄弟组件通信")]),s._v(": 找到这两个兄弟节点共同的⽗节点,结合上⾯两种⽅式由⽗节点转发信息进⾏通信")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("跨层级通信")]),s._v(": Context 设计⽬的是为了共享那些对于⼀个组件树⽽⾔是“全局”的数据，例如当前认证的⽤户、主题或⾸选语⾔，对于跨越多层的全局数据通过 Context 通信再适合不过")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("发布订阅模式")]),s._v(": 发布者发布事件，订阅者监听事件并做出反应,我们可以通过引⼊event模块进⾏通信")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("全局状态管理⼯具")]),s._v(": 借助Redux或者Mobx等全局状态管理⼯具进⾏通信,这种⼯具会维护⼀个全局状态中⼼Store,并根据不同的事件产⽣新的状态")])])]),s._v(" "),t("h2",{attrs:{id:"五、路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、路由"}},[s._v("#")]),s._v(" 五、路由")]),s._v(" "),t("h3",{attrs:{id:"_1-react-router的实现原理是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-react-router的实现原理是什么"}},[s._v("#")]),s._v(" 1. React-Router的实现原理是什么？")]),s._v(" "),t("p",[s._v("客户端路由实现的思想：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("基于 hash 的路由：通过监听"),t("code",[s._v("hashchange")]),s._v("事件，感知 hash 的变化")])]),s._v(" "),t("li",[t("p",[s._v("改变 hash 可以直接通过 location.hash=xxx")])]),s._v(" "),t("li",[t("p",[s._v("基于 H5 history 路由：")])]),s._v(" "),t("li",[t("p",[s._v("改变 url 可以通过 history.pushState 和 resplaceState 等，会将URL压入堆栈，同时能够应用 "),t("code",[s._v("history.go()")]),s._v(" 等 API")])]),s._v(" "),t("li",[t("p",[s._v("监听 url 的变化可以通过自定义事件触发实现")])])]),s._v(" "),t("p",[t("strong",[s._v("react-router 实现的思想：")])]),s._v(" "),t("ul",[t("li",[s._v("基于 "),t("code",[s._v("history")]),s._v(" 库来实现上述不同的客户端路由实现思想，并且能够保存历史记录等，磨平浏览器差异，上层无感知")]),s._v(" "),t("li",[s._v("通过维护的列表，在每次 URL 发生变化的回收，通过配置的 路由路径，匹配到对应的 Component，并且 render")])]),s._v(" "),t("h3",{attrs:{id:"_2-如何配置-react-router-实现路由切换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-如何配置-react-router-实现路由切换"}},[s._v("#")]),s._v(" 2. 如何配置 React-Router 实现路由切换")]),s._v(" "),t("p",[t("strong",[s._v("（1）使用  组件")])]),s._v(" "),t("p",[s._v("路由匹配是通过比较 "),t("Route",[s._v(" 的 path 属性和当前地址的 pathname 来实现的。当一个 "),t("Route",[s._v(" 匹配成功时，它将渲染其内容，当它不匹配时就会渲染 null。没有路径的 "),t("Route",[s._v(" 将始终被匹配。")])],1)],1)],1),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// when location = { pathname: '/about' }\n<Route path='/about' component={About}/> // renders <About/>\n<Route path='/contact' component={Contact}/> // renders null\n<Route component={Always}/> // renders <Always/>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[t("strong",[s._v("（2）结合使用  组件和  组件")])]),s._v(" "),t("Switch",[s._v(" 用于将 "),t("Route",[s._v(" 分组。\n"),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('<Switch>\n    <Route exact path="/" component={Home} />\n    <Route path="/about" component={About} />\n    <Route path="/contact" component={Contact} />\n</Switch>\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("Switch",[s._v(" 不是分组 "),t("Route",[s._v(" 所必须的，但他通常很有用。 一个 "),t("Switch",[s._v(" 会遍历其所有的子 "),t("Route",[s._v("元素，并仅渲染与当前地址匹配的第一个元素。\n"),t("p",[t("strong",[s._v("（3）使用 、 、 组件")])]),s._v(" "),t("Link",[s._v(" 组件来在你的应用程序中创建链接。无论你在何处渲染一个 "),t("Link",[s._v(" ，都会在应用程序的 HTML 中渲染锚（"),t("a",[s._v("）。\n"),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("<Link to=\"/\">Home</Link>   \n// <a href='/'>Home</a>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("NavLink",[s._v(" 是一种特殊类型的 "),t("Link",[s._v(' 当它的 to属性与当前地址匹配时，可以将其定义为"活跃的"。\n'),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// location = { pathname: '/react' }\n<NavLink to=\"/react\" activeClassName=\"hurray\">\n    React\n</NavLink>\n// <a href='/react' className='hurray'>React</a>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("当我们想强制导航时，可以渲染一个"),t("Redirect",[s._v("，当一个"),t("Redirect",[s._v("渲染时，它将使用它的to属性进行定向。")])],1)],1),s._v(" "),t("h3",{attrs:{id:"_3-react-router怎么设置重定向"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-react-router怎么设置重定向"}},[s._v("#")]),s._v(" 3. React-Router怎么设置重定向？")]),s._v(" "),t("p",[s._v("使用"),t("Redirect",[s._v("组件实现路由的重定向：")])],1),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("<Switch>\n  <Redirect from='/users/:id' to='/users/profile/:id'/>\n  <Route path='/users/profile/:id' component={Profile}/>\n</Switch>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("当请求 "),t("code",[s._v("/users/:id")]),s._v(" 被重定向去 "),t("code",[s._v("'/users/profile/:id'")]),s._v("：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("属性 "),t("code",[s._v("from: string")]),s._v("：需要匹配的将要被重定向路径。")])]),s._v(" "),t("li",[t("p",[s._v("属性 "),t("code",[s._v("to: string")]),s._v("：重定向的 URL 字符串")])]),s._v(" "),t("li",[t("p",[s._v("属性 "),t("code",[s._v("to: object")]),s._v("：重定向的 location 对象")])]),s._v(" "),t("li",[t("p",[s._v("属性 "),t("code",[s._v("push: bool")]),s._v("：若为真，重定向操作将会把新地址加入到访问历史记录里面，并且无法回退到前面的页面。")])])]),s._v(" "),t("h3",{attrs:{id:"_4-react-router-里的-link-标签和-a-标签的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-react-router-里的-link-标签和-a-标签的区别"}},[s._v("#")]),s._v(" 4. react-router 里的 Link 标签和 a 标签的区别")]),s._v(" "),t("p",[s._v("从最终渲染的 DOM 来看，这两者都是链接，都是 标签，区别是∶")]),s._v(" "),t("Link",[s._v("是react-router 里实现路由跳转的链接，一般配合"),t("Route",[s._v(" 使用，react-router接管了其默认的链接跳转行为，区别于传统的页面跳转，"),t("Link",[s._v(" 的“跳转”行为只会触发相匹配的"),t("Route",[s._v("对应的页面内容更新，而不会刷新整个页面。\n"),t("Link",[s._v("做了3件事情:\n"),t("ul",[t("li",[t("p",[s._v("有onclick那就执行onclick")])]),s._v(" "),t("li",[t("p",[s._v("click的时候阻止a标签默认事件")])]),s._v(" "),t("li",[t("p",[s._v("根据跳转href(即是to)，用history (web前端路由两种方式之一，history & hash)跳转，此时只是链接变了，并没有刷新页面而"),t("a",[s._v("标签就是普通的超链接了，用于从当前页面跳转到href指向的另一 个页面(非锚点情况)。")])])])]),s._v(" "),t("p",[s._v("a标签默认事件禁掉之后做了什么才实现了跳转?")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("let domArr = document.getElementsByTagName('a')\n[...domArr].forEach(item=>{\n    item.addEventListener('click',function () {\n        location.href = this.href\n    })\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h3",{attrs:{id:"_5-react-router如何获取url的参数和历史对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-react-router如何获取url的参数和历史对象"}},[s._v("#")]),s._v(" 5. React-Router如何获取URL的参数和历史对象？")]),s._v(" "),t("p",[t("strong",[s._v("（1）获取URL的参数")])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("get传值")])])]),s._v(" "),t("p",[s._v("路由配置还是普通的配置，如："),t("code",[s._v("'admin'")]),s._v("，传参方式如："),t("code",[s._v("'admin?id='1111''")]),s._v("。通过"),t("code",[s._v("this.props.location.search")]),s._v("获取url获取到一个字符串"),t("code",[s._v("'?id='1111'")])]),s._v(" "),t("p",[s._v("可以用url，qs，querystring，浏览器提供的api URLSearchParams对象或者自己封装的方法去解析出id的值。")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("动态路由传值")])])]),s._v(" "),t("p",[s._v("路由需要配置成动态路由：如"),t("code",[s._v("path='/admin/:id'")]),s._v("，传参方式，如"),t("code",[s._v("'admin/111'")]),s._v("。通过"),t("code",[s._v("this.props.match.params.id")]),s._v(" 取得url中的动态路由id部分的值，除此之外还可以通过"),t("code",[s._v("useParams（Hooks）")]),s._v("来获取")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("通过query或state传值")])])]),s._v(" "),t("p",[s._v("传参方式如：在Link组件的to属性中可以传递对象"),t("code",[s._v("{pathname:'/admin',query:'111',state:'111'};")]),s._v("。通过"),t("code",[s._v("this.props.location.state")]),s._v("或"),t("code",[s._v("this.props.location.query")]),s._v("来获取即可，传递的参数可以是对象、数组等，但是存在缺点就是只要刷新页面，参数就会丢失。")]),s._v(" "),t("p",[t("strong",[s._v("（2）获取历史对象")])]),s._v(" "),t("ul",[t("li",[s._v("如果React >= 16.8 时可以使用 React Router中提供的Hooks")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import { useHistory } from "react-router-dom";\nlet history = useHistory();\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("2.使用this.props.history获取历史对象")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("let history = this.props.history;\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"_6-react-router-4怎样在路由变化时重新渲染同一个组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-react-router-4怎样在路由变化时重新渲染同一个组件"}},[s._v("#")]),s._v(" 6. React-Router 4怎样在路由变化时重新渲染同一个组件？")]),s._v(" "),t("p",[s._v("当路由变化时，即组件的props发生了变化，会调用componentWillReceiveProps等生命周期钩子。那需要做的只是： 当路由改变时，根据路由，也去请求数据：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("class NewsList extends Component {\n  componentDidMount () {\n     this.fetchData(this.props.location);\n  }\n  \n  fetchData(location) {\n    const type = location.pathname.replace('/', '') || 'top'\n    this.props.dispatch(fetchListData(type))\n  }\n  componentWillReceiveProps(nextProps) {\n     if (nextProps.location.pathname != this.props.location.pathname) {\n         this.fetchData(nextProps.location);\n     } \n  }\n  render () {\n    ...\n  }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("p",[s._v("利用生命周期componentWillReceiveProps，进行重新render的预处理操作。")]),s._v(" "),t("h3",{attrs:{id:"_7-react-router的路由有几种模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-react-router的路由有几种模式"}},[s._v("#")]),s._v(" 7. React-Router的路由有几种模式？")]),s._v(" "),t("p",[s._v("React-Router 支持使用 hash（对应 HashRouter）和 browser（对应 BrowserRouter） 两种路由规则， react-router-dom 提供了 BrowserRouter 和 HashRouter 两个组件来实现应用的 UI 和 URL 同步：")]),s._v(" "),t("ul",[t("li",[s._v("BrowserRouter 创建的 URL 格式：http://xxx.com/path")]),s._v(" "),t("li",[s._v("HashRouter 创建的 URL 格式：http://xxx.com/#/path")])]),s._v(" "),t("p",[t("strong",[s._v("（1）BrowserRouter")])]),s._v(" "),t("p",[s._v("它使用 HTML5 提供的 history API（pushState、replaceState 和 popstate 事件）来保持 UI 和 URL 的同步。由此可以看出，"),t("strong",[s._v("BrowserRouter 是使用 HTML 5 的 history API 来控制路由跳转的：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("<BrowserRouter\n    basename={string}\n    forceRefresh={bool}\n    getUserConfirmation={func}\n    keyLength={number}\n/>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[t("strong",[s._v("其中的属性如下：")])]),s._v(" "),t("ul",[t("li",[s._v("basename 所有路由的基准 URL。basename 的正确格式是前面有一个前导斜杠，但不能有尾部斜杠；")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('<BrowserRouter basename="/calendar">\n    <Link to="/today" />\n</BrowserRouter>\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("等同于")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('<a href="/calendar/today" />\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("forceRefresh 如果为 true，在导航的过程中整个页面将会刷新。一般情况下，只有在不支持 HTML5 history API 的浏览器中使用此功能；")]),s._v(" "),t("li",[s._v("getUserConfirmation 用于确认导航的函数，默认使用 window.confirm。例如，当从 /a 导航至 /b 时，会使用默认的 confirm 函数弹出一个提示，用户点击确定后才进行导航，否则不做任何处理；")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// 这是默认的确认函数\nconst getConfirmation = (message, callback) => {\n  const allowTransition = window.confirm(message);\n  callback(allowTransition);\n}\n<BrowserRouter getUserConfirmation={getConfirmation} />\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("需要配合`` 一起使用。")]),s._v(" "),t("ul",[t("li",[s._v("KeyLength 用来设置 Location.Key 的长度。")])]),s._v(" "),t("p",[t("strong",[s._v("（2）HashRouter")])]),s._v(" "),t("p",[s._v("使用 URL 的 hash 部分（即 window.location.hash）来保持 UI 和 URL 的同步。由此可以看出，"),t("strong",[s._v("HashRouter 是通过 URL 的 hash 属性来控制路由跳转的：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("<HashRouter\n    basename={string}\n    getUserConfirmation={func}\n    hashType={string}  \n/>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("strong",[s._v("其中的参数如下")]),s._v("：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("basename, getUserConfirmation 和 "),t("code",[s._v("BrowserRouter")]),s._v(" 功能一样；")])]),s._v(" "),t("li",[t("p",[s._v("hashType window.location.hash 使用的 hash 类型，有如下几种：")])]),s._v(" "),t("li",[t("p",[s._v("slash - 后面跟一个斜杠，例如 #/ 和 #/sunshine/lollipops；")])]),s._v(" "),t("li",[t("p",[s._v("noslash - 后面没有斜杠，例如 # 和 #sunshine/lollipops；")])]),s._v(" "),t("li",[t("p",[s._v("hashbang - Google 风格的 ajax crawlable，例如 #!/ 和 #!/sunshine/lollipops。")])])]),s._v(" "),t("h3",{attrs:{id:"_8-react-router-4的switch有什么用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-react-router-4的switch有什么用"}},[s._v("#")]),s._v(" 8. React-Router 4的Switch有什么用？")]),s._v(" "),t("p",[s._v("Switch 通常被用来包裹 Route，用于渲染与路径匹配的第一个子 "),t("code",[s._v("或")]),s._v("，它里面不能放其他元素。")]),s._v(" "),t("p",[s._v("假如不加 `` ：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import { Route } from \'react-router-dom\'\n\n<Route path="/" component={Home}></Route>\n<Route path="/login" component={Login}></Route>\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("Route 组件的 path 属性用于匹配路径，因为需要匹配 "),t("code",[s._v("/")]),s._v(" 到 "),t("code",[s._v("Home")]),s._v("，匹配 "),t("code",[s._v("/login")]),s._v(" 到 "),t("code",[s._v("Login")]),s._v("，所以需要两个 Route，但是不能这么写。这样写的话，当 URL 的 path 为 “/login” 时，"),t("code",[s._v("和")]),s._v(" 都会被匹配，因此页面会展示 Home 和 Login 两个组件。这时就需要借助 `` 来做到只显示一个匹配组件：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import { Switch, Route} from \'react-router-dom\'\n    \n<Switch>\n    <Route path="/" component={Home}></Route>\n    <Route path="/login" component={Login}></Route>\n</Switch>\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("此时，再访问 “/login” 路径时，却只显示了 Home 组件。这是就用到了exact属性，它的作用就是精确匹配路径，经常与"),t("code",[s._v("联合使用。只有当 URL 和该")]),s._v(" 的 path 属性完全一致的情况下才能匹配上：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import { Switch, Route} from \'react-router-dom\'\n   \n<Switch>\n   <Route exact path="/" component={Home}></Route>\n   <Route exact path="/login" component={Login}></Route>\n</Switch>\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h2",{attrs:{id:"六、redux"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六、redux"}},[s._v("#")]),s._v(" 六、Redux")]),s._v(" "),t("h3",{attrs:{id:"_1-对-redux-的理解-主要解决什么问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-对-redux-的理解-主要解决什么问题"}},[s._v("#")]),s._v(" 1. 对 Redux 的理解，主要解决什么问题")]),s._v(" "),t("p",[s._v("React是视图层框架。Redux是一个用来管理数据状态和UI状态的JavaScript应用工具。随着JavaScript单页应用（SPA）开发日趋复杂， JavaScript需要管理比任何时候都要多的state（状态）， Redux就是降低管理难度的。（Redux支持React、Angular、jQuery甚至纯JavaScript）。")]),s._v(" "),t("p",[s._v("在 React 中，UI 以组件的形式来搭建，组件之间可以嵌套组合。但 React 中组件间通信的数据流是单向的，顶层组件可以通过 props 属性向下层组件传递数据，而下层组件不能向上层组件传递数据，兄弟组件之间同样不能。这样简单的单向数据流支撑起了 React 中的数据可控性。")]),s._v(" "),t("p",[s._v("当项目越来越大的时候，管理数据的事件或回调函数将越来越多，也将越来越不好管理。管理不断变化的 state 非常困难。如果一个 model 的变化会引起另一个 model 变化，那么当 view 变化时，就可能引起对应 model 以及另一个 model 的变化，依次地，可能会引起另一个 view 的变化。直至你搞不清楚到底发生了什么。state 在什么时候，由于什么原因，如何变化已然不受控制。 当系统变得错综复杂的时候，想重现问题或者添加新功能就会变得举步维艰。如果这还不够糟糕，考虑一些来自前端开发领域的新需求，如更新调优、服务端渲染、路由跳转前请求数据等。state 的管理在大项目中相当复杂。")]),s._v(" "),t("p",[s._v("Redux 提供了一个叫 store 的统一仓储库，组件通过 dispatch 将 state 直接传入store，不用通过其他的组件。并且组件通过 subscribe 从 store获取到 state 的改变。使用了 Redux，所有的组件都可以从 store 中获取到所需的 state，他们也能从store 获取到 state 的改变。这比组件之间互相传递数据清晰明朗的多。")]),s._v(" "),t("p",[t("strong",[s._v("主要解决的问题：")])]),s._v(" "),t("p",[s._v("单纯的Redux只是一个状态机，是没有UI呈现的，react- redux作用是将Redux的状态机和React的UI呈现绑定在一起，当你dispatch action改变state的时候，会自动更新页面。")]),s._v(" "),t("h3",{attrs:{id:"_2-redux-原理及工作流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-redux-原理及工作流程"}},[s._v("#")]),s._v(" 2. Redux 原理及工作流程")]),s._v(" "),t("p",[t("strong",[s._v("（1）原理")])]),s._v(" "),t("p",[s._v("Redux源码主要分为以下几个模块文件")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("compose.js 提供从右到左进行函数式编程")])]),s._v(" "),t("li",[t("p",[s._v("createStore.js 提供作为生成唯一store的函数")])]),s._v(" "),t("li",[t("p",[s._v("combineReducers.js 提供合并多个reducer的函数，保证store的唯一性")])]),s._v(" "),t("li",[t("p",[s._v("bindActionCreators.js 可以让开发者在不直接接触dispacth的前提下进行更改state的操作")])]),s._v(" "),t("li",[t("p",[s._v("applyMiddleware.js 这个方法通过中间件来增强dispatch的功能")])])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const actionTypes = {\n    ADD: 'ADD',\n    CHANGEINFO: 'CHANGEINFO',\n}\n\nconst initState = {\n    info: '初始化',\n}\n\nexport default function initReducer(state=initState, action) {\n    switch(action.type) {\n        case actionTypes.CHANGEINFO:\n            return {\n                ...state,\n                info: action.preload.info || '',\n            }\n        default:\n            return { ...state };\n    }\n}\n\nexport default function createStore(reducer, initialState, middleFunc) {\n\n    if (initialState && typeof initialState === 'function') {\n        middleFunc = initialState;\n        initialState = undefined;\n    }\n\n    let currentState = initialState;\n\n    const listeners = [];\n\n    if (middleFunc && typeof middleFunc === 'function') {\n        // 封装dispatch \n        return middleFunc(createStore)(reducer, initialState);\n    }\n\n    const getState = () => {\n        return currentState;\n    }\n\n    const dispatch = (action) => {\n        currentState = reducer(currentState, action);\n\n        listeners.forEach(listener => {\n            listener();\n        })\n    }\n\n    const subscribe = (listener) => {\n        listeners.push(listener);\n    }\n\n    return {\n        getState,\n        dispatch,\n        subscribe\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br")])]),t("p",[t("strong",[s._v("（2）工作流程")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("const store= createStore（fn）生成数据;")])]),s._v(" "),t("li",[t("p",[s._v("action: {type: Symble('action01), payload:'payload' }定义行为;")])]),s._v(" "),t("li",[t("p",[s._v("dispatch发起action：store.dispatch(doSomething('action001'));")])]),s._v(" "),t("li",[t("p",[s._v("reducer：处理action，返回新的state;")])])]),s._v(" "),t("p",[s._v("通俗点解释：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("首先，用户（通过View）发出Action，发出方式就用到了dispatch方法")])]),s._v(" "),t("li",[t("p",[s._v("然后，Store自动调用Reducer，并且传入两个参数：当前State和收到的Action，Reducer会返回新的State")])]),s._v(" "),t("li",[t("p",[s._v("State—旦有变化，Store就会调用监听函数，来更新View")])])]),s._v(" "),t("p",[s._v("以 store 为核心，可以把它看成数据存储中心，但是他要更改数据的时候不能直接修改，数据修改更新的角色由Reducers来担任，store只做存储，中间人，当Reducers的更新完成以后会通过store的订阅来通知react component，组件把新的状态重新获取渲染，组件中也能主动发送action，创建action后这个动作是不会执行的，所以要dispatch这个action，让store通过reducers去做更新React Component 就是react的每个组件。")]),s._v(" "),t("h3",{attrs:{id:"_3-redux-中异步的请求怎么处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-redux-中异步的请求怎么处理"}},[s._v("#")]),s._v(" 3. Redux 中异步的请求怎么处理")]),s._v(" "),t("p",[s._v("可以在 componentDidmount 中直接进⾏请求⽆须借助redux。但是在⼀定规模的项⽬中,上述⽅法很难进⾏异步流的管理,通常情况下我们会借助redux的异步中间件进⾏异步处理。redux异步流中间件其实有很多，当下主流的异步中间件有两种redux-thunk、redux-saga。")]),s._v(" "),t("p",[t("strong",[s._v("（1）使用react-thunk中间件")])]),s._v(" "),t("p",[t("strong",[s._v("redux-thunk")]),s._v("优点**😗*")]),s._v(" "),t("ul",[t("li",[s._v("体积⼩: redux-thunk的实现⽅式很简单,只有不到20⾏代码")]),s._v(" "),t("li",[s._v("使⽤简单: redux-thunk没有引⼊像redux-saga或者redux-observable额外的范式,上⼿简单")])]),s._v(" "),t("p",[t("strong",[s._v("redux-thunk")]),s._v("缺陷**😗*")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("样板代码过多: 与redux本身⼀样,通常⼀个请求需要⼤量的代码,⽽且很多都是重复性质的")])]),s._v(" "),t("li",[t("p",[s._v("耦合严重: 异步操作与redux的action偶合在⼀起,不⽅便管理")])]),s._v(" "),t("li",[t("p",[s._v("功能孱弱: 有⼀些实际开发中常⽤的功能需要⾃⼰进⾏封装")])])]),s._v(" "),t("p",[s._v("使用步骤：")]),s._v(" "),t("ul",[t("li",[s._v("配置中间件，在store的创建中配置")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("import {createStore, applyMiddleware, compose} from 'redux';\nimport reducer from './reducer';\nimport thunk from 'redux-thunk'\n\n// 设置调试工具\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\n// 设置中间件\nconst enhancer = composeEnhancers(\n  applyMiddleware(thunk)\n);\n\nconst store = createStore(reducer, enhancer);\n\nexport default store;\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("ul",[t("li",[s._v("添加一个返回函数的actionCreator，将异步请求逻辑放在里面")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("/**\n  发送get请求，并生成相应action，更新store的函数\n  @param url {string} 请求地址\n  @param func {function} 真正需要生成的action对应的actionCreator\n  @return {function} \n*/\n// dispatch为自动接收的store.dispatch函数 \nexport const getHttpAction = (url, func) => (dispatch) => {\n    axios.get(url).then(function(res){\n        const action = func(res.data)\n        dispatch(action)\n    })\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("ul",[t("li",[s._v("生成action，并发送action")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("componentDidMount(){\n    var action = getHttpAction('/getData', getInitTodoItemAction)\n    // 发送函数类型的action时，该action的函数体会自动执行\n    store.dispatch(action)\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("strong",[s._v("（2）使用redux-saga中间件")])]),s._v(" "),t("p",[t("strong",[s._v("redux-saga")]),s._v("优点**😗*")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("异步解耦: 异步操作被被转移到单独 saga.js 中，不再是掺杂在 action.js 或 component.js 中")])]),s._v(" "),t("li",[t("p",[s._v("action摆脱thunk function: dispatch 的参数依然是⼀个纯粹的 action (FSA)，⽽不是充满 “⿊魔法” thunk function")])]),s._v(" "),t("li",[t("p",[s._v("异常处理: 受益于 generator function 的 saga 实现，代码异常/请求失败 都可以直接通过 try/catch 语法直接捕获处理")])]),s._v(" "),t("li",[t("p",[s._v("功能强⼤: redux-saga提供了⼤量的Saga 辅助函数和Effect 创建器供开发者使⽤,开发者⽆须封装或者简单封装即可使⽤")])]),s._v(" "),t("li",[t("p",[s._v("灵活: redux-saga可以将多个Saga可以串⾏/并⾏组合起来,形成⼀个⾮常实⽤的异步flow")])]),s._v(" "),t("li",[t("p",[s._v("易测试，提供了各种case的测试⽅案，包括mock task，分⽀覆盖等等")])])]),s._v(" "),t("p",[t("strong",[s._v("redux-saga")]),s._v("缺陷**😗*")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("额外的学习成本: redux-saga不仅在使⽤难以理解的 generator function,⽽且有数⼗个API,学习成本远超redux-thunk,最重要的是你的额外学习成本是只服务于这个库的,与redux-observable不同,redux-observable虽然也有额外学习成本但是背后是rxjs和⼀整套思想")])]),s._v(" "),t("li",[t("p",[s._v("体积庞⼤: 体积略⼤,代码近2000⾏，min版25KB左右")])]),s._v(" "),t("li",[t("p",[s._v("功能过剩: 实际上并发控制等功能很难⽤到,但是我们依然需要引⼊这些代码")])]),s._v(" "),t("li",[t("p",[s._v("ts⽀持不友好: yield⽆法返回TS类型")])])]),s._v(" "),t("p",[s._v("redux-saga可以捕获action，然后执行一个函数，那么可以把异步代码放在这个函数中，使用步骤如下：")]),s._v(" "),t("ul",[t("li",[s._v("配置中间件")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("import {createStore, applyMiddleware, compose} from 'redux';\nimport reducer from './reducer';\nimport createSagaMiddleware from 'redux-saga'\nimport TodoListSaga from './sagas'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\nconst sagaMiddleware = createSagaMiddleware()\n\nconst enhancer = composeEnhancers(\n  applyMiddleware(sagaMiddleware)\n);\n\nconst store = createStore(reducer, enhancer);\nsagaMiddleware.run(TodoListSaga)\n\nexport default store;\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("ul",[t("li",[s._v("将异步请求放在sagas.js中")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("import {takeEvery, put} from 'redux-saga/effects'\nimport {initTodoList} from './actionCreator'\nimport {GET_INIT_ITEM} from './actionTypes'\nimport axios from 'axios'\n\nfunction* func(){\n    try{\n        // 可以获取异步返回数据\n        const res = yield axios.get('/getData')\n        const action = initTodoList(res.data)\n        // 将action发送到reducer\n        yield put(action)\n    }catch(e){\n        console.log('网络请求失败')\n    }\n}\n\nfunction* mySaga(){\n    // 自动捕获GET_INIT_ITEM类型的action，并执行func\n    yield takeEvery(GET_INIT_ITEM, func)\n}\n\nexport default mySaga\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])]),t("ul",[t("li",[s._v("发送action")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("componentDidMount(){\n  const action = getInitTodoItemAction()\n  store.dispatch(action)\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"_4-redux-怎么实现属性传递-介绍下原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-redux-怎么实现属性传递-介绍下原理"}},[s._v("#")]),s._v(" 4. Redux 怎么实现属性传递，介绍下原理")]),s._v(" "),t("p",[s._v("react-redux 数据传输∶ view--\x3eaction--\x3ereducer--\x3estore--\x3eview。看下点击事件的数据是如何通过redux传到view上：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("view 上的AddClick 事件通过mapDispatchToProps 把数据传到action ---\x3e click:()=>dispatch(ADD)")])]),s._v(" "),t("li",[t("p",[s._v("action 的ADD 传到reducer上")])]),s._v(" "),t("li",[t("p",[s._v("reducer传到store上 const store = createStore(reducer);")])]),s._v(" "),t("li",[t("p",[s._v("store再通过 mapStateToProps 映射穿到view上text:State.text")])])]),s._v(" "),t("p",[s._v("代码示例∶")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider, connect } from 'react-redux';\nclass App extends React.Component{\n    render(){\n        let { text, click, clickR } = this.props;\n        return(\n            <div>\n                <div>数据:已有人{text}</div>\n                <div onClick={click}>加人</div>\n                <div onClick={clickR}>减人</div>\n            </div>\n        )\n    }\n}\nconst initialState = {\n    text:5\n}\nconst reducer = function(state,action){\n    switch(action.type){\n        case 'ADD':\n            return {text:state.text+1}\n        case 'REMOVE':\n            return {text:state.text-1}\n        default:\n            return initialState;\n    }\n}\n\nlet ADD = {\n    type:'ADD'\n}\nlet Remove = {\n    type:'REMOVE'\n}\n\nconst store = createStore(reducer);\n\nlet mapStateToProps = function (state){\n    return{\n        text:state.text\n    }\n}\n\nlet mapDispatchToProps = function(dispatch){\n    return{\n        click:()=>dispatch(ADD),\n        clickR:()=>dispatch(Remove)\n    }\n}\n\nconst App1 = connect(mapStateToProps,mapDispatchToProps)(App);\n\nReactDOM.render(\n    <Provider store = {store}>\n        <App1></App1>\n    </Provider>,document.getElementById('root')\n)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br")])]),t("h3",{attrs:{id:"_5-redux-中间件是什么-接受几个参数-柯里化函数两端的参数具体是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-redux-中间件是什么-接受几个参数-柯里化函数两端的参数具体是什么"}},[s._v("#")]),s._v(" 5. Redux 中间件是什么？接受几个参数？柯里化函数两端的参数具体是什么？")]),s._v(" "),t("p",[s._v('Redux 的中间件提供的是位于 action 被发起之后，到达 reducer 之前的扩展点，换而言之，原本 view -→> action -> reducer -> store 的数据流加上中间件后变成了 view -> action -> middleware -> reducer -> store ，在这一环节可以做一些"副作用"的操作，如异步请求、打印日志等。')]),s._v(" "),t("p",[s._v("applyMiddleware源码：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("export default function applyMiddleware(...middlewares) {\n    return createStore => (...args) => {\n        // 利用传入的createStore和reducer和创建一个store\n        const store = createStore(...args)\n        let dispatch = () => {\n            throw new Error()\n        }\n        const middlewareAPI = {\n            getState: store.getState,\n            dispatch: (...args) => dispatch(...args)\n        }\n        // 让每个 middleware 带着 middlewareAPI 这个参数分别执行一遍\n        const chain = middlewares.map(middleware => middleware(middlewareAPI))\n        // 接着 compose 将 chain 中的所有匿名函数，组装成一个新的函数，即新的 dispatch\n        dispatch = compose(...chain)(store.dispatch)\n        return {\n            ...store,\n            dispatch\n        }\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])]),t("p",[s._v("从applyMiddleware中可以看出∶")]),s._v(" "),t("ul",[t("li",[s._v("redux中间件接受一个对象作为参数，对象的参数上有两个字段 dispatch 和 getState，分别代表着 Redux Store 上的两个同名函数。")]),s._v(" "),t("li",[s._v("柯里化函数两端一个是 middewares，一个是store.dispatch")])]),s._v(" "),t("h3",{attrs:{id:"_6-redux-请求中间件如何处理并发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-redux-请求中间件如何处理并发"}},[s._v("#")]),s._v(" 6. Redux 请求中间件如何处理并发")]),s._v(" "),t("p",[t("strong",[s._v("使用redux-Saga")])]),s._v(" "),t("p",[s._v("redux-saga是一个管理redux应用异步操作的中间件，用于代替 redux-thunk 的。它通过创建 Sagas 将所有异步操作逻辑存放在一个地方进行集中处理，以此将react中的同步操作与异步操作区分开来，以便于后期的管理与维护。 redux-saga如何处理并发：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("takeEvery")])])]),s._v(" "),t("p",[s._v("可以让多个 saga 任务并行被 fork 执行。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import {\n    fork,\n    take\n} from "redux-saga/effects"\n\nconst takeEvery = (pattern, saga, ...args) => fork(function*() {\n    while (true) {\n        const action = yield take(pattern)\n        yield fork(saga, ...args.concat(action))\n    }\n})\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("ul",[t("li",[t("strong",[s._v("takeLatest")])])]),s._v(" "),t("p",[s._v("takeLatest 不允许多个 saga 任务并行地执行。一旦接收到新的发起的 action，它就会取消前面所有 fork 过的任务（如果这些任务还在执行的话）。")]),s._v(" "),t("p",[s._v("在处理 AJAX 请求的时候，如果只希望获取最后那个请求的响应， takeLatest 就会非常有用。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import {\n    cancel,\n    fork,\n    take\n} from "redux-saga/effects"\n\nconst takeLatest = (pattern, saga, ...args) => fork(function*() {\n    let lastTask\n    while (true) {\n        const action = yield take(pattern)\n        if (lastTask) {\n            yield cancel(lastTask) // 如果任务已经结束，则 cancel 为空操作\n        }\n        lastTask = yield fork(saga, ...args.concat(action))\n    }\n})\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("h3",{attrs:{id:"_7-redux-状态管理器和变量挂载到-window-中有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-redux-状态管理器和变量挂载到-window-中有什么区别"}},[s._v("#")]),s._v(" 7. Redux 状态管理器和变量挂载到 window 中有什么区别")]),s._v(" "),t("p",[s._v("两者都是存储数据以供后期使用。但是Redux状态更改可回溯——Time travel，数据多了的时候可以很清晰的知道改动在哪里发生，完整的提供了一套状态管理模式。")]),s._v(" "),t("p",[s._v("随着 JavaScript 单页应用开发日趋复杂，JavaScript 需要管理比任何时候都要多的 state （状态）。 这些 state 可能包括服务器响应、缓存数据、本地生成尚未持久化到服务器的数据，也包括 UI状态，如激活的路由，被选中的标签，是否显示加载动效或者分页器等等。")]),s._v(" "),t("p",[s._v("管理不断变化的 state 非常困难。如果一个 model 的变化会引起另一个 model 变化，那么当 view 变化时，就可能引起对应 model 以及另一个model 的变化，依次地，可能会引起另一个 view 的变化。直至你搞不清楚到底发生了什么。state 在什么时候，由于什么原因，如何变化已然不受控制。 当系统变得错综复杂的时候，想重现问题或者添加新功能就会变得举步维艰。")]),s._v(" "),t("p",[s._v("如果这还不够糟糕，考虑一些来自前端开发领域的新需求，如更新调优、服务端渲染、路由跳转前请求数据等等。前端开发者正在经受前所未有的复杂性，难道就这么放弃了吗?当然不是。")]),s._v(" "),t("p",[s._v("这里的复杂性很大程度上来自于：我们总是将两个难以理清的概念混淆在一起：变化和异步。 可以称它们为曼妥思和可乐。如果把二者分开，能做的很好，但混到一起，就变得一团糟。一些库如 React 视图在视图层禁止异步和直接操作 DOM来解决这个问题。美中不足的是，React 依旧把处理 state 中数据的问题留给了你。Redux就是为了帮你解决这个问题。")]),s._v(" "),t("h3",{attrs:{id:"_8-mobox-和-redux-有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-mobox-和-redux-有什么区别"}},[s._v("#")]),s._v(" 8. mobox 和 redux 有什么区别？")]),s._v(" "),t("p",[t("strong",[s._v("（1）共同点")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("为了解决状态管理混乱，无法有效同步的问题统一维护管理应用状态;")])]),s._v(" "),t("li",[t("p",[s._v("某一状态只有一个可信数据来源（通常命名为store，指状态容器）;")])]),s._v(" "),t("li",[t("p",[s._v("操作更新状态方式统一，并且可控（通常以action方式提供更新状态的途径）;")])]),s._v(" "),t("li",[t("p",[s._v("支持将store与React组件连接，如react-redux，mobx- react;")])])]),s._v(" "),t("p",[t("strong",[s._v("（2）区别")])]),s._v(" "),t("p",[s._v("Redux更多的是遵循Flux模式的一种实现，是一个 JavaScript库，它关注点主要是以下几方面∶")]),s._v(" "),t("ul",[t("li",[s._v("Action∶ 一个JavaScript对象，描述动作相关信息，主要包含type属性和payload属性∶")])]),s._v(" "),t("p",[s._v("​         o type∶ action 类型;")]),s._v(" "),t("p",[s._v("​         o payload∶ 负载数据;")]),s._v(" "),t("ul",[t("li",[s._v("Reducer∶ 定义应用状态如何响应不同动作（action），如何更新状态;")]),s._v(" "),t("li",[s._v("Store∶ 管理action和reducer及其关系的对象，主要提供以下功能∶")])]),s._v(" "),t("p",[s._v("​         o 维护应用状态并支持访问状态(getState());")]),s._v(" "),t("p",[s._v("​         o 支持监听action的分发，更新状态(dispatch(action));")]),s._v(" "),t("p",[s._v("​         o 支持订阅store的变更(subscribe(listener));")]),s._v(" "),t("ul",[t("li",[s._v("异步流∶ 由于Redux所有对store状态的变更，都应该通过action触发，异步任务（通常都是业务或获取数据任务）也不例外，而为了不将业务或数据相关的任务混入React组件中，就需要使用其他框架配合管理异步任务流程，如redux-thunk，redux-saga等;")])]),s._v(" "),t("p",[s._v("Mobx是一个透明函数响应式编程的状态管理库，它使得状态管理简单可伸缩∶")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("Action∶定义改变状态的动作函数，包括如何变更状态;")])]),s._v(" "),t("li",[t("p",[s._v("Store∶ 集中管理模块状态（State）和动作(action)")])]),s._v(" "),t("li",[t("p",[s._v("Derivation（衍生）∶ 从应用状态中派生而出，且没有任何其他影响的数据")])])]),s._v(" "),t("p",[t("strong",[s._v("对比总结：")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("redux将数据保存在单一的store中，mobx将数据保存在分散的多个store中")])]),s._v(" "),t("li",[t("p",[s._v("redux使用plain object保存数据，需要手动处理变化后的操作;mobx适用observable保存数据，数据变化后自动处理响应的操作")])]),s._v(" "),t("li",[t("p",[s._v("redux使用不可变状态，这意味着状态是只读的，不能直接去修改它，而是应该返回一个新的状态，同时使用纯函数;mobx中的状态是可变的，可以直接对其进行修改")])]),s._v(" "),t("li",[t("p",[s._v("mobx相对来说比较简单，在其中有很多的抽象，mobx更多的使用面向对象的编程思维;redux会比较复杂，因为其中的函数式编程思想掌握起来不是那么容易，同时需要借助一系列的中间件来处理异步和副作用")])]),s._v(" "),t("li",[t("p",[s._v("mobx中有更多的抽象和封装，调试会比较困难，同时结果也难以预测;而redux提供能够进行时间回溯的开发工具，同时其纯函数以及更少的抽象，让调试变得更加的容易")])])]),s._v(" "),t("h3",{attrs:{id:"_9-redux-和-vuex-有什么区别-它们的共同思想"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-redux-和-vuex-有什么区别-它们的共同思想"}},[s._v("#")]),s._v(" 9. Redux 和 Vuex 有什么区别，它们的共同思想")]),s._v(" "),t("p",[t("strong",[s._v("（1）Redux 和 Vuex区别")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("Vuex改进了Redux中的Action和Reducer函数，以mutations变化函数取代Reducer，无需switch，只需在对应的mutation函数里改变state值即可")])]),s._v(" "),t("li",[t("p",[s._v("Vuex由于Vue自动重新渲染的特性，无需订阅重新渲染函数，只要生成新的State即可")])]),s._v(" "),t("li",[t("p",[s._v("Vuex数据流的顺序是∶View调用store.commit提交对应的请求到Store中对应的mutation函数->store改变（vue检测到数据变化自动渲染）")])])]),s._v(" "),t("p",[s._v("通俗点理解就是，vuex 弱化 dispatch，通过commit进行 store状态的一次更变；取消了action概念，不必传入特定的 action形式进行指定变更；弱化reducer，基于commit参数直接对数据进行转变，使得框架更加简易;")]),s._v(" "),t("p",[t("strong",[s._v("（2）共同思想")])]),s._v(" "),t("ul",[t("li",[s._v("单—的数据源")]),s._v(" "),t("li",[s._v("变化可以预测")])]),s._v(" "),t("p",[s._v("本质上∶ redux与vuex都是对mvvm思想的服务，将数据从视图中抽离的一种方案。")]),s._v(" "),t("h3",{attrs:{id:"_10-redux-中间件是怎么拿到store-和-action-然后怎么处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-redux-中间件是怎么拿到store-和-action-然后怎么处理"}},[s._v("#")]),s._v(" 10. Redux 中间件是怎么拿到store 和 action? 然后怎么处理?")]),s._v(" "),t("p",[s._v("redux中间件本质就是一个函数柯里化。redux applyMiddleware Api 源码中每个middleware 接受2个参数， Store 的getState 函数和dispatch 函数，分别获得store和action，最终返回一个函数。该函数会被传入 next 的下一个 middleware 的 dispatch 方法，并返回一个接收 action 的新函数，这个函数可以直接调用 next（action），或者在其他需要的时刻调用，甚至根本不去调用它。调用链中最后一个 middleware 会接受真实的 store的 dispatch 方法作为 next 参数，并借此结束调用链。所以，middleware 的函数签名是（{ getState，dispatch })=> next => action。")]),s._v(" "),t("h3",{attrs:{id:"_11-redux中的connect有什么作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-redux中的connect有什么作用"}},[s._v("#")]),s._v(" 11. Redux中的connect有什么作用")]),s._v(" "),t("p",[s._v("connect负责连接React和Redux")]),s._v(" "),t("p",[t("strong",[s._v("（1）获取state")])]),s._v(" "),t("p",[s._v("connect 通过 context获取 Provider 中的 store，通过"),t("code",[s._v("store.getState()")]),s._v(" 获取整个store tree 上所有state")]),s._v(" "),t("p",[t("strong",[s._v("（2）包装原组件")])]),s._v(" "),t("p",[s._v("将state和action通过props的方式传入到原组件内部 wrapWithConnect 返回—个 ReactComponent 对 象 Connect，Connect 重 新 render 外部传入的原组件 WrappedComponent ，并把 connect 中传入的 mapStateToProps，mapDispatchToProps与组件上原有的 props合并后，通过属性的方式传给WrappedComponent")]),s._v(" "),t("p",[t("strong",[s._v("（3）监听store tree变化")])]),s._v(" "),t("p",[s._v("connect缓存了store tree中state的状态，通过当前state状态 和变更前 state 状态进行比较，从而确定是否调用 "),t("code",[s._v("this.setState()")]),s._v("方法触发Connect及其子组件的重新渲染")]),s._v(" "),t("h2",{attrs:{id:"七、hooks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七、hooks"}},[s._v("#")]),s._v(" 七、Hooks")]),s._v(" "),t("h3",{attrs:{id:"_1-对-react-hook-的理解-它的实现原理是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-对-react-hook-的理解-它的实现原理是什么"}},[s._v("#")]),s._v(" 1. 对 React Hook 的理解，它的实现原理是什么")]),s._v(" "),t("p",[s._v("React-Hooks 是 React 团队在 React 组件开发实践中，逐渐认知到的一个改进点，这背后其实涉及对"),t("strong",[s._v("类组件")]),s._v("和"),t("strong",[s._v("函数组****件")]),s._v("两种组件形式的思考和侧重。")]),s._v(" "),t("p",[s._v("**（1）类组件：**所谓类组件，就是基于 ES6 Class 这种写法，通过继承 React.Component 得来的 React 组件。以下是一个类组件：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('class DemoClass extends React.Component {\n  state = {\n    text: ""\n  };\n  componentDidMount() {\n    //...\n  }\n  changeText = (newText) => {\n    this.setState({\n      text: newText\n    });\n  };\n\n  render() {\n    return (\n      <div className="demoClass">\n        <p>{this.state.text}</p>\n        <button onClick={this.changeText}>修改</button>\n      </div>\n    );\n  }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br")])]),t("p",[s._v("可以看出，React 类组件内部预置了相当多的“现成的东西”等着我们去调度/定制，state 和生命周期就是这些“现成东西”中的典型。要想得到这些东西，难度也不大，只需要继承一个 React.Component 即可。")]),s._v(" "),t("p",[s._v("当然，这也是类组件的一个不便，它太繁杂了，对于解决许多问题来说，编写一个类组件实在是一个过于复杂的姿势。复杂的姿势必然带来高昂的理解成本，这也是我们所不想看到的。除此之外，由于开发者编写的逻辑在封装后是和组件粘在一起的，这就使得"),t("strong",[s._v("类组件内部的逻辑难以实现拆分和复用。")])]),s._v(" "),t("p",[t("strong",[s._v("（2）函数组件")]),s._v("：函数组件就是以函数的形态存在的 React 组件。早期并没有 React-Hooks，函数组件内部无法定义和维护 state，因此它还有一个别名叫“无状态组件”。以下是一个函数组件：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('function DemoFunction(props) {\n  const { text } = props\n  return (\n    <div className="demoFunction">\n      <p>{`函数组件接收的内容：[${text}]`}</p>\n    </div>\n  );\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("相比于类组件，函数组件肉眼可见的特质自然包括轻量、灵活、易于组织和维护、较低的学习成本等。")]),s._v(" "),t("p",[s._v("通过对比，从形态上可以对两种组件做区分，它们之间的区别如下：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("类组件需要继承 class，函数组件不需要；")])]),s._v(" "),t("li",[t("p",[s._v("类组件可以访问生命周期方法，函数组件不能；")])]),s._v(" "),t("li",[t("p",[s._v("类组件中可以获取到实例化后的 this，并基于这个 this 做各种各样的事情，而函数组件不可以；")])]),s._v(" "),t("li",[t("p",[s._v("类组件中可以定义并维护 state（状态），而函数组件不可以；")])])]),s._v(" "),t("p",[s._v("除此之外，还有一些其他的不同。通过上面的区别，我们不能说谁好谁坏，它们各有自己的优势。在 React-Hooks 出现之前，"),t("strong",[s._v("类组件的能力边界明显强于函数组件。")])]),s._v(" "),t("p",[s._v("实际上，类组件和函数组件之间，是面向对象和函数式编程这两套不同的设计思想之间的差异。而函数组件更加契合 React 框架的设计理念：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/1500604/1610696273368-c5361298-048d-4eb1-9d35-7700b6601553.png",alt:"img"}})]),s._v(" "),t("p",[s._v("React 组件本身的定位就是函数，一个输入数据、输出 UI 的函数。作为开发者，我们编写的是声明式的代码，而 React 框架的主要工作，就是及时地把声明式的代码转换为命令式的 DOM 操作，把数据层面的描述映射到用户可见的 UI 变化中去。这就意味着从原则上来讲，React 的数据应该总是紧紧地和渲染绑定在一起的，而类组件做不到这一点。**函数组件就真正地将数据和渲染绑定到了一起。**"),t("strong",[s._v("函数组件是一个更加匹配其设计理念、也更有利于逻辑拆分与重用的组件表达形式。")])]),s._v(" "),t("p",[s._v("为了能让开发者更好的的去编写函数式组件。于是，React-Hooks 便应运而生。")]),s._v(" "),t("p",[s._v("React-Hooks 是一套能够使函数组件更强大、更灵活的“钩子”。")]),s._v(" "),t("p",[s._v("函数组件比起类组件少了很多东西，比如生命周期、对 state 的管理等。这就给函数组件的使用带来了非常多的局限性，导致我们并不能使用函数这种形式，写出一个真正的全功能的组件。而React-Hooks 的出现，就是为了帮助函数组件补齐这些（相对于类组件来说）缺失的能力。")]),s._v(" "),t("p",[s._v("如果说函数组件是一台轻巧的快艇，那么 React-Hooks 就是一个内容丰富的零部件箱。“重装战舰”所预置的那些设备，这个箱子里基本全都有，同时它还不强制你全都要，而是允许你自由地选择和使用你需要的那些能力，然后将这些能力以 Hook（钩子）的形式“钩”进你的组件里，从而定制出一个最适合你的“专属战舰”。")]),s._v(" "),t("h3",{attrs:{id:"_2-为什么-usestate-要使用数组而不是对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-为什么-usestate-要使用数组而不是对象"}},[s._v("#")]),s._v(" 2. 为什么 useState 要使用数组而不是对象")]),s._v(" "),t("p",[s._v("useState 的用法：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const [count, setCount] = useState(0)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("可以看到 useState 返回的是一个数组，那么为什么是返回数组而不是返回对象呢？")]),s._v(" "),t("p",[s._v("这里用到了解构赋值，所以先来看一下ES6 的解构赋值：")]),s._v(" "),t("h5",{attrs:{id:"数组的解构赋值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组的解构赋值"}},[s._v("#")]),s._v(" 数组的解构赋值")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const foo = [1, 2, 3];\nconst [one, two, three] = foo;\nconsole.log(one);\t// 1\nconsole.log(two);\t// 2\nconsole.log(three);\t// 3\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h5",{attrs:{id:"对象的解构赋值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象的解构赋值"}},[s._v("#")]),s._v(" 对象的解构赋值")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('const user = {\n  id: 888,\n  name: "xiaoxin"\n};\nconst { id, name } = user;\nconsole.log(id);\t// 888\nconsole.log(name);\t// "xiaoxin"\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("看完这两个例子，答案应该就出来了：")]),s._v(" "),t("ul",[t("li",[s._v("如果 useState 返回的是数组，那么使用者可以对数组中的元素命名，代码看起来也比较干净")]),s._v(" "),t("li",[s._v("如果 useState 返回的是对象，在解构对象的时候必须要和 useState 内部实现返回的对象同名，想要使用多次的话，必须得设置别名才能使用返回值")])]),s._v(" "),t("p",[s._v("下面来看看如果 useState 返回对象的情况：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// 第一次使用\nconst { state, setState } = useState(false);\n// 第二次使用\nconst { state: counter, setState: setCounter } = useState(0) \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("这里可以看到，返回对象的使用方式还是挺麻烦的，更何况实际项目中会使用的更频繁。")]),s._v(" "),t("p",[t("strong",[s._v("总结："),t("strong",[s._v("useState 返回的是 array 而不是 object 的原因就是为了")]),s._v("降低使用的复杂度")]),s._v("，返回数组的话可以直接根据顺序解构，而返回对象的话要想使用多次就需要定义别名了。")]),s._v(" "),t("h3",{attrs:{id:"_3-react-hooks-解决了哪些问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-react-hooks-解决了哪些问题"}},[s._v("#")]),s._v(" 3. React Hooks 解决了哪些问题？")]),s._v(" "),t("p",[s._v("React Hooks 主要解决了以下问题：")]),s._v(" "),t("p",[t("strong",[s._v("（1）在组件之间复用状态逻辑很难")])]),s._v(" "),t("p",[s._v("React 没有提供将可复用性行为“附加”到组件的途径（例如，把组件连接到 store）解决此类问题可以使用 render props 和 高阶组件。但是这类方案需要重新组织组件结构，这可能会很麻烦，并且会使代码难以理解。由 providers，consumers，高阶组件，render props 等其他抽象层组成的组件会形成“嵌套地狱”。尽管可以在 DevTools 过滤掉它们，但这说明了一个更深层次的问题：React 需要为共享状态逻辑提供更好的原生途径。")]),s._v(" "),t("p",[s._v("可以使用 Hook 从组件中提取状态逻辑，使得这些逻辑可以单独测试并复用。Hook 使我们在无需修改组件结构的情况下复用状态逻辑。 这使得在组件间或社区内共享 Hook 变得更便捷。")]),s._v(" "),t("p",[t("strong",[s._v("（2）复杂组件变得难以理解")])]),s._v(" "),t("p",[s._v("在组件中，每个生命周期常常包含一些不相关的逻辑。例如，组件常常在 componentDidMount 和 componentDidUpdate 中获取数据。但是，同一个 componentDidMount 中可能也包含很多其它的逻辑，如设置事件监听，而之后需在 componentWillUnmount 中清除。相互关联且需要对照修改的代码被进行了拆分，而完全不相关的代码却在同一个方法中组合在一起。如此很容易产生 bug，并且导致逻辑不一致。")]),s._v(" "),t("p",[s._v("在多数情况下，不可能将组件拆分为更小的粒度，因为状态逻辑无处不在。这也给测试带来了一定挑战。同时，这也是很多人将 React 与状态管理库结合使用的原因之一。但是，这往往会引入了很多抽象概念，需要你在不同的文件之间来回切换，使得复用变得更加困难。")]),s._v(" "),t("p",[s._v("为了解决这个问题，Hook 将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据），而并非强制按照生命周期划分。你还可以使用 reducer 来管理组件的内部状态，使其更加可预测。")]),s._v(" "),t("p",[t("strong",[s._v("（3）难以理解的 class")])]),s._v(" "),t("p",[s._v("除了代码复用和代码管理会遇到困难外，class 是学习 React 的一大屏障。我们必须去理解 JavaScript 中 this 的工作方式，这与其他语言存在巨大差异。还不能忘记绑定事件处理器。没有稳定的语法提案，这些代码非常冗余。大家可以很好地理解 props，state 和自顶向下的数据流，但对 class 却一筹莫展。即便在有经验的 React 开发者之间，对于函数组件与 class 组件的差异也存在分歧，甚至还要区分两种组件的使用场景。")]),s._v(" "),t("p",[s._v("为了解决这些问题，Hook 使你在非 class 的情况下可以使用更多的 React 特性。 从概念上讲，React 组件一直更像是函数。而 Hook 则拥抱了函数，同时也没有牺牲 React 的精神原则。Hook 提供了问题的解决方案，无需学习复杂的函数式或响应式编程技术")]),s._v(" "),t("h3",{attrs:{id:"_4-react-hook-的使用限制有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-react-hook-的使用限制有哪些"}},[s._v("#")]),s._v(" 4. React Hook 的使用限制有哪些？")]),s._v(" "),t("p",[s._v("React Hooks 的限制主要有两条：")]),s._v(" "),t("ul",[t("li",[s._v("不要在循环、条件或嵌套函数中调用 Hook；")]),s._v(" "),t("li",[s._v("在 React 的函数组件中调用 Hook。")])]),s._v(" "),t("p",[s._v("那为什么会有这样的限制呢？Hooks 的设计初衷是为了改进 React 组件的开发模式。在旧有的开发模式下遇到了三个问题。")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("组件之间难以复用状态逻辑。过去常见的解决方案是高阶组件、render props 及状态管理框架。")])]),s._v(" "),t("li",[t("p",[s._v("复杂的组件变得难以理解。生命周期函数与业务逻辑耦合太深，导致关联部分难以拆分。")])]),s._v(" "),t("li",[t("p",[s._v("人和机器都很容易混淆类。常见的有 this 的问题，但在 React 团队中还有类难以优化的问题，希望在编译优化层面做出一些改进。")])])]),s._v(" "),t("p",[s._v("这三个问题在一定程度上阻碍了 React 的后续发展，所以为了解决这三个问题，Hooks "),t("strong",[s._v("基于函数组件")]),s._v("开始设计。然而第三个问题决定了 Hooks 只支持函数组件。")]),s._v(" "),t("p",[s._v("那为什么不要在循环、条件或嵌套函数中调用 Hook 呢？因为 Hooks 的设计是基于数组实现。在调用时按顺序加入数组中，如果使用循环、条件或嵌套函数很有可能导致数组取值错位，执行错误的 Hook。当然，实质上 React 的源码里不是数组，是链表。")]),s._v(" "),t("p",[s._v("这些限制会在编码上造成一定程度的心智负担，新手可能会写错，为了避免这样的情况，可以引入 ESLint 的 Hooks 检查插件进行预防。")]),s._v(" "),t("h3",{attrs:{id:"_5-useeffect-与-uselayouteffect-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-useeffect-与-uselayouteffect-的区别"}},[s._v("#")]),s._v(" 5. useEffect 与 useLayoutEffect 的区别")]),s._v(" "),t("p",[t("strong",[s._v("（1）共同点")])]),s._v(" "),t("ul",[t("li",[s._v("**运用效果：**useEffect 与 useLayoutEffect 两者都是用于处理副作用，这些副作用包括改变 DOM、设置订阅、操作定时器等。在函数组件内部操作副作用是不被允许的，所以需要使用这两个函数去处理。")]),s._v(" "),t("li",[s._v("**使用方式：**useEffect 与 useLayoutEffect 两者底层的函数签名是完全一致的，都是调用的 mountEffectImpl方法，在使用上也没什么差异，基本可以直接替换。")])]),s._v(" "),t("p",[t("strong",[s._v("（2）不同点")])]),s._v(" "),t("ul",[t("li",[s._v("**使用场景：**useEffect 在 React 的渲染过程中是被异步调用的，用于绝大多数场景；而 useLayoutEffect 会在所有的 DOM 变更之后同步调用，主要用于处理 DOM 操作、调整样式、避免页面闪烁等问题。也正因为是同步处理，所以需要避免在 useLayoutEffect 做计算量较大的耗时任务从而造成阻塞。")]),s._v(" "),t("li",[s._v("**使用效果：**useEffect是按照顺序执行代码的，改变屏幕像素之后执行（先渲染，后改变DOM），当改变屏幕内容时可能会产生闪烁；useLayoutEffect是改变屏幕像素之前就执行了（会推迟页面显示的事件，先改变DOM后渲染），不会产生闪烁。"),t("strong",[s._v("useLayoutEffect总是比useEffect先执行。")])])]),s._v(" "),t("p",[s._v("在未来的趋势上，两个 API 是会长期共存的，暂时没有删减合并的计划，需要开发者根据场景去自行选择。React 团队的建议非常实用，如果实在分不清，先用 useEffect，一般问题不大；如果页面有异常，再直接替换为 useLayoutEffect 即可。")]),s._v(" "),t("h3",{attrs:{id:"_6-react-hooks在平时开发中需要注意的问题和原因"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-react-hooks在平时开发中需要注意的问题和原因"}},[s._v("#")]),s._v(" 6. React Hooks在平时开发中需要注意的问题和原因")]),s._v(" "),t("p",[s._v("（1）"),t("strong",[s._v("不要在循环，条件或嵌套函数中调用Hook，必须始终在 React函数的顶层使用Hook")])]),s._v(" "),t("p",[s._v("这是因为React需要利用调用顺序来正确更新相应的状态，以及调用相应的钩子函数。一旦在循环或条件分支语句中调用Hook，就容易导致调用顺序的不一致性，从而产生难以预料到的后果。")]),s._v(" "),t("p",[t("strong",[s._v("（2）使用useState时候，使用push，pop，splice等直接更改数组对象的坑")])]),s._v(" "),t("p",[s._v("使用push直接更改数组无法获取到新值，应该采用析构方式，但是在class里面不会有这个问题。代码示例：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("function Indicatorfilter() {\n  let [num,setNums] = useState([0,1,2,3])\n  const test = () => {\n    // 这里坑是直接采用push去更新num\n    // setNums(num)是无法更新num的\n    // 必须使用num = [...num ,1]\n    num.push(1)\n    // num = [...num ,1]\n    setNums(num)\n  }\nreturn (\n    <div className='filter'>\n      <div onClick={test}>测试</div>\n        <div>\n          {num.map((item,index) => (\n              <div key={index}>{item}</div>\n          ))}\n      </div>\n    </div>\n  )\n}\n\nclass Indicatorfilter extends React.Component<any,any>{\n  constructor(props:any){\n      super(props)\n      this.state = {\n          nums:[1,2,3]\n      }\n      this.test = this.test.bind(this)\n  }\n\n  test(){\n      // class采用同样的方式是没有问题的\n      this.state.nums.push(1)\n      this.setState({\n          nums: this.state.nums\n      })\n  }\n\n  render(){\n      let {nums} = this.state\n      return(\n          <div>\n              <div onClick={this.test}>测试</div>\n                  <div>\n                      {nums.map((item:any,index:number) => (\n                          <div key={index}>{item}</div>\n                      ))}\n                  </div>\n          </div>\n\n      )\n  }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br")])]),t("p",[s._v("（3）"),t("strong",[s._v("useState设置状态的时候，只有第一次生效，后期需要更新状态，必须通过useEffect")])]),s._v(" "),t("p",[s._v("TableDeail是一个公共组件，在调用它的父组件里面，我们通过set改变columns的值，以为传递给TableDeail 的 columns是最新的值，所以tabColumn每次也是最新的值，但是实际tabColumn是最开始的值，不会随着columns的更新而更新：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const TableDeail = ({\n    columns,\n}:TableData) => {\n    const [tabColumn, setTabColumn] = useState(columns) \n}\n\n// 正确的做法是通过useEffect改变这个值\nconst TableDeail = ({\n    columns,\n}:TableData) => {\n    const [tabColumn, setTabColumn] = useState(columns) \n    useEffect(() =>{setTabColumn(columns)},[columns])\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[t("strong",[s._v("（4）善用useCallback")])]),s._v(" "),t("p",[s._v("父组件传递给子组件事件句柄时，如果我们没有任何参数变动可能会选用useMemo。但是每一次父组件渲染子组件即使没变化也会跟着渲染一次。")]),s._v(" "),t("p",[t("strong",[s._v("（5）不要滥用useContext")])]),s._v(" "),t("p",[s._v("可以使用基于 useContext 封装的状态管理工具。")]),s._v(" "),t("h3",{attrs:{id:"_7-react-hooks-和生命周期的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-react-hooks-和生命周期的关系"}},[s._v("#")]),s._v(" 7. React Hooks 和生命周期的关系？")]),s._v(" "),t("p",[t("strong",[s._v("函数组件")]),s._v(" 的本质是函数，没有 state 的概念的，因此"),t("strong",[s._v("不存在生命周期")]),s._v("一说，仅仅是一个 "),t("strong",[s._v("render 函数")]),s._v("而已。")]),s._v(" "),t("p",[s._v("但是引入 "),t("strong",[s._v("Hooks")]),s._v(" 之后就变得不同了，它能让组件在不使用 class 的情况下拥有 state，所以就有了生命周期的概念，所谓的生命周期其实就是 "),t("code",[s._v("useState")]),s._v("、 "),t("code",[s._v("useEffect()")]),s._v(" 和 "),t("code",[s._v("useLayoutEffect()")]),s._v(" 。")]),s._v(" "),t("p",[s._v("即："),t("strong",[s._v("Hooks 组件（使用了Hooks的函数组件）有生命周期，而函数组件（未使用Hooks的函数组件）是没有生命周期的")]),s._v("。")]),s._v(" "),t("p",[s._v("下面是具体的 class 与 Hooks 的"),t("strong",[s._v("生命周期对应关系")]),s._v("：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("constructor")]),s._v("：函数组件不需要构造函数，可以通过调用 "),t("code",[s._v("**useState** **来初始化 state**")]),s._v("。如果计算的代价比较昂贵，也可以传一个函数给 "),t("code",[s._v("useState")]),s._v("。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const [num, UpdateNum] = useState(0)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[t("code",[s._v("getDerivedStateFromProps")]),s._v("：一般情况下，我们不需要使用它，可以在"),t("strong",[s._v("渲染过程中更新 state")]),s._v("，以达到实现 "),t("code",[s._v("getDerivedStateFromProps")]),s._v(" 的目的。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("function ScrollView({row}) {\n  let [isScrollingDown, setIsScrollingDown] = useState(false);\n  let [prevRow, setPrevRow] = useState(null);\n  if (row !== prevRow) {\n    // Row 自上次渲染以来发生过改变。更新 isScrollingDown。\n    setIsScrollingDown(prevRow !== null && row > prevRow);\n    setPrevRow(row);\n  }\n  return `Scrolling down: ${isScrollingDown}`;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("React 会立即退出第一次渲染并用更新后的 state 重新运行组件以避免耗费太多性能。")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("shouldComponentUpdate")]),s._v("：可以用 "),t("code",[s._v("**React.memo**")]),s._v(" 包裹一个组件来对它的 "),t("code",[s._v("props")]),s._v(" 进行浅比较")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const Button = React.memo((props) => {\n  // 具体的组件\n});\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("注意："),t("code",[s._v("**React.memo** **等效于** ``**PureComponent**")]),s._v("，它只浅比较 props。这里也可以使用 "),t("code",[s._v("useMemo")]),s._v(" 优化每一个节点。")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("render")]),s._v("：这是函数组件体本身。")]),s._v(" "),t("li",[t("code",[s._v("componentDidMount")]),s._v(", "),t("code",[s._v("componentDidUpdate")]),s._v("： "),t("code",[s._v("useLayoutEffect")]),s._v(" 与它们两的调用阶段是一样的。但是，我们推荐你"),t("strong",[s._v("一开始先用 useEffect")]),s._v("，只有当它出问题的时候再尝试使用 "),t("code",[s._v("useLayoutEffect")]),s._v("。"),t("code",[s._v("useEffect")]),s._v(" 可以表达所有这些的组合。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// componentDidMount\nuseEffect(()=>{\n  // 需要在 componentDidMount 执行的内容\n}, [])\nuseEffect(() => { \n  // 在 componentDidMount，以及 count 更改时 componentDidUpdate 执行的内容\n  document.title = `You clicked ${count} times`; \n  return () => {\n    // 需要在 count 更改时 componentDidUpdate（先于 document.title = ... 执行，遵守先清理后更新）\n    // 以及 componentWillUnmount 执行的内容       \n  } // 当函数中 Cleanup 函数会按照在代码中定义的顺序先后执行，与函数本身的特性无关\n}, [count]); // 仅在 count 更改时更新\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[t("strong",[s._v("请记得 React 会等待浏览器完成画面渲染之后才会延迟调用 ，因此会使得额外操作很方便")])]),s._v(" "),t("ul",[t("li",[t("code",[s._v("componentWillUnmount")]),s._v("：相当于 "),t("code",[s._v("useEffect")]),s._v("里面返回的 "),t("code",[s._v("cleanup")]),s._v(" 函数")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// componentDidMount/componentWillUnmount\nuseEffect(()=>{\n  // 需要在 componentDidMount 执行的内容\n  return function cleanup() {\n    // 需要在 componentWillUnmount 执行的内容      \n  }\n}, [])\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("ul",[t("li",[t("code",[s._v("componentDidCatch")]),s._v(" and "),t("code",[s._v("getDerivedStateFromError")]),s._v("：目前"),t("strong",[s._v("还没有")]),s._v("这些方法的 Hook 等价写法，但很快会加上。")])]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("strong",[s._v("class 组件")])]),s._v(" "),t("th",[t("strong",[s._v("Hooks 组件")])])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("constructor")]),s._v(" "),t("td",[s._v("useState")])]),s._v(" "),t("tr",[t("td",[s._v("getDerivedStateFromProps")]),s._v(" "),t("td",[s._v("useState 里面 update 函数")])]),s._v(" "),t("tr",[t("td",[s._v("shouldComponentUpdate")]),s._v(" "),t("td",[s._v("useMemo")])]),s._v(" "),t("tr",[t("td",[s._v("render")]),s._v(" "),t("td",[s._v("函数本身")])]),s._v(" "),t("tr",[t("td",[s._v("componentDidMount")]),s._v(" "),t("td",[s._v("useEffect")])]),s._v(" "),t("tr",[t("td",[s._v("componentDidUpdate")]),s._v(" "),t("td",[s._v("useEffect")])]),s._v(" "),t("tr",[t("td",[s._v("componentWillUnmount")]),s._v(" "),t("td",[s._v("useEffect 里面返回的函数")])]),s._v(" "),t("tr",[t("td",[s._v("componentDidCatch")]),s._v(" "),t("td",[s._v("无")])]),s._v(" "),t("tr",[t("td",[s._v("getDerivedStateFromError")]),s._v(" "),t("td",[s._v("无")])])])]),s._v(" "),t("h2",{attrs:{id:"八、虚拟dom"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#八、虚拟dom"}},[s._v("#")]),s._v(" 八、虚拟DOM")]),s._v(" "),t("h3",{attrs:{id:"_1-对虚拟-dom-的理解-虚拟-dom-主要做了什么-虚拟-dom-本身是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-对虚拟-dom-的理解-虚拟-dom-主要做了什么-虚拟-dom-本身是什么"}},[s._v("#")]),s._v(" 1. 对虚拟 DOM 的理解？虚拟 DOM 主要做了什么？虚拟 DOM 本身是什么？")]),s._v(" "),t("p",[s._v("从本质上来说，Virtual Dom是一个JavaScript对象，通过对象的方式来表示DOM结构。将页面的状态抽象为JS对象的形式，配合不同的渲染工具，使跨平台渲染成为可能。通过事务处理机制，将多次DOM修改的结果一次性的更新到页面上，从而有效的减少页面渲染的次数，减少修改DOM的重绘重排次数，提高渲染性能。")]),s._v(" "),t("p",[s._v("虚拟DOM是对DOM的抽象，这个对象是更加轻量级的对DOM的描述。它设计的最初目的，就是更好的跨平台，比如node.js就没有DOM，如果想实现SSR，那么一个方式就是借助虚拟dom，因为虚拟dom本身是js对象。 在代码渲染到页面之前，vue或者react会把代码转换成一个对象（虚拟DOM）。以对象的形式来描述真实dom结构，最终渲染到页面。在每次数据发生变化前，虚拟dom都会缓存一份，变化之时，现在的虚拟dom会与缓存的虚拟dom进行比较。在vue或者react内部封装了diff算法，通过这个算法来进行比较，渲染时修改改变的变化，原先没有发生改变的通过原先的数据进行渲染。")]),s._v(" "),t("p",[s._v("另外现代前端框架的一个基本要求就是无须手动操作DOM，一方面是因为手动操作DOM无法保证程序性能，多人协作的项目中如果review不严格，可能会有开发者写出性能较低的代码，另一方面更重要的是省略手动DOM操作可以大大提高开发效率。")]),s._v(" "),t("p",[t("strong",[s._v("为什么要用 Virtual DOM：")])]),s._v(" "),t("p",[t("strong",[s._v("（1）保证性能下限，在不进行手动优化的情况下，提供过得去的性能")])]),s._v(" "),t("p",[s._v("下面对比一下修改DOM时真实DOM操作和Virtual DOM的过程，来看一下它们重排重绘的性能消耗∶")]),s._v(" "),t("ul",[t("li",[s._v("真实DOM∶ 生成HTML字符串＋ 重建所有的DOM元素")]),s._v(" "),t("li",[s._v("Virtual DOM∶ 生成vNode＋ DOMDiff＋必要的DOM更新")])]),s._v(" "),t("p",[s._v("Virtual DOM的更新DOM的准备工作耗费更多的时间，也就是JS层面，相比于更多的DOM操作它的消费是极其便宜的。尤雨溪在社区论坛中说道∶ 框架给你的保证是，你不需要手动优化的情况下，我依然可以给你提供过得去的性能。")]),s._v(" "),t("p",[t("strong",[s._v("（2）跨平台")])]),s._v(" "),t("p",[s._v("Virtual DOM本质上是JavaScript的对象，它可以很方便的跨平台操作，比如服务端渲染、uniapp等。")]),s._v(" "),t("h3",{attrs:{id:"_2-react-diff-算法的原理是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-react-diff-算法的原理是什么"}},[s._v("#")]),s._v(" 2. React diff 算法的原理是什么？")]),s._v(" "),t("p",[s._v("实际上，diff 算法探讨的就是虚拟 DOM 树发生变化后，生成 DOM 树更新补丁的方式。它通过对比新旧两株虚拟 DOM 树的变更差异，将更新补丁作用于真实 DOM，以最小成本完成视图更新。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/jpeg/1500604/1609406214678-c2afb29a-fcbc-4d54-8970-97cb7f20fe20.jpeg",alt:"img"}})]),s._v(" "),t("p",[s._v("具体的流程如下：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("真实的 DOM 首先会映射为虚拟 DOM；")])]),s._v(" "),t("li",[t("p",[s._v("当虚拟 DOM 发生变化后，就会根据差距计算生成 patch，这个 patch 是一个结构化的数据，内容包含了增加、更新、移除等；")])]),s._v(" "),t("li",[t("p",[s._v("根据 patch 去更新真实的 DOM，反馈到用户的界面上。")])])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/jpeg/1500604/1609406240365-40166729-9e07-43a2-a9f2-71838e830ad8.jpeg",alt:"img"}})]),s._v(" "),t("p",[s._v("一个简单的例子：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import React from \'react\'\nexport default class ExampleComponent extends React.Component {\n  render() {\n    if(this.props.isVisible) {\n       return <div className="visible">visbile</div>;\n    }\n     return <div className="hidden">hidden</div>;\n  }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("这里，首先假定 ExampleComponent 可见，然后再改变它的状态，让它不可见 。映射为真实的 DOM 操作是这样的，React 会创建一个 div 节点。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('<div class="visible">visbile</div>\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("当把 visbile 的值变为 false 时，就会替换 class 属性为 hidden，并重写内部的 innerText 为 hidden。"),t("strong",[s._v("这样一个生成补丁、更新差异的过程统称为 diff 算法。")])]),s._v(" "),t("p",[s._v("diff算法可以总结为三个策略，分别从树、组件及元素三个层面进行复杂度的优化：")]),s._v(" "),t("p",[t("strong",[s._v("策略一：忽略节点跨层级操作场景，提升比对效率。（基于树进行对比）")])]),s._v(" "),t("p",[s._v("这一策略需要进行树比对，即对树进行分层比较。树比对的处理手法是非常“暴力”的，即两棵树只对同一层次的节点进行比较，如果发现节点已经不存在了，则该节点及其子节点会被完全删除掉，不会用于进一步的比较，这就提升了比对效率。")]),s._v(" "),t("p",[t("strong",[s._v("策略二：如果组件的 class 一致，则默认为相似的树结构，否则默认为不同的树结构。****（基于组件进行对比）")])]),s._v(" "),t("p",[s._v("在组件比对的过程中：")]),s._v(" "),t("ul",[t("li",[s._v("如果组件是同一类型则进行树比对；")]),s._v(" "),t("li",[s._v("如果不是则直接放入补丁中。")])]),s._v(" "),t("p",[s._v("只要父组件类型不同，就会被重新渲染。这也就是为什么 shouldComponentUpdate、PureComponent 及 React.memo 可以提高性能的原因。")]),s._v(" "),t("p",[t("strong",[s._v("策略三：同一层级的子节点，可以通过标记 key 的方式进行列表对比。****（基于节点进行对比）")])]),s._v(" "),t("p",[s._v("元素比对主要发生在同层级中，通过标记节点操作生成补丁。节点操作包含了插入、移动、删除等。其中节点重新排序同时涉及插入、移动、删除三个操作，所以效率消耗最大，此时策略三起到了至关重要的作用。通过标记 key 的方式，React 可以直接移动 DOM 节点，降低内耗。")]),s._v(" "),t("h3",{attrs:{id:"_3-react-key-是干嘛用的-为什么要加-key-主要是解决哪一类问题的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-react-key-是干嘛用的-为什么要加-key-主要是解决哪一类问题的"}},[s._v("#")]),s._v(" 3. React key 是干嘛用的 为什么要加？key 主要是解决哪一类问题的")]),s._v(" "),t("p",[s._v("Keys 是 React 用于追踪哪些列表中元素被修改、被添加或者被移除的辅助标识。在开发过程中，我们需要保证某个元素的 key 在其同级元素中具有唯一性。")]),s._v(" "),t("p",[s._v("在 React Diff 算法中 React 会借助元素的 Key 值来判断该元素是新近创建的还是被移动而来的元素，从而减少不必要的元素重渲染此外，React 还需要借助 Key 值来判断元素与本地状态的关联关系。")]),s._v(" "),t("p",[s._v("注意事项：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("key值一定要和具体的元素—一对应；")])]),s._v(" "),t("li",[t("p",[s._v("尽量不要用数组的index去作为key；")])]),s._v(" "),t("li",[t("p",[s._v("不要在render的时候用随机数或者其他操作给元素加上不稳定的key，这样造成的性能开销比不加key的情况下更糟糕。")])])]),s._v(" "),t("h3",{attrs:{id:"_4-虚拟-dom-的引入与直接操作原生-dom-相比-哪一个效率更高-为什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-虚拟-dom-的引入与直接操作原生-dom-相比-哪一个效率更高-为什么"}},[s._v("#")]),s._v(" 4. 虚拟 DOM 的引入与直接操作原生 DOM 相比，哪一个效率更高，为什么")]),s._v(" "),t("p",[s._v("虚拟DOM相对原生的DOM不一定是效率更高，如果只修改一个按钮的文案，那么虚拟 DOM 的操作无论如何都不可能比真实的 DOM 操作更快。在首次渲染大量DOM时，由于多了一层虚拟DOM的计算，虚拟DOM也会比innerHTML插入慢。它能保证性能下限，在真实DOM操作的时候进行针对性的优化时，还是更快的。所以要根据具体的场景进行探讨。")]),s._v(" "),t("p",[s._v("在整个 DOM 操作的演化过程中，其实主要矛盾并不在于性能，而在于开发者写得爽不爽，在于研发体验/研发效率。虚拟 DOM 不是别的，正是前端开发们为了追求更好的研发体验和研发效率而创造出来的高阶产物。虚拟 DOM 并不一定会带来更好的性能，React 官方也从来没有把虚拟 DOM 作为性能层面的卖点对外输出过。"),t("strong",[s._v("虚拟 DOM 的优越之处在于，它能够在提供更爽、更高效的研发模式（也就是函数式的 UI 编程方式）的同时，仍然保持一个还不错的性能。")])]),s._v(" "),t("h3",{attrs:{id:"_5-react-与-vue-的-diff-算法有何不同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-react-与-vue-的-diff-算法有何不同"}},[s._v("#")]),s._v(" 5. React 与 Vue 的 diff 算法有何不同？")]),s._v(" "),t("p",[s._v("diff 算法是指生成更新补丁的方式，主要应用于虚拟 DOM 树变化后，更新真实 DOM。所以 diff 算法一定存在这样一个过程：触发更新 → 生成补丁 → 应用补丁。")]),s._v(" "),t("p",[s._v("React 的 diff 算法，触发更新的时机主要在 state 变化与 hooks 调用之后。此时触发虚拟 DOM 树变更遍历，采用了深度优先遍历算法。但传统的遍历方式，效率较低。为了优化效率，使用了分治的方式。将单一节点比对转化为了 3 种类型节点的比对，分别是树、组件及元素，以此提升效率。")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("树比对：由于网页视图中较少有跨层级节点移动，两株虚拟 DOM 树只对同一层次的节点进行比较。")])]),s._v(" "),t("li",[t("p",[s._v("组件比对：如果组件是同一类型，则进行树比对，如果不是，则直接放入到补丁中。")])]),s._v(" "),t("li",[t("p",[s._v("元素比对：主要发生在同层级中，通过标记节点操作生成补丁，节点操作对应真实的 DOM 剪裁操作。")])])]),s._v(" "),t("p",[s._v("以上是经典的 React diff 算法内容。自 React 16 起，引入了 Fiber 架构。为了使整个更新过程可随时暂停恢复，节点与树分别采用了 FiberNode 与 FiberTree 进行重构。fiberNode 使用了双链表的结构，可以直接找到兄弟节点与子节点。整个更新过程由 current 与 workInProgress 两株树双缓冲完成。workInProgress 更新完成后，再通过修改 current 相关指针指向新节点。")]),s._v(" "),t("p",[s._v("Vue 的整体 diff 策略与 React 对齐，虽然缺乏时间切片能力，但这并不意味着 Vue 的性能更差，因为在 Vue 3 初期引入过，后期因为收益不高移除掉了。除了高帧率动画，在 Vue 中其他的场景几乎都可以使用防抖和节流去提高响应性能。")]),s._v(" "),t("h2",{attrs:{id:"九、其他"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#九、其他"}},[s._v("#")]),s._v(" 九、其他")]),s._v(" "),t("h3",{attrs:{id:"_1-react组件命名推荐的方式是哪个"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-react组件命名推荐的方式是哪个"}},[s._v("#")]),s._v(" 1. React组件命名推荐的方式是哪个？")]),s._v(" "),t("p",[s._v("通过引用而不是使用来命名组件displayName。")]),s._v(" "),t("p",[s._v("使用displayName命名组件：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("export default React.createClass({\n  displayName: 'TodoApp',\n  // ...\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("React推荐的方法：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("export default class TodoApp extends React.Component {\n  // ...\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"_2-react-最新版本解决了什么问题-增加了哪些东西"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-react-最新版本解决了什么问题-增加了哪些东西"}},[s._v("#")]),s._v(" 2. react 最新版本解决了什么问题，增加了哪些东西")]),s._v(" "),t("p",[s._v("React 16.x的三大新特性 Time Slicing、Suspense、 hooks")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("Time Slicing（解决CPU速度问题")]),s._v("）使得在执行任务的期间可以随时暂停，跑去干别的事情，这个特性使得react能在性能极其差的机器跑时，仍然保持有良好的性能")])]),s._v(" "),t("li",[t("p",[s._v("**Suspense （解决网络IO问题）**和lazy配合，实现异步加载组件。 能暂停当前组件的渲染， 当完成某件事以后再继续渲染，解决从react出生到现在都存在的「异步副作用」的问题，而且解决得非的优雅，使用的是 T异步但是同步的写法，这是最好的解决异步问题的方式")])]),s._v(" "),t("li",[t("p",[s._v("提供了一个"),t("strong",[s._v("内置函数componentDidCatch")]),s._v("，当有错误发生时，可以友好地展示 fallback 组件; 可以捕捉到它的子元素（包括嵌套子元素）抛出的异常; 可以复用错误组件。")])])]),s._v(" "),t("p",[t("strong",[s._v("（1）React16.8")])]),s._v(" "),t("p",[s._v("加入hooks，让React函数式组件更加灵活，hooks之前，React存在很多问题：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("在组件间复用状态逻辑很难")])]),s._v(" "),t("li",[t("p",[s._v("复杂组件变得难以理解，高阶组件和函数组件的嵌套过深。")])]),s._v(" "),t("li",[t("p",[s._v("class组件的this指向问题")])]),s._v(" "),t("li",[t("p",[s._v("难以记忆的生命周期")])])]),s._v(" "),t("p",[s._v("hooks很好的解决了上述问题，hooks提供了很多方法")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("useState 返回有状态值，以及更新这个状态值的函数")])]),s._v(" "),t("li",[t("p",[s._v("useEffect 接受包含命令式，可能有副作用代码的函数。")])]),s._v(" "),t("li",[t("p",[s._v("useContext 接受上下文对象（从 React.createContext返回的值）并返回当前上下文值，")])]),s._v(" "),t("li",[t("p",[s._v("useReducer useState 的替代方案。接受类型为 （state，action）=> newState的reducer，并返回与dispatch方法配对的当前状态。")])]),s._v(" "),t("li",[t("p",[s._v("useCalLback 返回一个回忆的memoized版本，该版本仅在其中一个输入发生更改时才会更改。纯函数的输入输出确定性 o useMemo 纯的一个记忆函数 o useRef 返回一个可变的ref对象，其Current 属性被初始化为传递的参数，返回的 ref 对象在组件的整个生命周期内保持不变。")])]),s._v(" "),t("li",[t("p",[s._v("useImperativeMethods 自定义使用ref时公开给父组件的实例值")])]),s._v(" "),t("li",[t("p",[s._v("useMutationEffect 更新兄弟组件之前，它在React执行其DOM改变的同一阶段同步触发")])]),s._v(" "),t("li",[t("p",[s._v("useLayoutEffect DOM改变后同步触发。使用它来从DOM读取布局并同步重新渲染")])])]),s._v(" "),t("p",[t("strong",[s._v("（2）React16.9")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("重命名 Unsafe 的生命周期方法。新的 UNSAFE_前缀将有助于在代码 review 和 debug 期间，使这些有问题的字样更突出")])]),s._v(" "),t("li",[t("p",[s._v("废弃 javascrip:形式的 URL。以javascript:开头的URL 非常容易遭受攻击，造成安全漏洞。")])]),s._v(" "),t("li",[t("p",[s._v('废弃"Factory"组件。 工厂组件会导致 React 变大且变慢。')])]),s._v(" "),t("li",[t("p",[s._v("act（）也支持异步函数，并且你可以在调用它时使用 await。")])]),s._v(" "),t("li",[t("p",[s._v("使用 <React.ProfiLer> 进行性能评估。在较大的应用中追踪性能回归可能会很方便")])])]),s._v(" "),t("p",[t("strong",[s._v("（3）React16.13.0")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("支持在渲染期间调用setState，但仅适用于同一组件")])]),s._v(" "),t("li",[t("p",[s._v("可检测冲突的样式规则并记录警告")])]),s._v(" "),t("li",[t("p",[s._v("废弃 unstable_createPortal，使用CreatePortal")])]),s._v(" "),t("li",[t("p",[s._v("将组件堆栈添加到其开发警告中，使开发人员能够隔离bug并调试其程序，这可以清楚地说明问题所在，并更快地定位和修复错误。")])])]),s._v(" "),t("h3",{attrs:{id:"_3-react-实现一个全局的-dialog"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-react-实现一个全局的-dialog"}},[s._v("#")]),s._v(" 3. react 实现一个全局的 dialog")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("import React, { Component } from 'react';\nimport { is, fromJS } from 'immutable';\nimport ReactDOM from 'react-dom';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport './dialog.css';\nlet defaultState = {\n  alertStatus:false,\n  alertTip:\"提示\",\n  closeDialog:function(){},\n  childs:''\n}\nclass Dialog extends Component{\n  state = {\n    ...defaultState\n  };\n  // css动画组件设置为目标组件\n  FirstChild = props => {\n    const childrenArray = React.Children.toArray(props.children);\n    return childrenArray[0] || null;\n  }\n  //打开弹窗\n  open =(options)=>{\n    options = options || {};\n    options.alertStatus = true;\n    var props = options.props || {};\n    var childs = this.renderChildren(props,options.childrens) || '';\n    console.log(childs);\n    this.setState({\n      ...defaultState,\n      ...options,\n      childs\n    })\n  }\n  //关闭弹窗\n  close(){\n    this.state.closeDialog();\n    this.setState({\n      ...defaultState\n    })\n  }\n  renderChildren(props,childrens) {\n    //遍历所有子组件\n    var childs = [];\n    childrens = childrens || [];\n    var ps = {\n        ...props,  //给子组件绑定props\n        _close:this.close  //给子组件也绑定一个关闭弹窗的事件    \n       };\n    childrens.forEach((currentItem,index) => {\n        childs.push(React.createElement(\n            currentItem,\n            {\n                ...ps,\n                key:index\n            }\n        ));\n    })\n    return childs;\n  }\n  shouldComponentUpdate(nextProps, nextState){\n    return !is(fromJS(this.props), fromJS(nextProps)) || !is(fromJS(this.state), fromJS(nextState))\n  }\n   \n  render(){\n    return (\n      <ReactCSSTransitionGroup\n        component={this.FirstChild}\n        transitionName='hide'\n        transitionEnterTimeout={300}\n        transitionLeaveTimeout={300}>\n        <div className=\"dialog-con\" style={this.state.alertStatus? {display:'block'}:{display:'none'}}>\n            {this.state.childs}\n        </div>\n      </ReactCSSTransitionGroup>\n    );\n  }\n}\nlet div = document.createElement('div');\nlet props = {\n   \n};\ndocument.body.appendChild(div);\nlet Box = ReactD\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br"),t("span",{staticClass:"line-number"},[s._v("71")]),t("br"),t("span",{staticClass:"line-number"},[s._v("72")]),t("br"),t("span",{staticClass:"line-number"},[s._v("73")]),t("br"),t("span",{staticClass:"line-number"},[s._v("74")]),t("br"),t("span",{staticClass:"line-number"},[s._v("75")]),t("br"),t("span",{staticClass:"line-number"},[s._v("76")]),t("br"),t("span",{staticClass:"line-number"},[s._v("77")]),t("br"),t("span",{staticClass:"line-number"},[s._v("78")]),t("br"),t("span",{staticClass:"line-number"},[s._v("79")]),t("br"),t("span",{staticClass:"line-number"},[s._v("80")]),t("br"),t("span",{staticClass:"line-number"},[s._v("81")]),t("br"),t("span",{staticClass:"line-number"},[s._v("82")]),t("br"),t("span",{staticClass:"line-number"},[s._v("83")]),t("br")])]),t("p",[s._v("子类：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('//子类jsx\nimport React, { Component } from \'react\';\nclass Child extends Component {\n    constructor(props){\n        super(props);\n        this.state = {date: new Date()};\n  }\n  showValue=()=>{\n    this.props.showValue && this.props.showValue()\n  }\n  render() {\n    return (\n      <div className="Child">\n        <div className="content">\n           Child\n           <button onClick={this.showValue}>调用父的方法</button>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Child;\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br")])]),t("p",[s._v("css：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v(".dialog-con{\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.3);\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h3",{attrs:{id:"_4-react-数据持久化有什么实践吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-react-数据持久化有什么实践吗"}},[s._v("#")]),s._v(" 4. React 数据持久化有什么实践吗？")]),s._v(" "),t("p",[s._v("封装数据持久化组件：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("】let storage={\n    // 增加\n    set(key, value){\n        localStorage.setItem(key, JSON.stringify(value));\n    },\n    // 获取\n    get(key){\n        return JSON.parse(localStorage.getItem(key));\n    },\n    // 删除\n    remove(key){\n        localStorage.removeItem(key);\n    }\n};\nexport default Storage;\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("在React项目中，通过redux存储全局数据时，会有一个问题，如果用户刷新了网页，那么通过redux存储的全局数据就会被全部清空，比如登录信息等。这时就会有全局数据持久化存储的需求。首先想到的就是localStorage，localStorage是没有时间限制的数据存储，可以通过它来实现数据的持久化存储。")]),s._v(" "),t("p",[s._v("但是在已经使用redux来管理和存储全局数据的基础上，再去使用localStorage来读写数据，这样不仅是工作量巨大，还容易出错。那么有没有结合redux来达到持久数据存储功能的框架呢？当然，它就是"),t("strong",[s._v("redux-persist")]),s._v("。redux-persist会将redux的store中的数据缓存到浏览器的localStorage中。其使用步骤如下：")]),s._v(" "),t("p",[t("strong",[s._v("（1）首先要安装redux-persist：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("npm i redux-persist\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("（2）对于reducer和action的处理不变，只需修改store的生成代码，修改如下：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("import {createStore} from 'redux'\nimport reducers from '../reducers/index'\nimport {persistStore, persistReducer} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\nconst persistConfig = {\n    key: 'root',\n    storage: storage,\n    stateReconciler: autoMergeLevel2 // 查看 'Merge Process' 部分的具体情况\n};\nconst myPersistReducer = persistReducer(persistConfig, reducers)\nconst store = createStore(myPersistReducer)\nexport const persistor = persistStore(store)\nexport default store\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[t("strong",[s._v("（3）在index.js中，将PersistGate标签作为网页内容的父标签：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport store from './redux/store/store'\nimport {persistor} from './redux/store/store'\nimport {PersistGate} from 'redux-persist/lib/integration/react';\nReactDOM.render(<Provider store={store}>\n            <PersistGate loading={null} persistor={persistor}>\n                {/*网页内容*/}\n            </PersistGate>\n        </Provider>, document.getElementById('root'));\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("这就完成了通过redux-persist实现React持久化本地数据存储的简单应用。")]),s._v(" "),t("h3",{attrs:{id:"_5-对-react-和-vue-的理解-它们的异同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-对-react-和-vue-的理解-它们的异同"}},[s._v("#")]),s._v(" 5. 对 React 和 Vue 的理解，它们的异同")]),s._v(" "),t("p",[t("strong",[s._v("相似之处：")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("都将注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库")])]),s._v(" "),t("li",[t("p",[s._v("都有自己的构建工具，能让你得到一个根据最佳实践设置的项目模板。")])]),s._v(" "),t("li",[t("p",[s._v("都使用了Virtual DOM（虚拟DOM）提高重绘性能")])]),s._v(" "),t("li",[t("p",[s._v("都有props的概念，允许组件间的数据传递")])]),s._v(" "),t("li",[t("p",[s._v("都鼓励组件化应用，将应用分拆成一个个功能明确的模块，提高复用性")])])]),s._v(" "),t("p",[t("strong",[s._v("不同之处：")])]),s._v(" "),t("p",[t("strong",[s._v("1）数据流")])]),s._v(" "),t("p",[s._v("Vue默认支持数据双向绑定，而React一直提倡单向数据流")]),s._v(" "),t("p",[t("strong",[s._v("2）虚拟DOM")])]),s._v(" "),t("p",[s._v('Vue2.x开始引入"Virtual DOM"，消除了和React在这方面的差异，但是在具体的细节还是有各自的特点。')]),s._v(" "),t("ul",[t("li",[s._v("Vue宣称可以更快地计算出Virtual DOM的差异，这是由于它在渲染过程中，会跟踪每一个组件的依赖关系，不需要重新渲染整个组件树。")]),s._v(" "),t("li",[s._v("对于React而言，每当应用的状态被改变时，全部子组件都会重新渲染。当然，这可以通过 PureComponent/shouldComponentUpdate这个生命周期方法来进行控制，但Vue将此视为默认的优化。")])]),s._v(" "),t("p",[t("strong",[s._v("3）组件化")])]),s._v(" "),t("p",[s._v("React与Vue最大的不同是模板的编写。")]),s._v(" "),t("ul",[t("li",[s._v("Vue鼓励写近似常规HTML的模板。写起来很接近标准 HTML元素，只是多了一些属性。")]),s._v(" "),t("li",[s._v("React推荐你所有的模板通用JavaScript的语法扩展——JSX书写。")])]),s._v(" "),t("p",[s._v("具体来讲：React中render函数是支持闭包特性的，所以我们import的组件在render中可以直接调用。但是在Vue中，由于模板中使用的数据都必须挂在 this 上进行一次中转，所以 import 完组件之后，还需要在 components 中再声明下。")]),s._v(" "),t("p",[t("strong",[s._v("4）监听数据变化的实现原理不同")])]),s._v(" "),t("ul",[t("li",[s._v("Vue 通过 getter/setter 以及一些函数的劫持，能精确知道数据变化，不需要特别的优化就能达到很好的性能")]),s._v(" "),t("li",[s._v("React 默认是通过比较引用的方式进行的，如果不优化（PureComponent/shouldComponentUpdate）可能导致大量不必要的vDOM的重新渲染。这是因为 Vue 使用的是可变数据，而React更强调数据的不可变。")])]),s._v(" "),t("p",[t("strong",[s._v("5）高阶组件")])]),s._v(" "),t("p",[s._v("react可以通过高阶组件（Higher Order Components-- HOC）来扩展，而vue需要通过mixins来扩展。")]),s._v(" "),t("p",[s._v("原因高阶组件就是高阶函数，而React的组件本身就是纯粹的函数，所以高阶函数对React来说易如反掌。相反Vue.js使用HTML模板创建视图组件，这时模板无法有效的编译，因此Vue不采用HOC来实现。")]),s._v(" "),t("p",[t("strong",[s._v("6）构建工具")])]),s._v(" "),t("p",[s._v("两者都有自己的构建工具")]),s._v(" "),t("ul",[t("li",[s._v("React ==> Create React APP")]),s._v(" "),t("li",[s._v("Vue ==> vue-cli")])]),s._v(" "),t("p",[t("strong",[s._v("7）跨平台")])]),s._v(" "),t("ul",[t("li",[s._v("React ==> React Native")]),s._v(" "),t("li",[s._v("Vue ==> Weex")])]),s._v(" "),t("h3",{attrs:{id:"_6-可以使用typescript写react应用吗-怎么操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-可以使用typescript写react应用吗-怎么操作"}},[s._v("#")]),s._v(" 6. 可以使用TypeScript写React应用吗？怎么操作？")]),s._v(" "),t("p",[t("strong",[s._v("（1）如果还未创建 Create React App 项目")])]),s._v(" "),t("ul",[t("li",[s._v("直接创建一个具有 typescript 的 Create React App 项目：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v(" npx create-react-app demo --typescript\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("（2）如果已经创建了 Create React App 项目，需要将 typescript 引入到已有项目中")])]),s._v(" "),t("ul",[t("li",[s._v("通过命令将 typescript 引入项目：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("npm install --save typescript @types/node @types/react @types/react-dom @types/jest\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("将项目中任何 后缀名为 ‘.js’ 的 JavaScript 文件重命名为 TypeScript 文件即后缀名为 ‘.tsx’（例如 src/index.js 重命名为 src/index.tsx ）")])]),s._v(" "),t("h3",{attrs:{id:"_7-react-设计思路-它的理念是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-react-设计思路-它的理念是什么"}},[s._v("#")]),s._v(" 7. React 设计思路，它的理念是什么？")]),s._v(" "),t("p",[t("strong",[s._v("（1）编写简单直观的代码")])]),s._v(" "),t("p",[s._v("React最大的价值不是高性能的虚拟DOM、封装的事件机制、服务器端渲染，而是声明式的直观的编码方式。react文档第一条就是声明式，React 使创建交互式 UI 变得轻而易举。为应用的每一个状态设计简洁的视图，当数据改变时 React 能有效地更新并正确地渲染组件。 以声明式编写 UI，可以让代码更加可靠，且方便调试。")]),s._v(" "),t("p",[t("strong",[s._v("（2）简化可复用的组件")])]),s._v(" "),t("p",[s._v("React框架里面使用了简化的组件模型，但更彻底地使用了组件化的概念。React将整个UI上的每一个功能模块定义成组件，然后将小的组件通过组合或者嵌套的方式构成更大的组件。React的组件具有如下的特性∶")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("可组合：简单组件可以组合为复杂的组件")])]),s._v(" "),t("li",[t("p",[s._v("可重用：每个组件都是独立的，可以被多个组件使用")])]),s._v(" "),t("li",[t("p",[s._v("可维护：和组件相关的逻辑和UI都封装在了组件的内部，方便维护")])]),s._v(" "),t("li",[t("p",[s._v("可测试：因为组件的独立性，测试组件就变得方便很多。")])])]),s._v(" "),t("p",[t("strong",[s._v("（3) Virtual DOM")])]),s._v(" "),t("p",[s._v("真实页面对应一个 DOM 树。在传统页面的开发模式中，每次需要更新页面时，都要手动操作 DOM 来进行更新。 DOM 操作非常昂贵。在前端开发中，性能消耗最大的就是 DOM 操作，而且这部分代码会让整体项目的代码变得难 以维护。React 把真实 DOM 树转换成 JavaScript 对象树，也就是 Virtual DOM，每次数据更新后，重新计算 Virtual DOM，并和上一次生成的 Virtual DOM 做对比，对发生变化的部分做批量更新。React 也提供了直观的 shouldComponentUpdate 生命周期回调，来减少数据变化后不必要的 Virtual DOM 对比过程，以保证性能。")]),s._v(" "),t("p",[t("strong",[s._v("（4）函数式编程")])]),s._v(" "),t("p",[s._v("React 把过去不断重复构建 UI 的过程抽象成了组件，且在给定参数的情况下约定渲染对应的 UI 界面。React 能充分利用很多函数式方法去减少冗余代码。此外，由于它本身就是简单函数，所以易于测试。")]),s._v(" "),t("p",[t("strong",[s._v("（5）一次学习，随处编写")])]),s._v(" "),t("p",[s._v("无论现在正在使用什么技术栈，都可以随时引入 React来开发新特性，而不需要重写现有代码。")]),s._v(" "),t("p",[s._v("React 还可以使用 Node 进行服务器渲染，或使用 React Native 开发原生移动应用。因为 React 组件可以映射为对应的原生控件。在输出的时候，是输出 Web DOM，还是 Android 控件，还是 iOS 控件，就由平台本身决定了。所以，react很方便和其他平台集成")]),s._v(" "),t("h3",{attrs:{id:"_8-react中props-children和react-children的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-react中props-children和react-children的区别"}},[s._v("#")]),s._v(" 8. React中props.children和React.Children的区别")]),s._v(" "),t("p",[s._v("在React中，当涉及组件嵌套，在父组件中使用"),t("code",[s._v("props.children")]),s._v("把所有子组件显示出来。如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("function ParentComponent(props){\n\treturn (\n\t\t<div>\n\t\t\t{props.children}\n\t\t</div>\n\t)\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("如果想把父组件中的属性传给所有的子组件，需要使用"),t("code",[s._v("React.Children")]),s._v("方法。")]),s._v(" "),t("p",[s._v("比如，把几个Radio组合起来，合成一个RadioGroup，这就要求所有的Radio具有同样的name属性值。可以这样：把Radio看做子组件，RadioGroup看做父组件，name的属性值在RadioGroup这个父组件中设置。")]),s._v(" "),t("p",[s._v("首先是子组件：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('//子组件\nfunction RadioOption(props) {\n  return (\n    <label>\n      <input type="radio" value={props.value} name={props.name} />\n      {props.label}\n    </label>\n  )\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("然后是父组件，不仅需要把它所有的子组件显示出来，还需要为每个子组件赋上name属性和值：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('//父组件用,props是指父组件的props\nfunction renderChildren(props) {\n    \n  //遍历所有子组件\n  return React.Children.map(props.children, child => {\n    if (child.type === RadioOption)\n      return React.cloneElement(child, {\n        //把父组件的props.name赋值给每个子组件\n        name: props.name\n      })\n    else\n      return child\n  })\n}\n//父组件\nfunction RadioGroup(props) {\n  return (\n    <div>\n      {renderChildren(props)}\n    </div>\n  )\n}\nfunction App() {\n  return (\n    <RadioGroup name="hello">\n      <RadioOption label="选项一" value="1" />\n      <RadioOption label="选项二" value="2" />\n      <RadioOption label="选项三" value="3" />\n    </RadioGroup>\n  )\n}\nexport default App;\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br")])]),t("p",[s._v("以上，"),t("code",[s._v("React.Children.map")]),s._v("让我们对父组件的所有子组件又更灵活的控制。")]),s._v(" "),t("h3",{attrs:{id:"_9-react的状态提升是什么-使用场景有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-react的状态提升是什么-使用场景有哪些"}},[s._v("#")]),s._v(" 9. React的状态提升是什么？使用场景有哪些？")]),s._v(" "),t("p",[s._v("React的状态提升就是用户对子组件操作，子组件不改变自己的状态，通过自己的props把这个操作改变的数据传递给父组件，改变父组件的状态，从而改变受父组件控制的所有子组件的状态，这也是React单项数据流的特性决定的。官方的原话是：共享 state(状态) 是通过将其移动到需要它的组件的最接近的共同祖先组件来实现的。 这被称为“状态提升(Lifting State Up)”。")]),s._v(" "),t("p",[s._v("概括来说就是"),t("strong",[s._v("将多个组件需要共享的状态提升到它们最近的父组件上")]),s._v("，"),t("strong",[s._v("在父组件上改变这个状态然后通过props分发给子组件。")])]),s._v(" "),t("p",[s._v("一个简单的例子，父组件中有两个input子组件，如果想在第一个输入框输入数据，来改变第二个输入框的值，这就需要用到状态提升。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("class Father extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            Value1: '',\n            Value2: ''\n        }\n    }\n    value1Change(aa) {\n        this.setState({\n            Value1: aa\n        })\n    }\n    value2Change(bb) {\n        this.setState({\n            Value2: bb\n        })\n    }\n    render() {\n        return (\n            <div style={{ padding: \"100px\" }}>\n                <Child1 value1={this.state.Value1} onvalue1Change={this.value1Change.bind(this)} />\n                <br />\n                <Child2 value2={this.state.Value1} />\n            </div>\n        )\n    }\n}\nclass Child1 extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n    changeValue(e) {\n        this.props.onvalue1Change(e.target.value)\n    }\n    render() {\n        return (\n            <input value={this.props.Value1} onChange={this.changeValue.bind(this)} />\n        )\n    }\n}\nclass Child2 extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n    render() {\n        return (\n            <input value={this.props.value2} />\n        )\n    }\n}\n \nReactDOM.render(\n    <Father />,\n    document.getElementById('root')\n)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br")])]),t("h3",{attrs:{id:"_10-react中constructor和getinitialstate的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-react中constructor和getinitialstate的区别"}},[s._v("#")]),s._v(" 10. React中constructor和getInitialState的区别?")]),s._v(" "),t("p",[s._v("两者都是用来初始化state的。前者是ES6中的语法，后者是ES5中的语法，新版本的React中已经废弃了该方法。")]),s._v(" "),t("p",[s._v("getInitialState是ES5中的方法，如果使用createClass方法创建一个Component组件，可以自动调用它的getInitialState方法来获取初始化的State对象，")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("var APP = React.creatClass ({\n  getInitialState() {\n    return { \n        userName: 'hi',\n        userId: 0\n     };\n　}\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("React在ES6的实现中去掉了getInitialState这个hook函数，规定state在constructor中实现，如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Class App extends React.Component{\n    constructor(props){\n      super(props);\n      this.state={};\n    }\n  }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h3",{attrs:{id:"_11-react的严格模式如何使用-有什么用处"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-react的严格模式如何使用-有什么用处"}},[s._v("#")]),s._v(" 11. React的严格模式如何使用，有什么用处？")]),s._v(" "),t("p",[t("code",[s._v("StrictMode")]),s._v(" 是一个用来突出显示应用程序中潜在问题的工具。与 "),t("code",[s._v("Fragment")]),s._v(" 一样，"),t("code",[s._v("StrictMode")]),s._v(" 不会渲染任何可见的 UI。它为其后代元素触发额外的检查和警告。")]),s._v(" "),t("p",[s._v("可以为应用程序的任何部分启用严格模式。例如：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("import React from 'react';\nfunction ExampleApplication() {\n  return (\n    <div>\n      <Header />\n      <React.StrictMode>        \n        <div>\n          <ComponentOne />\n          <ComponentTwo />\n        </div>\n      </React.StrictMode>      \n      <Footer />\n    </div>\n  );\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("在上述的示例中，"),t("em",[s._v("不")]),s._v("会对 "),t("code",[s._v("Header")]),s._v(" 和 "),t("code",[s._v("Footer")]),s._v(" 组件运行严格模式检查。但是，"),t("code",[s._v("ComponentOne")]),s._v(" 和 "),t("code",[s._v("ComponentTwo")]),s._v(" 以及它们的所有后代元素都将进行检查。")]),s._v(" "),t("p",[t("code",[s._v("StrictMode")]),s._v(" 目前有助于：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("识别不安全的生命周期")])]),s._v(" "),t("li",[t("p",[s._v("关于使用过时字符串 ref API 的警告")])]),s._v(" "),t("li",[t("p",[s._v("关于使用废弃的 findDOMNode 方法的警告")])]),s._v(" "),t("li",[t("p",[s._v("检测意外的副作用")])]),s._v(" "),t("li",[t("p",[s._v("检测过时的 context API")])])]),s._v(" "),t("h3",{attrs:{id:"_12-在react中遍历的方法有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-在react中遍历的方法有哪些"}},[s._v("#")]),s._v(" 12. 在React中遍历的方法有哪些？")]),s._v(" "),t("p",[t("strong",[s._v("（1）遍历数组：map && forEach")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("import React from 'react';\n\nclass App extends React.Component {\n  render() {\n    let arr = ['a', 'b', 'c', 'd'];\n    return (\n      <ul>\n        {\n          arr.map((item, index) => {\n            return <li key={index}>{item}</li>\n          })\n        }\n      </ul>\n    )\n  }\n}\n\nclass App extends React.Component {\n  render() {\n    let arr = ['a', 'b', 'c', 'd'];\n    return (\n      <ul>\n        {\n          arr.forEach((item, index) => {\n            return <li key={index}>{item}</li>\n          })\n        }\n      </ul>\n    )\n  }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br")])]),t("p",[t("strong",[s._v("（2）遍历对象：map && for in")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("class App extends React.Component {\n  render() {\n    let obj = {\n      a: 1,\n      b: 2,\n      c: 3\n    }\n    return (\n      <ul>\n        {\n          (() => {\n            let domArr = [];\n            for(const key in obj) {\n              if(obj.hasOwnProperty(key)) {\n                const value = obj[key]\n                domArr.push(<li key={key}>{value}</li>)\n              }\n            }\n            return domArr;\n          })()\n        }\n      </ul>\n    )\n  }\n}\n\n// Object.entries() 把对象转换成数组\nclass App extends React.Component {\n  render() {\n    let obj = {\n      a: 1,\n      b: 2,\n      c: 3\n    }\n    return (\n      <ul>\n        {\n          Object.entries(obj).map(([key, value], index) => {   // item是一个数组，把item解构，写法是[key, value]\n            return <li key={key}>{value}</li>\n          }) \n        }\n      </ul>\n    )\n  }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br")])]),t("h3",{attrs:{id:"_13-在react中页面重新加载时怎样保留数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-在react中页面重新加载时怎样保留数据"}},[s._v("#")]),s._v(" 13. 在React中页面重新加载时怎样保留数据？")]),s._v(" "),t("p",[s._v("这个问题就设计到了**数据持久化，**主要的实现方式有以下几种：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("**Redux：**将页面的数据存储在redux中，在重新加载页面时，获取Redux中的数据；")])]),s._v(" "),t("li",[t("p",[s._v("**data.js：**使用webpack构建的项目，可以建一个文件，data.js，将数据保存data.js中，跳转页面后获取；")])]),s._v(" "),t("li",[t("p",[s._v("**sessionStorge：**在进入选择地址页面之前，componentWillUnMount的时候，将数据存储到sessionStorage中，每次进入页面判断sessionStorage中有没有存储的那个值，有，则读取渲染数据；没有，则说明数据是初始化的状态。返回或进入除了选择地址以外的页面，清掉存储的sessionStorage，保证下次进入是初始化的数据")])]),s._v(" "),t("li",[t("p",[s._v("**history API：**History API 的 "),t("code",[s._v("pushState")]),s._v(" 函数可以给历史记录关联一个任意的可序列化 "),t("code",[s._v("state")]),s._v("，所以可以在路由 "),t("code",[s._v("push")]),s._v(" 的时候将当前页面的一些信息存到 "),t("code",[s._v("state")]),s._v(" 中，下次返回到这个页面的时候就能从 "),t("code",[s._v("state")]),s._v(" 里面取出离开前的数据重新渲染。react-router 直接可以支持。这个方法适合一些需要临时存储的场景。")])])]),s._v(" "),t("h3",{attrs:{id:"_14-同时引用这三个库react-js、react-dom-js和babel-js它们都有什么作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-同时引用这三个库react-js、react-dom-js和babel-js它们都有什么作用"}},[s._v("#")]),s._v(" 14. 同时引用这三个库react.js、react-dom.js和babel.js它们都有什么作用？")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("react：包含react所必须的核心代码")])]),s._v(" "),t("li",[t("p",[s._v("react-dom：react渲染在不同平台所需要的核心代码")])]),s._v(" "),t("li",[t("p",[s._v("babel：将jsx转换成React代码的工具")])])]),s._v(" "),t("h3",{attrs:{id:"_15-react必须使用jsx吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-react必须使用jsx吗"}},[s._v("#")]),s._v(" 15. React必须使用JSX吗？")]),s._v(" "),t("p",[s._v("React 并不强制要求使用 JSX。当不想在构建环境中配置有关 JSX 编译时，不在 React 中使用 JSX 会更加方便。")]),s._v(" "),t("p",[s._v("每个 JSX 元素只是调用 "),t("code",[s._v("React.createElement(component, props, ...children)")]),s._v(" 的语法糖。因此，使用 JSX 可以完成的任何事情都可以通过纯 JavaScript 完成。")]),s._v(" "),t("p",[s._v("例如，用 JSX 编写的代码：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("class Hello extends React.Component {\n  render() {\n    return <div>Hello {this.props.toWhat}</div>;\n  }\n}\nReactDOM.render(\n  <Hello toWhat=\"World\" />,\n  document.getElementById('root')\n);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("可以编写为不使用 JSX 的代码：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("class Hello extends React.Component {\n  render() {\n    return React.createElement('div', null, `Hello ${this.props.toWhat}`);\n  }\n}\nReactDOM.render(\n  React.createElement(Hello, {toWhat: 'World'}, null),\n  document.getElementById('root')\n);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h3",{attrs:{id:"_16-为什么使用jsx的组件中没有看到使用react却需要引入react"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-为什么使用jsx的组件中没有看到使用react却需要引入react"}},[s._v("#")]),s._v(" 16. 为什么使用jsx的组件中没有看到使用react却需要引入react？")]),s._v(" "),t("p",[s._v("本质上来说JSX是"),t("code",[s._v("React.createElement(component, props, ...children)")]),s._v("方法的语法糖。在React 17之前，如果使用了JSX，其实就是在使用React， "),t("code",[s._v("babel")]),s._v(" 会把组件转换为 "),t("code",[s._v("CreateElement")]),s._v(" 形式。在React 17之后，就不再需要引入，因为 "),t("code",[s._v("babel")]),s._v(" 已经可以帮我们自动引入react。")]),s._v(" "),t("h3",{attrs:{id:"_17-在react中怎么使用async-await"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-在react中怎么使用async-await"}},[s._v("#")]),s._v(" 17. 在React中怎么使用async/await？")]),s._v(" "),t("p",[s._v("async/await是ES7标准中的新特性。如果是使用React官方的脚手架创建的项目，就可以直接使用。如果是在自己搭建的webpack配置的项目中使用，可能会遇到 "),t("strong",[s._v("regeneratorRuntime is not defined")]),s._v(" 的异常错误。那么我们就需要引入babel，并在babel中配置使用async/await。可以利用babel的 transform-async-to-module-method 插件来转换其成为浏览器支持的语法，虽然没有性能的提升，但对于代码编写体验要更好。")]),s._v(" "),t("h3",{attrs:{id:"_18-react-children-map和js的map有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18-react-children-map和js的map有什么区别"}},[s._v("#")]),s._v(" 18. React.Children.map和js的map有什么区别？")]),s._v(" "),t("p",[s._v("JavaScript中的map不会对为null或者undefined的数据进行处理，而React.Children.map中的map可以处理React.Children为null或者undefined的情况。")]),s._v(" "),t("h3",{attrs:{id:"_19-对react-ssr的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_19-对react-ssr的理解"}},[s._v("#")]),s._v(" 19. 对React SSR的理解")]),s._v(" "),t("p",[s._v('服务端渲染是数据与模版组成的html，即 HTML = 数据 ＋ 模版。将组件或页面通过服务器生成html字符串，再发送到浏览器，最后将静态标记"混合"为客户端上完全交互的应用程序。页面没使用服务渲染，当请求页面时，返回的body里为空，之后执行js将html结构注入到body里，结合css显示出来;')]),s._v(" "),t("p",[t("strong",[s._v("SSR的优势：")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("对SEO友好")])]),s._v(" "),t("li",[t("p",[s._v("所有的模版、图片等资源都存在服务器端")])]),s._v(" "),t("li",[t("p",[s._v("一个html返回所有数据")])]),s._v(" "),t("li",[t("p",[s._v("减少HTTP请求")])]),s._v(" "),t("li",[t("p",[s._v("响应快、用户体验好、首屏渲染快")])])]),s._v(" "),t("p",[t("strong",[s._v("1）更利于SEO")])]),s._v(" "),t("p",[s._v("不同爬虫工作原理类似，只会爬取源码，不会执行网站的任何脚本使用了React或者其它MVVM框架之后，页面大多数DOM元素都是在客户端根据js动态生成，可供爬虫抓取分析的内容大大减少。另外，浏览器爬虫不会等待我们的数据完成之后再去抓取页面数据。服务端渲染返回给客户端的是已经获取了异步数据并执行JavaScript脚本的最终HTML，网络爬中就可以抓取到完整页面的信息。")]),s._v(" "),t("p",[t("strong",[s._v("2）更利于首屏渲染")])]),s._v(" "),t("p",[s._v("首屏的渲染是node发送过来的html字符串，并不依赖于js文件了，这就会使用户更快的看到页面的内容。尤其是针对大型单页应用，打包后文件体积比较大，普通客户端渲染加载所有所需文件时间较长，首页就会有一个很长的白屏等待时间。")]),s._v(" "),t("p",[t("strong",[s._v("SSR的局限：")])]),s._v(" "),t("p",[t("strong",[s._v("1）服务端压力较大")])]),s._v(" "),t("p",[s._v("本来是通过客户端完成渲染，现在统一到服务端node服务去做。尤其是高并发访问的情况，会大量占用服务端CPU资源;")]),s._v(" "),t("p",[t("strong",[s._v("2）开发条件受限")])]),s._v(" "),t("p",[s._v("在服务端渲染中，只会执行到componentDidMount之前的生命周期钩子，因此项目引用的第三方的库也不可用其它生命周期钩子，这对引用库的选择产生了很大的限制;")]),s._v(" "),t("p",[t("strong",[s._v("3）学习成本相对较高")])]),s._v(" "),t("p",[s._v("除了对webpack、MVVM框架要熟悉，还需要掌握node、 Koa2等相关技术。相对于客户端渲染，项目构建、部署过程更加复杂。")]),s._v(" "),t("p",[t("strong",[s._v("时间耗时比较：")])]),s._v(" "),t("p",[t("strong",[s._v("1）数据请求")])]),s._v(" "),t("p",[s._v('由服务端请求首屏数据，而不是客户端请求首屏数据，这是"快"的一个主要原因。服务端在内网进行请求，数据响应速度快。客户端在不同网络环境进行数据请求，且外网http请求开销大，导致时间差')]),s._v(" "),t("ul",[t("li",[s._v("客户端数据请求")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/jpeg/1500604/1612599697115-b749fd70-9747-4f83-a836-72f46f5e91de.jpeg",alt:"img"}})]),s._v(" "),t("ul",[t("li",[s._v("服务端数据请求")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/jpeg/1500604/1612599745397-099cca87-5c01-4c45-94ad-318b054b7a01.jpeg",alt:"img"}})]),s._v(" "),t("p",[t("strong",[s._v("2）html渲染")])]),s._v(" "),t("p",[s._v("服务端渲染是先向后端服务器请求数据，然后生成完整首屏 html返回给浏览器；而客户端渲染是等js代码下载、加载、解析完成后再请求数据渲染，等待的过程页面是什么都没有的，就是用户看到的白屏。就是服务端渲染不需要等待js代码下载完成并请求数据，就可以返回一个已有完整数据的首屏页面。")]),s._v(" "),t("ul",[t("li",[s._v("非ssr html渲染")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/jpeg/1500604/1612599842432-0b804ffa-177b-43c8-a973-d633917b784b.jpeg",alt:"img"}})]),s._v(" "),t("ul",[t("li",[s._v("ssr html渲染")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/jpeg/1500604/1612599902197-a00e3b91-390f-47b7-856f-b1f2d5c782f7.jpeg",alt:"img"}})]),s._v(" "),t("h3",{attrs:{id:"_20-为什么-react-要用-jsx"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20-为什么-react-要用-jsx"}},[s._v("#")]),s._v(" 20. 为什么 React 要用 JSX？")]),s._v(" "),t("p",[s._v("JSX 是一个 JavaScript 的语法扩展，或者说是一个类似于 XML 的 ECMAScript 语法扩展。它本身没有太多的语法定义，也不期望引入更多的标准。")]),s._v(" "),t("p",[s._v("其实 React 本身并不强制使用 JSX。在没有 JSX 的时候，React 实现一个组件依赖于使用 React.createElement 函数。代码如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("class Hello extends React.Component {\n  render() {\n    return React.createElement(\n        'div',\n        null, \n        `Hello ${this.props.toWhat}`\n      );\n  }\n}\nReactDOM.render(\n  React.createElement(Hello, {toWhat: 'World'}, null),\n  document.getElementById('root')\n);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[s._v("而 JSX 更像是一种语法糖，通过类似 XML 的描述方式，描写函数对象。在采用 JSX 之后，这段代码会这样写：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("class Hello extends React.Component {\n  render() {\n    return <div>Hello {this.props.toWhat}</div>;\n  }\n}\nReactDOM.render(\n  <Hello toWhat=\"World\" />,\n  document.getElementById('root')\n);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("通过对比，可以清晰地发现，代码变得更为简洁，而且代码结构层次更为清晰。")]),s._v(" "),t("p",[s._v("因为 React 需要将组件转化为虚拟 DOM 树，所以在编写代码时，实际上是在手写一棵结构树。而"),t("strong",[s._v("XML 在树结构的描述上天生具有可读性强的优势。")])]),s._v(" "),t("p",[s._v("但这样可读性强的代码仅仅是给写程序的同学看的，实际上在运行的时候，会使用 Babel 插件将 JSX 语法的代码还原为 React.createElement 的代码。")]),s._v(" "),t("p",[t("strong",[s._v("总结：")])]),s._v(" "),t("p",[s._v("JSX 是一个 JavaScript 的语法扩展，结构类似 XML。JSX 主要用于声明 React 元素，但 React 中并不强制使用 JSX。即使使用了 JSX，也会在构建过程中，通过 Babel 插件编译为 React.createElement。所以 JSX 更像是 React.createElement 的一种语法糖。")]),s._v(" "),t("p",[s._v("React 团队并不想引入 JavaScript 本身以外的开发体系。而是希望通过合理的关注点分离保持组件开发的纯粹性。")]),s._v(" "),t("h3",{attrs:{id:"_21-hoc相比-mixins-有什么优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_21-hoc相比-mixins-有什么优点"}},[s._v("#")]),s._v(" 21. HOC相比 mixins 有什么优点？")]),s._v(" "),t("p",[s._v("HOC 和 Vue 中的 mixins 作用是一致的，并且在早期 React 也是使用 mixins 的方式。但是在使用 class 的方式创建组件以后，mixins 的方式就不能使用了，并且其实 mixins 也是存在一些问题的，比如：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("隐含了一些依赖，比如我在组件中写了某个 "),t("code",[s._v("state")]),s._v(" 并且在 "),t("code",[s._v("mixin")]),s._v(" 中使用了，就这存在了一个依赖关系。万一下次别人要移除它，就得去 "),t("code",[s._v("mixin")]),s._v(" 中查找依赖")])]),s._v(" "),t("li",[t("p",[s._v("多个 "),t("code",[s._v("mixin")]),s._v(" 中可能存在相同命名的函数，同时代码组件中也不能出现相同命名的函数，否则就是重写了，其实我一直觉得命名真的是一件麻烦事。。")])]),s._v(" "),t("li",[t("p",[s._v("雪球效应，虽然我一个组件还是使用着同一个 "),t("code",[s._v("mixin")]),s._v("，但是一个 "),t("code",[s._v("mixin")]),s._v(" 会被多个组件使用，可能会存在需求使得 "),t("code",[s._v("mixin")]),s._v(" 修改原本的函数或者新增更多的函数，这样可能就会产生一个维护成本")])])]),s._v(" "),t("p",[s._v("HOC 解决了这些问题，并且它们达成的效果也是一致的，同时也更加的政治正确（毕竟更加函数式了）。")]),s._v(" "),t("h3",{attrs:{id:"_22-react-中的高阶组件运用了什么设计模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22-react-中的高阶组件运用了什么设计模式"}},[s._v("#")]),s._v(" 22. React 中的高阶组件运用了什么设计模式？")]),s._v(" "),t("p",[s._v("使用了装饰模式，高阶组件的运用：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("function withWindowWidth(BaseComponent) {\n  class DerivedClass extends React.Component {\n    state = {\n      windowWidth: window.innerWidth,\n    }\n    onResize = () => {\n      this.setState({\n        windowWidth: window.innerWidth,\n      })\n    }\n    componentDidMount() {\n      window.addEventListener('resize', this.onResize)\n    }\n    componentWillUnmount() {\n      window.removeEventListener('resize', this.onResize);\n    }\n    render() {\n      return <BaseComponent {...this.props} {...this.state}/>\n    }\n  }\n  return DerivedClass;\n}\nconst MyComponent = (props) => {\n  return <div>Window width is: {props.windowWidth}</div>\n};\nexport default withWindowWidth(MyComponent);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br")])]),t("p",[s._v("装饰模式的特点是不需要改变 被装饰对象 本身，而只是在外面套一个外壳接口。JavaScript 目前已经有了原生装饰器的提案，其用法如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("@testable\n   class MyTestableClass {\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])])])],1)],1)],1)],1)],1)],1)],1)])],1)],1)],1)])],1)])],1)])}),[],!1,null,null,null);e.default=a.exports}}]);