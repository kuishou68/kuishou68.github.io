(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{434:function(s,e,n){"use strict";n.r(e);var t=n(25),a=Object(t.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"「2023」前端面试题之vue篇"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#「2023」前端面试题之vue篇"}},[s._v("#")]),s._v(" 「2023」前端面试题之Vue篇")]),s._v(" "),n("h2",{attrs:{id:""}},[n("a",{staticClass:"header-anchor",attrs:{href:"#"}},[s._v("#")]),s._v(" "),n("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/1500604/1621612367141-93b24efc-8b06-4c10-8259-586cd8c6c5d5.png",alt:"img"}})]),s._v(" "),n("h2",{attrs:{id:"一、vue-基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、vue-基础"}},[s._v("#")]),s._v(" 一、Vue 基础")]),s._v(" "),n("h3",{attrs:{id:"_1-vue的基本原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-vue的基本原理"}},[s._v("#")]),s._v(" 1. Vue的基本原理")]),s._v(" "),n("p",[s._v("当一个Vue实例创建时，Vue会遍历data中的属性，用 Object.defineProperty（vue3.0使用proxy ）将它们转为 getter/setter，并且在内部追踪相关依赖，在属性被访问和修改时通知变化。 每个组件实例都有相应的 watcher 程序实例，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的setter被调用时，会通知watcher重新计算，从而致使它关联的组件得以更新。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/1500604/1620128979608-f7465ffc-9411-43e3-a6bc-96ab44dd77df.png",alt:"img"}})]),s._v(" "),n("h3",{attrs:{id:"_2-双向数据绑定的原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-双向数据绑定的原理"}},[s._v("#")]),s._v(" 2. 双向数据绑定的原理")]),s._v(" "),n("p",[s._v("Vue.js 是采用"),n("strong",[s._v("数据劫持")]),s._v("结合"),n("strong",[s._v("发布者-订阅者模式")]),s._v("的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。主要分为以下几个步骤：")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上setter和getter这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化")])]),s._v(" "),n("li",[n("p",[s._v("compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图")])]),s._v(" "),n("li",[n("p",[s._v("Watcher订阅者是Observer和Compile之间通信的桥梁，主要做的事情是: ①在自身实例化时往属性订阅器(dep)里面添加自己 ②自身必须有一个update()方法 ③待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。")])]),s._v(" "),n("li",[n("p",[s._v("MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -> 视图更新；视图交互变化(input) -> 数据model变更的双向绑定效果。")])])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/1500604/1618656573096-ebdc520c-5d60-4d12-ad04-5df4ebbb5fe7.png",alt:"img"}})]),s._v(" "),n("h3",{attrs:{id:"_3-使用-object-defineproperty-来进行数据劫持有什么缺点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用-object-defineproperty-来进行数据劫持有什么缺点"}},[s._v("#")]),s._v(" 3. 使用 Object.defineProperty() 来进行数据劫持有什么缺点？")]),s._v(" "),n("p",[s._v("在对一些属性进行操作时，使用这种方法无法拦截，比如通过下标方式修改数组数据或者给对象新增属性，这都不能触发组件的重新渲染，因为 Object.defineProperty 不能拦截到这些操作。更精确的来说，对于数组而言，大部分操作都是拦截不到的，只是 Vue 内部通过重写函数的方式解决了这个问题。")]),s._v(" "),n("p",[s._v("在 Vue3.0 中已经不使用这种方式了，而是通过使用 Proxy 对对象进行代理，从而实现数据劫持。使用Proxy 的好处是它可以完美的监听到任何方式的数据改变，唯一的缺点是兼容性的问题，因为 Proxy 是 ES6 的语法。")]),s._v(" "),n("h3",{attrs:{id:"_4-mvvm、mvc、mvp的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-mvvm、mvc、mvp的区别"}},[s._v("#")]),s._v(" 4. MVVM、MVC、MVP的区别")]),s._v(" "),n("p",[s._v("MVC、MVP 和 MVVM 是三种常见的软件架构设计模式，主要通过分离关注点的方式来组织代码结构，优化开发效率。")]),s._v(" "),n("p",[s._v("在开发单页面应用时，往往一个路由页面对应了一个脚本文件，所有的页面逻辑都在一个脚本文件里。页面的渲染、数据的获取，对用户事件的响应所有的应用逻辑都混合在一起，这样在开发简单项目时，可能看不出什么问题，如果项目变得复杂，那么整个文件就会变得冗长、混乱，这样对项目开发和后期的项目维护是非常不利的。")]),s._v(" "),n("p",[n("strong",[s._v("（1）MVC")])]),s._v(" "),n("p",[s._v("MVC 通过分离 Model、View 和 Controller 的方式来组织代码结构。其中 View 负责页面的显示逻辑，Model 负责存储页面的业务数据，以及对相应数据的操作。并且 View 和 Model 应用了观察者模式，当 Model 层发生改变的时候它会通知有关 View 层更新页面。Controller 层是 View 层和 Model 层的纽带，它主要负责用户与应用的响应操作，当用户与页面产生交互的时候，Controller 中的事件触发器就开始工作了，通过调用 Model 层，来完成对 Model 的修改，然后 Model 层再去通知 View 层更新。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1500604/1603814137582-5a9aa62f-0045-4272-bef0-447dedb25596.png",alt:"img"}})]),s._v(" "),n("p",[s._v("（2）MVVM")]),s._v(" "),n("p",[s._v("MVVM 分为 Model、View、ViewModel：")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("Model代表数据模型，数据和业务逻辑都在Model层中定义；")])]),s._v(" "),n("li",[n("p",[s._v("View代表UI视图，负责数据的展示；")])]),s._v(" "),n("li",[n("p",[s._v("ViewModel负责监听Model中数据的改变并且控制视图的更新，处理用户交互操作；")])])]),s._v(" "),n("p",[s._v("Model和View并无直接关联，而是通过ViewModel来进行联系的，Model和ViewModel之间有着双向数据绑定的联系。因此当Model中的数据改变时会触发View层的刷新，View中由于用户交互操作而改变的数据也会在Model中同步。")]),s._v(" "),n("p",[s._v("这种模式实现了 Model和View的数据自动同步，因此开发者只需要专注于数据的维护操作即可，而不需要自己操作DOM。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1500604/1603814104939-8c8ac923-735d-4476-937a-cb1f795ffe84.png",alt:"img"}})]),s._v(" "),n("p",[n("strong",[s._v("（3）MVP")])]),s._v(" "),n("p",[s._v("MVP 模式与 MVC 唯一不同的在于 Presenter 和 Controller。在 MVC 模式中使用观察者模式，来实现当 Model 层数据发生变化的时候，通知 View 层的更新。这样 View 层和 Model 层耦合在一起，当项目逻辑变得复杂的时候，可能会造成代码的混乱，并且可能会对代码的复用性造成一些问题。MVP 的模式通过使用 Presenter 来实现对 View 层和 Model 层的解耦。MVC 中的Controller 只知道 Model 的接口，因此它没有办法控制 View 层的更新，MVP 模式中，View 层的接口暴露给了 Presenter 因此可以在 Presenter 中将 Model 的变化和 View 的变化绑定在一起，以此来实现 View 和 Model 的同步更新。这样就实现了对 View 和 Model 的解耦，Presenter 还包含了其他的响应逻辑。")]),s._v(" "),n("h3",{attrs:{id:"_5-computed-和-watch-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-computed-和-watch-的区别"}},[s._v("#")]),s._v(" 5. Computed 和 Watch 的区别")]),s._v(" "),n("p",[n("strong",[s._v("对于Computed：")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("它支持缓存，只有依赖的数据发生了变化，才会重新计算")])]),s._v(" "),n("li",[n("p",[s._v("不支持异步，当Computed中有异步操作时，无法监听数据的变化")])]),s._v(" "),n("li",[n("p",[s._v("computed的值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的，也就是基于data声明过，或者父组件传递过来的props中的数据进行计算的。")])]),s._v(" "),n("li",[n("p",[s._v("如果一个属性是由其他属性计算而来的，这个属性依赖其他的属性，一般会使用computed")])]),s._v(" "),n("li",[n("p",[s._v("如果computed属性的属性值是函数，那么默认使用get方法，函数的返回值就是属性的属性值；在computed中，属性有一个get方法和一个set方法，当数据发生变化时，会调用set方法。")])])]),s._v(" "),n("p",[n("strong",[s._v("对于Watch：")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("它不支持缓存，数据变化时，它就会触发相应的操作")])]),s._v(" "),n("li",[n("p",[s._v("支持异步监听")])]),s._v(" "),n("li",[n("p",[s._v("监听的函数接收两个参数，第一个参数是最新的值，第二个是变化之前的值")])]),s._v(" "),n("li",[n("p",[s._v("当一个属性发生变化时，就需要执行相应的操作")])]),s._v(" "),n("li",[n("p",[s._v("监听数据必须是data中声明的或者父组件传递过来的props中的数据，当发生变化时，会触发其他操作，函数有两个的参数：")])]),s._v(" "),n("li",[n("p",[s._v("immediate：组件加载立即触发回调函数")])]),s._v(" "),n("li",[n("p",[s._v("deep：深度监听，发现数据内部的变化，在复杂数据类型中使用，例如数组中的对象发生变化。需要注意的是，deep无法监听到数组和对象内部的变化。")])])]),s._v(" "),n("p",[s._v("当想要执行异步或者昂贵的操作以响应不断的变化时，就需要使用watch。")]),s._v(" "),n("p",[n("strong",[s._v("总结：")])]),s._v(" "),n("ul",[n("li",[s._v("computed 计算属性 : 依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值。")]),s._v(" "),n("li",[s._v("watch 侦听器 : 更多的是"),n("strong",[s._v("观察")]),s._v("的作用，"),n("strong",[s._v("无缓存性")]),s._v("，类似于某些数据的监听回调，每当监听的数据变化时都会执行回调进行后续操作。")])]),s._v(" "),n("p",[n("strong",[s._v("运用场景：")])]),s._v(" "),n("ul",[n("li",[s._v("当需要进行数值计算,并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时都要重新计算。")]),s._v(" "),n("li",[s._v("当需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许执行异步操作 ( 访问一个 API )，限制执行该操作的频率，并在得到最终结果前，设置中间状态。这些都是计算属性无法做到的。")])]),s._v(" "),n("h3",{attrs:{id:"_6-computed-和-methods-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-computed-和-methods-的区别"}},[s._v("#")]),s._v(" 6. Computed 和 Methods 的区别")]),s._v(" "),n("p",[s._v("可以将同一函数定义为一个 method 或者一个计算属性。对于最终的结果，两种方式是相同的")]),s._v(" "),n("p",[n("strong",[s._v("不同点：")])]),s._v(" "),n("ul",[n("li",[s._v("computed: 计算属性是基于它们的依赖进行缓存的，只有在它的相关依赖发生改变时才会重新求值；")]),s._v(" "),n("li",[s._v("method 调用总会执行该函数。")])]),s._v(" "),n("h3",{attrs:{id:"_7-slot是什么-有什么作用-原理是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-slot是什么-有什么作用-原理是什么"}},[s._v("#")]),s._v(" 7. slot是什么？有什么作用？原理是什么？")]),s._v(" "),n("p",[s._v("slot又名插槽，是Vue的内容分发机制，组件内部的模板引擎使用slot元素作为承载分发内容的出口。插槽slot是子组件的一个模板标签元素，而这一个标签元素是否显示，以及怎么显示是由父组件决定的。slot又分三类，默认插槽，具名插槽和作用域插槽。")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("默认插槽：又名匿名查抄，当slot没有指定name属性值的时候一个默认显示插槽，一个组件内只有有一个匿名插槽。")])]),s._v(" "),n("li",[n("p",[s._v("具名插槽：带有具体名字的插槽，也就是带有name属性的slot，一个组件可以出现多个具名插槽。")])]),s._v(" "),n("li",[n("p",[s._v("作用域插槽：默认插槽、具名插槽的一个变体，可以是匿名插槽，也可以是具名插槽，该插槽的不同点是在子组件渲染作用域插槽时，可以将子组件内部的数据传递给父组件，让父组件根据子组件的传递过来的数据决定如何渲染该插槽。")])])]),s._v(" "),n("p",[s._v("实现原理：当子组件vm实例化时，获取到父组件传入的slot标签的内容，存放在"),n("code",[s._v("vm.$slot")]),s._v("中，默认插槽为"),n("code",[s._v("vm.$slot.default")]),s._v("，具名插槽为"),n("code",[s._v("vm.$slot.xxx")]),s._v("，xxx 为插槽名，当组件执行渲染函数时候，遇到slot标签，使用"),n("code",[s._v("$slot")]),s._v("中的内容进行替换，此时可以为插槽传递数据，若存在数据，则可称该插槽为作用域插槽。")]),s._v(" "),n("h3",{attrs:{id:"_8-过滤器的作用-如何实现一个过滤器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-过滤器的作用-如何实现一个过滤器"}},[s._v("#")]),s._v(" 8. 过滤器的作用，如何实现一个过滤器")]),s._v(" "),n("p",[s._v("根据过滤器的名称，过滤器是用来过滤数据的，在Vue中使用"),n("code",[s._v("filters")]),s._v("来过滤数据，"),n("code",[s._v("filters")]),s._v("不会修改数据，而是过滤数据，改变用户看到的输出（计算属性 "),n("code",[s._v("computed")]),s._v(" ，方法 "),n("code",[s._v("methods")]),s._v(" 都是通过修改数据来处理数据格式的输出显示）。")]),s._v(" "),n("p",[n("strong",[s._v("使用场景：")])]),s._v(" "),n("ul",[n("li",[s._v("需要格式化数据的情况，比如需要处理时间、价格等数据格式的输出 / 显示。")]),s._v(" "),n("li",[s._v("比如后端返回一个 "),n("strong",[s._v("年月日的日期字符串")]),s._v("，前端需要展示为 "),n("strong",[s._v("多少天前")]),s._v(" 的数据格式，此时就可以用"),n("code",[s._v("fliters")]),s._v("过滤器来处理数据。")])]),s._v(" "),n("p",[s._v("过滤器是一个函数，它会把表达式中的值始终当作函数的第一个参数。过滤器用在"),n("strong",[s._v("插值表达式")]),s._v(" "),n("code",[s._v("**"+s._s()+"**")]),s._v(" 和 "),n("code",[s._v("**v-bind**")]),s._v(" "),n("strong",[s._v("表达式")]),s._v(" 中，然后放在操作符“ "),n("code",[s._v("**|**")]),s._v(" ”后面进行指示。")]),s._v(" "),n("p",[s._v("例如，在显示金额，给商品价格添加单位：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("<li>商品价格：{{item.price | filterPrice}}</li>\n\n filters: {\n    filterPrice (price) {\n      return price ? ('￥' + price) : '--'\n    }\n  }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h3",{attrs:{id:"_9-如何保存页面的当前的状态"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-如何保存页面的当前的状态"}},[s._v("#")]),s._v(" 9. 如何保存页面的当前的状态")]),s._v(" "),n("p",[s._v("既然是要保持页面的状态（其实也就是组件的状态），那么会出现以下两种情况：")]),s._v(" "),n("ul",[n("li",[s._v("前组件会被卸载")]),s._v(" "),n("li",[s._v("前组件不会被卸载")])]),s._v(" "),n("p",[s._v("那么可以按照这两种情况分别得到以下方法：")]),s._v(" "),n("p",[n("strong",[s._v("组件会被卸载：")])]),s._v(" "),n("p",[n("strong",[s._v("（1）将状态存储在LocalStorage / SessionStorage")])]),s._v(" "),n("p",[s._v("只需要在组件即将被销毁的生命周期 "),n("code",[s._v("componentWillUnmount")]),s._v(" （react）中在 LocalStorage / SessionStorage 中把当前组件的 state 通过 JSON.stringify() 储存下来就可以了。在这里面需要注意的是组件更新状态的时机。")]),s._v(" "),n("p",[s._v("比如从 B 组件跳转到 A 组件的时候，A 组件需要更新自身的状态。但是如果从别的组件跳转到 B 组件的时候，实际上是希望 B 组件重新渲染的，也就是不要从 Storage 中读取信息。所以需要在 Storage 中的状态加入一个 flag 属性，用来控制 A 组件是否读取 Storage 中的状态。")]),s._v(" "),n("h5",{attrs:{id:"优点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),n("ul",[n("li",[s._v("兼容性好，不需要额外库或工具。")]),s._v(" "),n("li",[s._v("简单快捷，基本可以满足大部分需求。")])]),s._v(" "),n("h5",{attrs:{id:"缺点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),n("ul",[n("li",[s._v("状态通过 JSON 方法储存（相当于深拷贝），如果状态中有特殊情况（比如 Date 对象、Regexp 对象等）的时候会得到字符串而不是原来的值。（具体参考用 JSON 深拷贝的缺点）")]),s._v(" "),n("li",[s._v("如果 B 组件后退或者下一页跳转并不是前组件，那么 flag 判断会失效，导致从其他页面进入 A 组件页面时 A 组件会重新读取 Storage，会造成很奇怪的现象")])]),s._v(" "),n("p",[n("strong",[s._v("（2）路由传值")])]),s._v(" "),n("p",[s._v("通过 react-router 的 Link 组件的 prop —— to 可以实现路由间传递参数的效果。")]),s._v(" "),n("p",[s._v("在这里需要用到 state 参数，在 B 组件中通过 history.location.state 就可以拿到 state 值，保存它。返回 A 组件时再次携带 state 达到路由状态保持的效果。")]),s._v(" "),n("h5",{attrs:{id:"优点-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优点-2"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),n("ul",[n("li",[s._v("简单快捷，不会污染 LocalStorage / SessionStorage。")]),s._v(" "),n("li",[s._v("可以传递 Date、RegExp 等特殊对象（不用担心 JSON.stringify / parse 的不足）")])]),s._v(" "),n("h5",{attrs:{id:"缺点-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#缺点-2"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),n("ul",[n("li",[s._v("如果 A 组件可以跳转至多个组件，那么在每一个跳转组件内都要写相同的逻辑。")])]),s._v(" "),n("p",[n("strong",[s._v("组件不会被卸载：")])]),s._v(" "),n("p",[n("strong",[s._v("（1）单页面渲染")])]),s._v(" "),n("p",[s._v("要切换的组件作为子组件全屏渲染，父组件中正常储存页面状态。")]),s._v(" "),n("h5",{attrs:{id:"优点-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优点-3"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),n("ul",[n("li",[s._v("代码量少")]),s._v(" "),n("li",[s._v("不需要考虑状态传递过程中的错误")])]),s._v(" "),n("h5",{attrs:{id:"缺点-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#缺点-3"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("增加 A 组件维护成本")])]),s._v(" "),n("li",[n("p",[s._v("需要传入额外的 prop 到 B 组件")])]),s._v(" "),n("li",[n("p",[s._v("无法利用路由定位页面")])])]),s._v(" "),n("p",[s._v("除此之外，在Vue中，还可以是用keep-alive来缓存页面，当组件在keep-alive内被切换时组件的"),n("strong",[s._v("activated、deactivated")]),s._v("这两个生命周期钩子函数会被执行")]),s._v(" "),n("p",[s._v("被包裹在keep-alive中的组件的状态将会被保留：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<keep-alive>\n\t<router-view v-if="$route.meta.keepAlive"></router-view>\n</kepp-alive>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("router.js")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("{\n  path: '/',\n  name: 'xxx',\n  component: ()=>import('../src/views/xxx.vue'),\n  meta:{\n    keepAlive: true // 需要被缓存\n  }\n},\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h3",{attrs:{id:"_10-常见的事件修饰符及其作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-常见的事件修饰符及其作用"}},[s._v("#")]),s._v(" 10. 常见的事件修饰符及其作用")]),s._v(" "),n("ul",[n("li",[n("p",[n("code",[s._v(".stop")]),s._v("：等同于 JavaScript 中的 "),n("code",[s._v("event.stopPropagation()")]),s._v(" ，防止事件冒泡；")])]),s._v(" "),n("li",[n("p",[n("code",[s._v(".prevent")]),s._v(" ：等同于 JavaScript 中的 "),n("code",[s._v("event.preventDefault()")]),s._v(" ，防止执行预设的行为（如果事件可取消，则取消该事件，而不停止事件的进一步传播）；")])]),s._v(" "),n("li",[n("p",[n("code",[s._v(".capture")]),s._v(" ：与事件冒泡的方向相反，事件捕获由外到内；")])]),s._v(" "),n("li",[n("p",[n("code",[s._v(".self")]),s._v(" ：只会触发自己范围内的事件，不包含子元素；")])]),s._v(" "),n("li",[n("p",[n("code",[s._v(".once")]),s._v(" ：只会触发一次。")])])]),s._v(" "),n("h3",{attrs:{id:"_11-v-if、v-show、v-html-的原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-v-if、v-show、v-html-的原理"}},[s._v("#")]),s._v(" 11. v-if、v-show、v-html 的原理")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("v-if会调用addIfCondition方法，生成vnode的时候会忽略对应节点，render的时候就不会渲染；")])]),s._v(" "),n("li",[n("p",[s._v("v-show会生成vnode，render的时候也会渲染成真实节点，只是在render过程中会在节点的属性中修改show属性值，也就是常说的display；")])]),s._v(" "),n("li",[n("p",[s._v("v-html会先移除节点下的所有节点，调用html方法，通过addProp添加innerHTML属性，归根结底还是设置innerHTML为v-html的值。")])])]),s._v(" "),n("h3",{attrs:{id:"_13-v-if和v-show的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-v-if和v-show的区别"}},[s._v("#")]),s._v(" 13. v-if和v-show的区别")]),s._v(" "),n("ul",[n("li",[n("p",[n("strong",[s._v("手段")]),s._v("：v-if是动态的向DOM树内添加或者删除DOM元素；v-show是通过设置DOM元素的display样式属性控制显隐；")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("编译过程")]),s._v("：v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；v-show只是简单的基于css切换；")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("编译条件")]),s._v("：v-if是惰性的，如果初始条件为假，则什么也不做；只有在条件第一次变为真时才开始局部编译; v-show是在任何条件下，无论首次条件是否为真，都被编译，然后被缓存，而且DOM元素保留；")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("性能消耗")]),s._v("：v-if有更高的切换消耗；v-show有更高的初始渲染消耗；")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("使用场景")]),s._v("：v-if适合运营条件不大可能改变；v-show适合频繁切换。")])])]),s._v(" "),n("h3",{attrs:{id:"_14-v-model-是如何实现的-语法糖实际是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14-v-model-是如何实现的-语法糖实际是什么"}},[s._v("#")]),s._v(" 14. v-model 是如何实现的，语法糖实际是什么？")]),s._v(" "),n("p",[n("strong",[s._v("（1）作用在表单元素上")])]),s._v(" "),n("p",[s._v("动态绑定了 input 的 value 指向了 messgae 变量，并且在触发 input 事件的时候去动态把 message设置为目标值：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<input v-model="sth" />\n//  等同于\n<input \n    v-bind:value="message" \n    v-on:input="message=$event.target.value"\n>\n//$event 指代当前触发的事件对象;\n//$event.target 指代当前触发的事件对象的dom;\n//$event.target.value 就是当前dom的value值;\n//在@input方法中，value => sth;\n//在:value中,sth => value;\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[n("strong",[s._v("（2）作用在组件上")])]),s._v(" "),n("p",[s._v("在自定义组件中，v-model 默认会利用名为 value 的 prop和名为 input 的事件")]),s._v(" "),n("p",[s._v("**本质是一个父子组件通信的语法糖，通过prop和$.emit实现。**因此父组件 v-model 语法糖本质上可以修改为：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<child :value="message"  @input="function(e){message = e}"></child>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("在组件的实现中，可以通过 v-model属性来配置子组件接收的prop名称，以及派发的事件名称。")]),s._v(" "),n("p",[s._v("例子：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// 父组件\n<aa-input v-model="aa"></aa-input>\n// 等价于\n<aa-input v-bind:value="aa" v-on:input="aa=$event.target.value"></aa-input>\n\n// 子组件：\n<input v-bind:value="aa" v-on:input="onmessage"></aa-input>\n\nprops:{value:aa,}\nmethods:{\n    onmessage(e){\n        $emit(\'input\',e.target.value)\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("默认情况下，一个组件上的v-model 会把 value 用作 prop且把 input 用作 event。但是一些输入类型比如单选框和复选框按钮可能想使用 value prop 来达到不同的目的。使用 model 选项可以回避这些情况产生的冲突。js 监听input 输入框输入数据改变，用oninput，数据改变以后就会立刻出发这个事件。通过input事件把数据$emit 出去，在父组件接受。父组件设置v-model的值为input $emit过来的值。")]),s._v(" "),n("h3",{attrs:{id:"_15-v-model-可以被用在自定义组件上吗-如果可以-如何使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_15-v-model-可以被用在自定义组件上吗-如果可以-如何使用"}},[s._v("#")]),s._v(" 15. v-model 可以被用在自定义组件上吗？如果可以，如何使用？")]),s._v(" "),n("p",[s._v("可以。v-model 实际上是一个语法糖，如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<input v-model="searchText">\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("实际上相当于：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<input\n  v-bind:value="searchText"\n  v-on:input="searchText = $event.target.value"\n>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("用在自定义组件上也是同理：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<custom-input v-model="searchText">\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("相当于：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<custom-input\n  v-bind:value="searchText"\n  v-on:input="searchText = $event"\n></custom-input>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("显然，custom-input 与父组件的交互如下：")]),s._v(" "),n("ol",[n("li",[s._v("父组件将"),n("code",[s._v("searchText")]),s._v("变量传入custom-input 组件，使用的 prop 名为"),n("code",[s._v("value")]),s._v("；")]),s._v(" "),n("li",[s._v("custom-input 组件向父组件传出名为"),n("code",[s._v("input")]),s._v("的事件，父组件将接收到的值赋值给"),n("code",[s._v("searchText")]),s._v("；")])]),s._v(" "),n("p",[s._v("所以，custom-input 组件的实现应该类似于这样：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Vue.component('custom-input', {\n  props: ['value'],\n  template: `\n    <input\n      v-bind:value=\"value\"\n      v-on:input=\"$emit('input', $event.target.value)\"\n    >\n  `\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h3",{attrs:{id:"_16-data为什么是一个函数而不是对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_16-data为什么是一个函数而不是对象"}},[s._v("#")]),s._v(" 16. data为什么是一个函数而不是对象")]),s._v(" "),n("p",[s._v("Vue组件可能存在多个实例，如果使用对象形式定义data，则会导致它们共用一个data对象，那么状态变更将会影响所有组件实例，这是不合理的；采用函数形式定义，在initData时会将其作为工厂函数返回全新data对象，有效规避多实例之间状态污染问题。而在Vue根实例创建过程中则不存在该限制，也是因为根实例只能有一个，不需要担心这种情况。")]),s._v(" "),n("h3",{attrs:{id:"_17-对keep-alive的理解-它是如何实现的-具体缓存的是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_17-对keep-alive的理解-它是如何实现的-具体缓存的是什么"}},[s._v("#")]),s._v(" 17. 对keep-alive的理解，它是如何实现的，具体缓存的是什么？")]),s._v(" "),n("p",[s._v("如果需要在组件切换的时候，保存一些组件的状态防止多次渲染，就可以使用 keep-alive 组件包裹需要保存的组件。")]),s._v(" "),n("p",[s._v("**（1）**"),n("strong",[s._v("keep-alive")])]),s._v(" "),n("p",[s._v("keep-alive有以下三个属性：")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("include 字符串或正则表达式，只有名称匹配的组件会被匹配；")])]),s._v(" "),n("li",[n("p",[s._v("exclude 字符串或正则表达式，任何名称匹配的组件都不会被缓存；")])]),s._v(" "),n("li",[n("p",[s._v("max 数字，最多可以缓存多少组件实例。")])])]),s._v(" "),n("p",[s._v("注意：keep-alive 包裹动态组件时，会缓存不活动的组件实例。")]),s._v(" "),n("p",[n("strong",[s._v("主要流程")])]),s._v(" "),n("ol",[n("li",[n("p",[s._v("判断组件 name ，不在 include 或者在 exclude 中，直接返回 vnode，说明该组件不被缓存。")])]),s._v(" "),n("li",[n("p",[s._v("获取组件实例 key ，如果有获取实例的 key，否则重新生成。")])]),s._v(" "),n("li",[n("p",[s._v('key生成规则，cid +"∶∶"+ tag ，仅靠cid是不够的，因为相同的构造函数可以注册为不同的本地组件。')])]),s._v(" "),n("li",[n("p",[s._v("如果缓存对象内存在，则直接从缓存对象中获取组件实例给 vnode ，不存在则添加到缓存对象中。 5.最大缓存数量，当缓存组件数量超过 max 值时，清除 keys 数组内第一个组件。")])])]),s._v(" "),n("p",[n("strong",[s._v("（2）keep-alive 的实现")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const patternTypes: Array<Function> = [String, RegExp, Array] // 接收：字符串，正则，数组\n\nexport default {\n  name: 'keep-alive',\n  abstract: true, // 抽象组件，是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在父组件链中。\n\n  props: {\n    include: patternTypes, // 匹配的组件，缓存\n    exclude: patternTypes, // 不去匹配的组件，不缓存\n    max: [String, Number], // 缓存组件的最大实例数量, 由于缓存的是组件实例（vnode），数量过多的时候，会占用过多的内存，可以用max指定上限\n  },\n\n  created() {\n    // 用于初始化缓存虚拟DOM数组和vnode的key\n    this.cache = Object.create(null)\n    this.keys = []\n  },\n\n  destroyed() {\n    // 销毁缓存cache的组件实例\n    for (const key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys)\n    }\n  },\n\n  mounted() {\n    // prune 削减精简[v.]\n    // 去监控include和exclude的改变，根据最新的include和exclude的内容，来实时削减缓存的组件的内容\n    this.$watch('include', (val) => {\n      pruneCache(this, (name) => matches(val, name))\n    })\n    this.$watch('exclude', (val) => {\n      pruneCache(this, (name) => !matches(val, name))\n    })\n  },\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br")])]),n("p",[n("strong",[s._v("render函数：")])]),s._v(" "),n("ol",[n("li",[n("p",[s._v("会在 keep-alive 组件内部去写自己的内容，所以可以去获取默认 slot 的内容，然后根据这个去获取组件")])]),s._v(" "),n("li",[n("p",[s._v("keep-alive 只对第一个组件有效，所以获取第一个子组件。")])]),s._v(" "),n("li",[n("p",[s._v("和 keep-alive 搭配使用的一般有：动态组件 和router-view")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("render () {\n  //\n  function getFirstComponentChild (children: ?Array<VNode>): ?VNode {\n    if (Array.isArray(children)) {\n  for (let i = 0; i < children.length; i++) {\n    const c = children[i]\n    if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n      return c\n    }\n  }\n  }\n  }\n  const slot = this.$slots.default // 获取默认插槽\n  const vnode: VNode = getFirstComponentChild(slot)// 获取第一个子组件\n  const componentOptions: ?VNodeComponentOptions = vnode && vnode.componentOptions // 组件参数\n  if (componentOptions) { // 是否有组件参数\n    // check pattern\n    const name: ?string = getComponentName(componentOptions) // 获取组件名\n    const { include, exclude } = this\n    if (\n      // not included\n      (include && (!name || !matches(include, name))) ||\n      // excluded\n      (exclude && name && matches(exclude, name))\n    ) {\n      // 如果不匹配当前组件的名字和include以及exclude\n      // 那么直接返回组件的实例\n      return vnode\n    }\n\n    const { cache, keys } = this\n\n    // 获取这个组件的key\n    const key: ?string = vnode.key == null\n      // same constructor may get registered as different local components\n      // so cid alone is not enough (#3269)\n      ? componentOptions.Ctor.cid + (componentOptions.tag ? `::${componentOptions.tag}` : '')\n      : vnode.key\n\n    if (cache[key]) {\n      // LRU缓存策略执行\n      vnode.componentInstance = cache[key].componentInstance // 组件初次渲染的时候componentInstance为undefined\n\n      // make current key freshest\n      remove(keys, key)\n      keys.push(key)\n      // 根据LRU缓存策略执行，将key从原来的位置移除，然后将这个key值放到最后面\n    } else {\n      // 在缓存列表里面没有的话，则加入，同时判断当前加入之后，是否超过了max所设定的范围，如果是，则去除\n      // 使用时间间隔最长的一个\n      cache[key] = vnode\n      keys.push(key)\n      // prune oldest entry\n      if (this.max && keys.length > parseInt(this.max)) {\n        pruneCacheEntry(cache, keys[0], keys, this._vnode)\n      }\n    }\n    // 将组件的keepAlive属性设置为true\n    vnode.data.keepAlive = true // 作用：判断是否要执行组件的created、mounted生命周期函数\n  }\n  return vnode || (slot && slot[0])\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br")])]),n("p",[s._v("keep-alive 具体是通过 cache 数组缓存所有组件的 vnode 实例。当 cache 内原有组件被使用时会将该组件 key 从 keys 数组中删除，然后 push 到 keys数组最后，以便清除最不常用组件。")]),s._v(" "),n("p",[n("strong",[s._v("实现步骤：")])]),s._v(" "),n("ol",[n("li",[n("p",[s._v("获取 keep-alive 下第一个子组件的实例对象，通过他去获取这个组件的组件名")])]),s._v(" "),n("li",[n("p",[s._v("通过当前组件名去匹配原来 include 和 exclude，判断当前组件是否需要缓存，不需要缓存，直接返回当前组件的实例vNode")])]),s._v(" "),n("li",[n("p",[s._v("需要缓存，判断他当前是否在缓存数组里面：")])])]),s._v(" "),n("ul",[n("li",[s._v("存在，则将他原来位置上的 key 给移除，同时将这个组件的 key 放到数组最后面（LRU）")]),s._v(" "),n("li",[s._v("不存在，将组件 key 放入数组，然后判断当前 key数组是否超过 max 所设置的范围，超过，那么削减未使用时间最长的一个组件的 key")])]),s._v(" "),n("ol",[n("li",[s._v("最后将这个组件的 keepAlive 设置为 true")])]),s._v(" "),n("p",[n("strong",[s._v("（3）keep-alive 本身的创建过程和 patch 过程")])]),s._v(" "),n("p",[s._v("缓存渲染的时候，会根据 vnode.componentInstance（首次渲染 vnode.componentInstance 为 undefined） 和 keepAlive 属性判断不会执行组件的 created、mounted 等钩子函数，而是对缓存的组件执行 patch 过程∶ 直接把缓存的 DOM 对象直接插入到目标元素中，完成了数据更新的情况下的渲染过程。")]),s._v(" "),n("p",[n("strong",[s._v("首次渲染")])]),s._v(" "),n("ul",[n("li",[s._v("组件的首次渲染∶判断组件的 abstract 属性，才往父组件里面挂载 DOM")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// core/instance/lifecycle\nfunction initLifecycle (vm: Component) {\n  const options = vm.$options\n\n  // locate first non-abstract parent\n  let parent = options.parent\n  if (parent && !options.abstract) { // 判断组件的abstract属性，才往父组件里面挂载DOM\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent\n    }\n    parent.$children.push(vm)\n  }\n\n  vm.$parent = parent\n  vm.$root = parent ? parent.$root : vm\n\n  vm.$children = []\n  vm.$refs = {}\n\n  vm._watcher = null\n  vm._inactive = null\n  vm._directInactive = false\n  vm._isMounted = false\n  vm._isDestroyed = false\n  vm._isBeingDestroyed = false\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("ul",[n("li",[s._v("判断当前 keepAlive 和 componentInstance 是否存在来判断是否要执行组件 prepatch 还是执行创建 componentlnstance")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// core/vdom/create-component\ninit (vnode: VNodeWithData, hydrating: boolean): ?boolean {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) { // componentInstance在初次是undefined!!!\n      // kept-alive components, treat as a patch\n      const mountedNode: any = vnode // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode) // prepatch函数执行的是组件更新的过程\n    } else {\n      const child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      )\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating)\n    }\n  },\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[s._v("prepatch 操作就不会在执行组件的 mounted 和 created 生命周期函数，而是直接将 DOM 插入")]),s._v(" "),n("p",[n("strong",[s._v("（4）LRU （least recently used）缓存策略")])]),s._v(" "),n("p",[s._v("LRU 缓存策略∶ 从内存中找出最久未使用的数据并置换新的数据。")]),s._v(" "),n("p",[s._v('LRU（Least rencently used）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是**"如果数据最近被访问过，那么将来被访问的几率也更高"**。 最常见的实现是使用一个链表保存缓存数据，详细算法实现如下∶')]),s._v(" "),n("ul",[n("li",[n("p",[s._v("新数据插入到链表头部")])]),s._v(" "),n("li",[n("p",[s._v("每当缓存命中（即缓存数据被访问），则将数据移到链表头部")])]),s._v(" "),n("li",[n("p",[s._v("链表满的时候，将链表尾部的数据丢弃。")])])]),s._v(" "),n("h3",{attrs:{id:"_18-nexttick-原理及作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_18-nexttick-原理及作用"}},[s._v("#")]),s._v(" 18. $nextTick 原理及作用")]),s._v(" "),n("p",[s._v("Vue 的 nextTick 其本质是对 JavaScript 执行原理 EventLoop 的一种应用。")]),s._v(" "),n("p",[s._v("nextTick 的核心是利用了如 Promise 、MutationObserver、setImmediate、setTimeout的原生 JavaScript 方法来模拟对应的微/宏任务的实现，本质是为了利用 JavaScript 的这些异步回调任务队列来实现 Vue 框架中自己的异步回调队列。")]),s._v(" "),n("p",[s._v("nextTick 不仅是 Vue 内部的异步队列的调用方法，同时也允许开发者在实际项目中使用这个方法来满足实际应用中对 DOM 更新数据时机的后续逻辑处理")]),s._v(" "),n("p",[s._v("nextTick 是典型的将底层 JavaScript 执行原理应用到具体案例中的示例，引入异步更新队列机制的原因∶")]),s._v(" "),n("ul",[n("li",[s._v("如果是同步更新，则多次对一个或多个属性赋值，会频繁触发 UI/DOM 的渲染，可以减少一些无用渲染")]),s._v(" "),n("li",[s._v("同时由于 VirtualDOM 的引入，每一次状态发生变化后，状态变化的信号会发送给组件，组件内部使用 VirtualDOM 进行计算得出需要更新的具体的 DOM 节点，然后对 DOM 进行更新操作，每次更新状态后的渲染过程需要更多的计算，而这种无用功也将浪费更多的性能，所以异步渲染变得更加至关重要")])]),s._v(" "),n("p",[s._v("Vue采用了数据驱动视图的思想，但是在一些情况下，仍然需要操作DOM。有时候，可能遇到这样的情况，DOM1的数据发生了变化，而DOM2需要从DOM1中获取数据，那这时就会发现DOM2的视图并没有更新，这时就需要用到了"),n("code",[s._v("nextTick")]),s._v("了。")]),s._v(" "),n("p",[s._v("由于Vue的DOM操作是异步的，所以，在上面的情况中，就要将DOM2获取数据的操作写在"),n("code",[s._v("$nextTick")]),s._v("中。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("this.$nextTick(() => {\n    // 获取数据的操作...\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("所以，在以下情况下，会用到nextTick：")]),s._v(" "),n("ul",[n("li",[s._v("在数据变化后执行的某个操作，而这个操作需要使用随数据变化而变化的DOM结构的时候，这个操作就需要方法在"),n("code",[s._v("nextTick()")]),s._v("的回调函数中。")]),s._v(" "),n("li",[s._v("在vue生命周期中，如果在created()钩子进行DOM操作，也一定要放在"),n("code",[s._v("nextTick()")]),s._v("的回调函数中。")])]),s._v(" "),n("p",[s._v("因为在created()钩子函数中，页面的DOM还未渲染，这时候也没办法操作DOM，所以，此时如果想要操作DOM，必须将操作的代码放在"),n("code",[s._v("nextTick()")]),s._v("的回调函数中。")]),s._v(" "),n("h3",{attrs:{id:"_19-vue-中给-data-中的对象属性添加一个新的属性时会发生什么-如何解决"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_19-vue-中给-data-中的对象属性添加一个新的属性时会发生什么-如何解决"}},[s._v("#")]),s._v(" "),n("strong",[s._v("19. Vue 中给 data 中的对象属性添加一个新的属性时会发生什么？如何解决？")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<template> \n   <div>\n      <ul>\n         <li v-for="value in obj" :key="value"> {{value}} </li> \n      </ul> \n      <button @click="addObjB">添加 obj.b</button> \n   </div>\n</template>\n\n<script>\n    export default { \n       data () { \n          return { \n              obj: { \n                  a: \'obj.a\' \n              } \n          } \n       },\n       methods: { \n          addObjB () { \n              this.obj.b = \'obj.b\' \n              console.log(this.obj) \n          } \n      }\n   }\n<\/script>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("p",[s._v("点击 button 会发现，obj.b 已经成功添加，但是视图并未刷新。这是因为在Vue实例创建时，obj.b并未声明，因此就没有被Vue转换为响应式的属性，自然就不会触发视图的更新，这时就需要使用Vue的全局 api "),n("strong",[s._v("$set()：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("addObjB () (\n   this.$set(this.obj, 'b', 'obj.b')\n   console.log(this.obj)\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("$set()方法相当于手动的去把obj.b处理成一个响应式的属性，此时视图也会跟着改变了。")]),s._v(" "),n("h3",{attrs:{id:"_20-vue中封装的数组方法有哪些-其如何实现页面更新"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_20-vue中封装的数组方法有哪些-其如何实现页面更新"}},[s._v("#")]),s._v(" 20. Vue中封装的数组方法有哪些，其如何实现页面更新")]),s._v(" "),n("p",[s._v("在Vue中，对响应式处理利用的是Object.defineProperty对数据进行拦截，而这个方法并不能监听到数组内部变化，数组长度变化，数组的截取变化等，所以需要对这些操作进行hack，让Vue能监听到其中的变化。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1500604/1604019269329-d88e91cf-b33d-4b2d-b014-e5739e9b7dbc.png",alt:"img"}})]),s._v(" "),n("p",[s._v("那Vue是如何实现让这些数组方法实现元素的实时更新的呢，下面是Vue中对这些方法的封装：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// 缓存数组原型\nconst arrayProto = Array.prototype;\n// 实现 arrayMethods.__proto__ === Array.prototype\nexport const arrayMethods = Object.create(arrayProto);\n// 需要进行功能拓展的方法\nconst methodsToPatch = [\n  "push",\n  "pop",\n  "shift",\n  "unshift",\n  "splice",\n  "sort",\n  "reverse"\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function(method) {\n  // 缓存原生数组方法\n  const original = arrayProto[method];\n  def(arrayMethods, method, function mutator(...args) {\n    // 执行并缓存原生数组功能\n    const result = original.apply(this, args);\n    // 响应式处理\n    const ob = this.__ob__;\n    let inserted;\n    switch (method) {\n    // push、unshift会新增索引，所以要手动observer\n      case "push":\n      case "unshift":\n        inserted = args;\n        break;\n      // splice方法，如果传入了第三个参数，也会有索引加入，也要手动observer。\n      case "splice":\n        inserted = args.slice(2);\n        break;\n    }\n    // \n    if (inserted) ob.observeArray(inserted);// 获取插入的值，并设置响应式监听\n    // notify change\n    ob.dep.notify();// 通知依赖更新\n    // 返回原生数组方法的执行结果\n    return result;\n  });\n});\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br")])]),n("p",[s._v("简单来说就是，重写了数组中的那些原生方法，首先获取到这个数组的__ob__，也就是它的Observer对象，如果有新的值，就调用observeArray继续对新的值观察变化（也就是通过"),n("code",[s._v("target__proto__ == arrayMethods")]),s._v("来改变了数组实例的型），然后手动调用notify，通知渲染watcher，执行update。")]),s._v(" "),n("h3",{attrs:{id:"_21-vue-单页应用与多页应用的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_21-vue-单页应用与多页应用的区别"}},[s._v("#")]),s._v(" 21. Vue 单页应用与多页应用的区别")]),s._v(" "),n("p",[n("strong",[s._v("概念：")])]),s._v(" "),n("ul",[n("li",[s._v("SPA单页面应用（SinglePage Web Application），指只有一个主页面的应用，一开始只需要加载一次js、css等相关资源。所有内容都包含在主页面，对每一个功能模块组件化。单页应用跳转，就是切换相关组件，仅仅刷新局部资源。")]),s._v(" "),n("li",[s._v("MPA多页面应用 （MultiPage Application），指有多个独立页面的应用，每个页面必须重复加载js、css等相关资源。多页应用跳转，需要整页资源刷新。")])]),s._v(" "),n("p",[n("strong",[s._v("区别：")])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/jpeg/1500604/1609521413572-54d0bd0f-8ed6-4438-997a-c890e4cd9c5e.jpeg",alt:"img"}})]),s._v(" "),n("h3",{attrs:{id:"_22-vue-template-到-render-的过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_22-vue-template-到-render-的过程"}},[s._v("#")]),s._v(" 22. Vue template 到 render 的过程")]),s._v(" "),n("p",[s._v("vue的模版编译过程主要如下："),n("strong",[s._v("template -> ast -> render函数")])]),s._v(" "),n("p",[s._v("vue 在模版编译版本的码中会执行 compileToFunctions 将template转化为render函数：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 将模板编译为render函数\nconst { render, staticRenderFns } = compileToFunctions(template,options//省略}, this)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("CompileToFunctions中的主要逻辑如下∶")]),s._v(" "),n("p",[n("strong",[s._v("（1）调用parse方法将template转化为ast（抽象语法树）")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("constast = parse(template.trim(), options)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[n("strong",[s._v("parse的目标")]),s._v("：把tamplate转换为AST树，它是一种用 JavaScript对象的形式来描述整个模板。")]),s._v(" "),n("li",[n("strong",[s._v("解析过程")]),s._v("：利用正则表达式顺序解析模板，当解析到开始标签、闭合标签、文本的时候都会分别执行对应的 回调函数，来达到构造AST树的目的。")])]),s._v(" "),n("p",[s._v("AST元素节点总共三种类型：type为1表示普通元素、2为表达式、3为纯文本")]),s._v(" "),n("p",[n("strong",[s._v("（2）对静态节点做优化")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("optimize(ast,options)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("这个过程主要分析出哪些是静态节点，给其打一个标记，为后续更新渲染可以直接跳过静态节点做优化")]),s._v(" "),n("p",[s._v("深度遍历AST，查看每个子树的节点元素是否为静态节点或者静态节点根。如果为静态节点，他们生成的DOM永远不会改变，这对运行时模板更新起到了极大的优化作用。")]),s._v(" "),n("p",[n("strong",[s._v("（3）生成代码")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const code = generate(ast, options)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("generate将ast抽象语法树编译成 render字符串并将静态部分放到 staticRenderFns 中，最后通过 "),n("code",[s._v("new Function(`` render``)")]),s._v(" 生成render函数。")]),s._v(" "),n("h3",{attrs:{id:"_23-vue-data-中某一个属性的值发生改变后-视图会立即同步执行重新渲染吗"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_23-vue-data-中某一个属性的值发生改变后-视图会立即同步执行重新渲染吗"}},[s._v("#")]),s._v(" 23. Vue data 中某一个属性的值发生改变后，视图会立即同步执行重新渲染吗？")]),s._v(" "),n("p",[s._v("不会立即同步执行重新渲染。Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，而是按一定的策略进行 DOM 的更新。Vue 在更新 DOM 时是异步执行的。只要侦听到数据变化， Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。")]),s._v(" "),n("p",[s._v("如果同一个watcher被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。然后，在下一个的事件循环tick中，Vue 刷新队列并执行实际（已去重的）工作。")]),s._v(" "),n("h3",{attrs:{id:"_24-简述-mixin、extends-的覆盖逻辑"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_24-简述-mixin、extends-的覆盖逻辑"}},[s._v("#")]),s._v(" 24. 简述 mixin、extends 的覆盖逻辑")]),s._v(" "),n("p",[n("strong",[s._v("（1）mixin 和 extends")])]),s._v(" "),n("p",[s._v("mixin 和 extends均是用于合并、拓展组件的，两者均通过 mergeOptions 方法实现合并。")]),s._v(" "),n("ul",[n("li",[s._v("mixins 接收一个混入对象的数组，其中混入对象可以像正常的实例对象一样包含实例选项，这些选项会被合并到最终的选项中。Mixin 钩子按照传入顺序依次调用，并在调用组件自身的钩子之前被调用。")]),s._v(" "),n("li",[s._v("extends 主要是为了便于扩展单文件组件，接收一个对象或构造函数。")])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/jpeg/1500604/1609518480272-8cb1af01-a4a8-4d54-91bb-5546aafac510.jpeg",alt:"img"}})]),s._v(" "),n("p",[n("strong",[s._v("（2）mergeOptions 的执行过程")])]),s._v(" "),n("ul",[n("li",[s._v("规范化选项（normalizeProps、normalizelnject、normalizeDirectives)")]),s._v(" "),n("li",[s._v("对未合并的选项，进行判断")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("if(!child._base) {\n    if(child.extends) {\n        parent = mergeOptions(parent, child.extends, vm)\n    }\n    if(child.mixins) {\n        for(let i = 0, l = child.mixins.length; i < l; i++){\n            parent = mergeOptions(parent, child.mixins[i], vm)\n        }\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("ul",[n("li",[s._v("合并处理。根据一个通用 Vue 实例所包含的选项进行分类逐一判断合并，如 props、data、 methods、watch、computed、生命周期等，将合并结果存储在新定义的 options 对象里。")]),s._v(" "),n("li",[s._v("返回合并结果 options。")])]),s._v(" "),n("h3",{attrs:{id:"_25-描述下vue自定义指令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_25-描述下vue自定义指令"}},[s._v("#")]),s._v(" 25. 描述下Vue自定义指令")]),s._v(" "),n("p",[s._v("在 Vue2.0 中，代码复用和抽象的主要形式是组件。然而，有的情况下，你仍然需要对普通 DOM 元素进行底层操作，这时候就会用到自定义指令。")]),s._v(" "),n("p",[s._v("一般需要对DOM元素进行底层操作时使用，尽量只用来操作 DOM展示，不修改内部的值。当使用自定义指令直接修改 value 值时绑定v-model的值也不会同步更新；如必须修改可以在自定义指令中使用keydown事件，在vue组件中使用 change事件，回调中修改vue数据;")]),s._v(" "),n("p",[n("strong",[s._v("（1）自定义指令基本内容")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("全局定义："),n("code",[s._v('Vue.directive("focus",{})')])])]),s._v(" "),n("li",[n("p",[s._v("局部定义："),n("code",[s._v("directives:{focus:{}}")])])]),s._v(" "),n("li",[n("p",[s._v("钩子函数：指令定义对象提供钩子函数")])])]),s._v(" "),n("p",[s._v("​      o bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。")]),s._v(" "),n("p",[s._v("​      o inSerted：被绑定元素插入父节点时调用（仅保证父节点存在，但不一定已被插入文档中）。")]),s._v(" "),n("p",[s._v("​      o update：所在组件的VNode更新时调用，但是可能发生在其子VNode更新之前调用。指令的值可能发生了改变，也可能没有。但是可以通过比较更新前后的值来忽略不必要的模板更新。")]),s._v(" "),n("p",[s._v("​      o ComponentUpdate：指令所在组件的 VNode及其子VNode全部更新后调用。")]),s._v(" "),n("p",[s._v("​      o unbind：只调用一次，指令与元素解绑时调用。")]),s._v(" "),n("ul",[n("li",[s._v("钩子函数参数")])]),s._v(" "),n("p",[s._v("​      o el：绑定元素")]),s._v(" "),n("p",[s._v("​      o bing： 指令核心对象，描述指令全部信息属性")]),s._v(" "),n("p",[s._v("​      o name")]),s._v(" "),n("p",[s._v("​      o value")]),s._v(" "),n("p",[s._v("​      o oldValue")]),s._v(" "),n("p",[s._v("​      o expression")]),s._v(" "),n("p",[s._v("​      o arg")]),s._v(" "),n("p",[s._v("​      o modifers")]),s._v(" "),n("p",[s._v("​      o vnode  虚拟节点")]),s._v(" "),n("p",[s._v("​      o oldVnode：上一个虚拟节点（更新钩子函数中才有用）")]),s._v(" "),n("p",[n("strong",[s._v("（2）使用场景")])]),s._v(" "),n("ul",[n("li",[s._v("普通DOM元素进行底层操作的时候，可以使用自定义指令")]),s._v(" "),n("li",[s._v("自定义指令是用来操作DOM的。尽管Vue推崇数据驱动视图的理念，但并非所有情况都适合数据驱动。自定义指令就是一种有效的补充和扩展，不仅可用于定义任何的DOM操作，并且是可复用的。")])]),s._v(" "),n("p",[n("strong",[s._v("（3）使用案例")])]),s._v(" "),n("p",[s._v("初级应用：")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("鼠标聚焦")])]),s._v(" "),n("li",[n("p",[s._v("下拉菜单")])]),s._v(" "),n("li",[n("p",[s._v("相对时间转换")])]),s._v(" "),n("li",[n("p",[s._v("滚动动画")])])]),s._v(" "),n("p",[s._v("高级应用：")]),s._v(" "),n("ul",[n("li",[s._v("自定义指令实现图片懒加载")]),s._v(" "),n("li",[s._v("自定义指令集成第三方插件")])]),s._v(" "),n("h3",{attrs:{id:"_26-子组件可以直接改变父组件的数据吗"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_26-子组件可以直接改变父组件的数据吗"}},[s._v("#")]),s._v(" 26. 子组件可以直接改变父组件的数据吗？")]),s._v(" "),n("p",[s._v("子组件不可以直接改变父组件的数据。这样做主要是为了维护父子组件的单向数据流。每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。如果这样做了，Vue 会在浏览器的控制台中发出警告。")]),s._v(" "),n("p",[s._v("Vue提倡单向数据流，即父级 props 的更新会流向子组件，但是反过来则不行。这是为了防止意外的改变父组件状态，使得应用的数据流变得难以理解，导致数据流混乱。如果破坏了单向数据流，当应用复杂时，debug 的成本会非常高。")]),s._v(" "),n("p",[n("strong",[s._v("只能通过")]),s._v(" "),n("code",[s._v("**$emit**")]),s._v(" "),n("strong",[s._v("派发一个自定义事件，父组件接收到后，由父组件修改。")])]),s._v(" "),n("h3",{attrs:{id:"_27-vue是如何收集依赖的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_27-vue是如何收集依赖的"}},[s._v("#")]),s._v(" 27. Vue是如何收集依赖的？")]),s._v(" "),n("p",[s._v("在初始化 Vue 的每个组件时，会对组件的 data 进行初始化，就会将由普通对象变成响应式对象，在这个过程中便会进行依赖收集的相关逻辑，如下所示∶")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function defieneReactive (obj, key, val){\n  const dep = new Dep();\n  ...\n  Object.defineProperty(obj, key, {\n    ...\n    get: function reactiveGetter () {\n      if(Dep.target){\n        dep.depend();\n        ...\n      }\n      return val\n    }\n    ...\n  })\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("以上只保留了关键代码，主要就是 "),n("code",[s._v("const dep = new Dep()")]),s._v("实例化一个 Dep 的实例，然后在 get 函数中通过 "),n("code",[s._v("dep.depend()")]),s._v(" 进行依赖收集。")]),s._v(" "),n("p",[n("strong",[s._v("（1）Dep")])]),s._v(" "),n("p",[s._v("Dep是整个依赖收集的核心，其关键代码如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Dep {\n  static target;\n  subs;\n\n  constructor () {\n    ...\n    this.subs = [];\n  }\n  addSub (sub) {\n    this.subs.push(sub)\n  }\n  removeSub (sub) {\n    remove(this.sub, sub)\n  }\n  depend () {\n    if(Dep.target){\n      Dep.target.addDep(this)\n    }\n  }\n  notify () {\n    const subs = this.subds.slice();\n    for(let i = 0;i < subs.length; i++){\n      subs[i].update()\n    }\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("p",[s._v("Dep 是一个 class ，其中有一个关 键的静态属性 static，它指向了一个全局唯一 Watcher，保证了同一时间全局只有一个 watcher 被计算，另一个属性 subs 则是一个 Watcher 的数组，所以 Dep 实际上就是对 Watcher 的管理，再看看 Watcher 的相关代码∶")]),s._v(" "),n("p",[n("strong",[s._v("（2）Watcher")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Watcher {\n  getter;\n  ...\n  constructor (vm, expression){\n    ...\n    this.getter = expression;\n    this.get();\n  }\n  get () {\n    pushTarget(this);\n    value = this.getter.call(vm, vm)\n    ...\n    return value\n  }\n  addDep (dep){\n        ...\n    dep.addSub(this)\n  }\n  ...\n}\nfunction pushTarget (_target) {\n  Dep.target = _target\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("p",[s._v("Watcher 是一个 class，它定义了一些方法，其中和依赖收集相关的主要有 get、addDep 等。")]),s._v(" "),n("p",[n("strong",[s._v("（3）过程")])]),s._v(" "),n("p",[s._v("在实例化 Vue 时，依赖收集的相关过程如下∶")]),s._v(" "),n("p",[s._v("初 始 化 状 态 initState ， 这 中 间 便 会 通 过 defineReactive 将数据变成响应式对象，其中的 getter 部分便是用来依赖收集的。")]),s._v(" "),n("p",[s._v("初始化最终会走 mount 过程，其中会实例化 Watcher ，进入 Watcher 中，便会执行 this.get() 方法，")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("updateComponent = () => {\n  vm._update(vm._render())\n}\nnew Watcher(vm, updateComponent)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("get 方法中的 pushTarget 实际上就是把 Dep.target 赋值为当前的 watcher。")]),s._v(" "),n("p",[s._v("this.getter.call（vm，vm），这里的 getter 会执行 vm._render() 方法，在这个过程中便会触发数据对象的 getter。那么每个对象值的 getter 都持有一个 dep，在触发 getter 的时候会调用 dep.depend() 方法，也就会执行 Dep.target.addDep(this)。刚才 Dep.target 已经被赋值为 watcher，于是便会执行 addDep 方法，然后走到 dep.addSub() 方法，便将当前的 watcher 订阅到这个数据持有的 dep 的 subs 中，这个目的是为后续数据变化时候能通知到哪些 subs 做准备。所以在 vm._render() 过程中，会触发所有数据的 getter，这样便已经完成了一个依赖收集的过程。")]),s._v(" "),n("h3",{attrs:{id:"_28-对-react-和-vue-的理解-它们的异同"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_28-对-react-和-vue-的理解-它们的异同"}},[s._v("#")]),s._v(" 28. 对 React 和 Vue 的理解，它们的异同")]),s._v(" "),n("p",[n("strong",[s._v("相似之处：")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("都将注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库；")])]),s._v(" "),n("li",[n("p",[s._v("都有自己的构建工具，能让你得到一个根据最佳实践设置的项目模板；")])]),s._v(" "),n("li",[n("p",[s._v("都使用了Virtual DOM（虚拟DOM）提高重绘性能；")])]),s._v(" "),n("li",[n("p",[s._v("都有props的概念，允许组件间的数据传递；")])]),s._v(" "),n("li",[n("p",[s._v("都鼓励组件化应用，将应用分拆成一个个功能明确的模块，提高复用性。")])])]),s._v(" "),n("p",[n("strong",[s._v("不同之处 ：")])]),s._v(" "),n("p",[n("strong",[s._v("1）数据流")])]),s._v(" "),n("p",[s._v("Vue默认支持数据双向绑定，而React一直提倡单向数据流")]),s._v(" "),n("p",[n("strong",[s._v("2）虚拟DOM")])]),s._v(" "),n("p",[s._v('Vue2.x开始引入"Virtual DOM"，消除了和React在这方面的差异，但是在具体的细节还是有各自的特点。')]),s._v(" "),n("ul",[n("li",[s._v("Vue宣称可以更快地计算出Virtual DOM的差异，这是由于它在渲染过程中，会跟踪每一个组件的依赖关系，不需要重新渲染整个组件树。")]),s._v(" "),n("li",[s._v("对于React而言，每当应用的状态被改变时，全部子组件都会重新渲染。当然，这可以通过 PureComponent/shouldComponentUpdate这个生命周期方法来进行控制，但Vue将此视为默认的优化。")])]),s._v(" "),n("p",[n("strong",[s._v("3）组件化")])]),s._v(" "),n("p",[s._v("React与Vue最大的不同是模板的编写。")]),s._v(" "),n("ul",[n("li",[s._v("Vue鼓励写近似常规HTML的模板。写起来很接近标准 HTML元素，只是多了一些属性。")]),s._v(" "),n("li",[s._v("React推荐你所有的模板通用JavaScript的语法扩展——JSX书写。")])]),s._v(" "),n("p",[s._v("具体来讲：React中render函数是支持闭包特性的，所以import的组件在render中可以直接调用。但是在Vue中，由于模板中使用的数据都必须挂在 this 上进行一次中转，所以 import 一个组件完了之后，还需要在 components 中再声明下。")]),s._v(" "),n("p",[n("strong",[s._v("4）监听数据变化的实现原理不同")])]),s._v(" "),n("ul",[n("li",[s._v("Vue 通过 getter/setter 以及一些函数的劫持，能精确知道数据变化，不需要特别的优化就能达到很好的性能")]),s._v(" "),n("li",[s._v("React 默认是通过比较引用的方式进行的，如果不优化（PureComponent/shouldComponentUpdate）可能导致大量不必要的vDOM的重新渲染。这是因为 Vue 使用的是可变数据，而React更强调数据的不可变。")])]),s._v(" "),n("p",[n("strong",[s._v("5）高阶组件")])]),s._v(" "),n("p",[s._v("react可以通过高阶组件（HOC）来扩展，而Vue需要通过mixins来扩展。")]),s._v(" "),n("p",[s._v("高阶组件就是高阶函数，而React的组件本身就是纯粹的函数，所以高阶函数对React来说易如反掌。相反Vue.js使用HTML模板创建视图组件，这时模板无法有效的编译，因此Vue不能采用HOC来实现。")]),s._v(" "),n("p",[n("strong",[s._v("6）构建工具")])]),s._v(" "),n("p",[s._v("两者都有自己的构建工具：")]),s._v(" "),n("ul",[n("li",[s._v("React ==> Create React APP")]),s._v(" "),n("li",[s._v("Vue ==> vue-cli")])]),s._v(" "),n("p",[n("strong",[s._v("7）跨平台")])]),s._v(" "),n("ul",[n("li",[s._v("React ==> React Native")]),s._v(" "),n("li",[s._v("Vue ==> Weex")])]),s._v(" "),n("h3",{attrs:{id:"_29-vue的优点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_29-vue的优点"}},[s._v("#")]),s._v(" 29. Vue的优点")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("轻量级框架：只关注视图层，是一个构建数据的视图集合，大小只有几十 "),n("code",[s._v("kb")]),s._v(" ；")])]),s._v(" "),n("li",[n("p",[s._v("简单易学：国人开发，中文文档，不存在语言障碍 ，易于理解和学习；")])]),s._v(" "),n("li",[n("p",[s._v("双向数据绑定：保留了 "),n("code",[s._v("angular")]),s._v(" 的特点，在数据操作方面更为简单；")])]),s._v(" "),n("li",[n("p",[s._v("组件化：保留了 "),n("code",[s._v("react")]),s._v(" 的优点，实现了 "),n("code",[s._v("html")]),s._v(" 的封装和重用，在构建单页面应用方面有着独特的优势；")])]),s._v(" "),n("li",[n("p",[s._v("视图，数据，结构分离：使数据的更改更为简单，不需要进行逻辑代码的修改，只需要操作数据就能完成相关操作；")])]),s._v(" "),n("li",[n("p",[s._v("虚拟DOM："),n("code",[s._v("dom")]),s._v(" 操作是非常耗费性能的，不再使用原生的 "),n("code",[s._v("dom")]),s._v(" 操作节点，极大解放 "),n("code",[s._v("dom")]),s._v(" 操作，但具体操作的还是 "),n("code",[s._v("dom")]),s._v(" 不过是换了另一种方式；")])]),s._v(" "),n("li",[n("p",[s._v("运行速度更快：相比较于 "),n("code",[s._v("react")]),s._v(" 而言，同样是操作虚拟 "),n("code",[s._v("dom")]),s._v("，就性能而言， "),n("code",[s._v("vue")]),s._v(" 存在很大的优势。")])])]),s._v(" "),n("h3",{attrs:{id:"_30-assets和static的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_30-assets和static的区别"}},[s._v("#")]),s._v(" 30. assets和static的区别")]),s._v(" "),n("p",[n("strong",[s._v("相同点：")]),s._v(" "),n("code",[s._v("assets")]),s._v(" 和 "),n("code",[s._v("static")]),s._v(" 两个都是存放静态资源文件。项目中所需要的资源文件图片，字体图标，样式文件等都可以放在这两个文件下，这是相同点")]),s._v(" "),n("p",[n("strong",[s._v("不相同点：")]),n("code",[s._v("assets")]),s._v(" 中存放的静态资源文件在项目打包时，也就是运行 "),n("code",[s._v("npm run build")]),s._v(" 时会将 "),n("code",[s._v("assets")]),s._v(" 中放置的静态资源文件进行打包上传，所谓打包简单点可以理解为压缩体积，代码格式化。而压缩后的静态资源文件最终也都会放置在 "),n("code",[s._v("static")]),s._v(" 文件中跟着 "),n("code",[s._v("index.html")]),s._v(" 一同上传至服务器。"),n("code",[s._v("static")]),s._v(" 中放置的静态资源文件就不会要走打包压缩格式化等流程，而是直接进入打包好的目录，直接上传至服务器。因为避免了压缩直接进行上传，在打包时会提高一定的效率，但是 "),n("code",[s._v("static")]),s._v(" 中的资源文件由于没有进行压缩等操作，所以文件的体积也就相对于 "),n("code",[s._v("assets")]),s._v(" 中打包后的文件提交较大点。在服务器中就会占据更大的空间。")]),s._v(" "),n("p",[n("strong",[s._v("建议：")]),s._v(" 将项目中 "),n("code",[s._v("template")]),s._v("需要的样式文件js文件等都可以放置在 "),n("code",[s._v("assets")]),s._v(" 中，走打包这一流程。减少体积。而项目中引入的第三方的资源文件如"),n("code",[s._v("iconfoont.css")]),s._v(" 等文件可以放置在 "),n("code",[s._v("static")]),s._v(" 中，因为这些引入的第三方文件已经经过处理，不再需要处理，直接上传。")]),s._v(" "),n("h3",{attrs:{id:"_31-delete和vue-delete删除数组的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_31-delete和vue-delete删除数组的区别"}},[s._v("#")]),s._v(" 31. delete和Vue.delete删除数组的区别")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("delete")]),s._v(" 只是被删除的元素变成了 "),n("code",[s._v("empty/undefined")]),s._v(" 其他的元素的键值还是不变。")]),s._v(" "),n("li",[n("code",[s._v("Vue.delete")]),s._v(" 直接删除了数组 改变了数组的键值。")])]),s._v(" "),n("h3",{attrs:{id:"_32-vue如何监听对象或者数组某个属性的变化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_32-vue如何监听对象或者数组某个属性的变化"}},[s._v("#")]),s._v(" 32. vue如何监听对象或者数组某个属性的变化")]),s._v(" "),n("p",[s._v("当在项目中直接设置数组的某一项的值，或者直接设置对象的某个属性值，这个时候，你会发现页面并没有更新。这是因为Object.defineProperty()限制，监听不到变化。")]),s._v(" "),n("p",[s._v("解决方式：")]),s._v(" "),n("ul",[n("li",[s._v("this.$set(你要改变的数组/对象，你要改变的位置/key，你要改成什么value)")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('this.$set(this.arr, 0, "OBKoro1"); // 改变数组\nthis.$set(this.obj, "c", "OBKoro1"); // 改变对象\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ul",[n("li",[s._v("调用以下几个数组的方法")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("splice()、 push()、pop()、shift()、unshift()、sort()、reverse()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("vue源码里缓存了array的原型链，然后重写了这几个方法，触发这几个方法的时候会observer数据，意思是使用这些方法不用再进行额外的操作，视图自动进行更新。 推荐使用splice方法会比较好自定义,因为splice可以在数组的任何位置进行删除/添加操作")]),s._v(" "),n("p",[s._v("vm."),n("code",[s._v("$set")]),s._v(" 的实现原理是：")]),s._v(" "),n("ul",[n("li",[s._v("如果目标是数组，直接使用数组的 splice 方法触发相应式；")]),s._v(" "),n("li",[s._v("如果目标是对象，会先判读属性是否存在、对象是否是响应式，最终如果要对属性进行响应式处理，则是通过调用 defineReactive 方法进行响应式处理（ defineReactive 方法就是 Vue 在初始化对象时，给对象属性采用 Object.defineProperty 动态添加 getter 和 setter 的功能所调用的方法）")])]),s._v(" "),n("h3",{attrs:{id:"_33-什么是-mixin"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_33-什么是-mixin"}},[s._v("#")]),s._v(" 33. 什么是 mixin ？")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("Mixin 使我们能够为 Vue 组件编写可插拔和可重用的功能。")])]),s._v(" "),n("li",[n("p",[s._v("如果希望在多个组件之间重用一组组件选项，例如生命周期 hook、 方法等，则可以将其编写为 mixin，并在组件中简单的引用它。")])]),s._v(" "),n("li",[n("p",[s._v("然后将 mixin 的内容合并到组件中。如果你要在 mixin 中定义生命周期 hook，那么它在执行时将优化于组件自已的 hook。")])])]),s._v(" "),n("h3",{attrs:{id:"_34-vue模版编译原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_34-vue模版编译原理"}},[s._v("#")]),s._v(" 34. Vue模版编译原理")]),s._v(" "),n("p",[s._v("vue中的模板template无法被浏览器解析并渲染，因为这不属于浏览器的标准，不是正确的HTML语法，所有需要将template转化成一个JavaScript函数，这样浏览器就可以执行这一个函数并渲染出对应的HTML元素，就可以让视图跑起来了，这一个转化的过程，就成为模板编译。模板编译又分三个阶段，解析parse，优化optimize，生成generate，最终生成可执行函数render。")]),s._v(" "),n("ul",[n("li",[n("p",[n("strong",[s._v("解析阶段")]),s._v("：使用大量的正则表达式对template字符串进行解析，将标签、指令、属性等转化为抽象语法树AST。")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("优化阶段")]),s._v("：遍历AST，找到其中的一些静态节点并进行标记，方便在页面重渲染的时候进行diff比较时，直接跳过这一些静态节点，优化runtime的性能。")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("生成阶段")]),s._v("：将最终的AST转化为render函数字符串。")])])]),s._v(" "),n("h3",{attrs:{id:"_35-对ssr的理解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_35-对ssr的理解"}},[s._v("#")]),s._v(" 35. 对SSR的理解")]),s._v(" "),n("p",[s._v("SSR也就是服务端渲染，也就是将Vue在客户端把标签渲染成HTML的工作放在服务端完成，然后再把html直接返回给客户端")]),s._v(" "),n("p",[s._v("SSR的优势：")]),s._v(" "),n("ul",[n("li",[s._v("更好的SEO")]),s._v(" "),n("li",[s._v("首屏加载速度更快")])]),s._v(" "),n("p",[s._v("SSR的缺点：")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("开发条件会受到限制，服务器端渲染只支持beforeCreate和created两个钩子；")])]),s._v(" "),n("li",[n("p",[s._v("当需要一些外部扩展库时需要特殊处理，服务端渲染应用程序也需要处于Node.js的运行环境；")])]),s._v(" "),n("li",[n("p",[s._v("更多的服务端负载。")])])]),s._v(" "),n("h3",{attrs:{id:"_36-vue的性能优化有哪些"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_36-vue的性能优化有哪些"}},[s._v("#")]),s._v(" 36. Vue的性能优化有哪些")]),s._v(" "),n("p",[n("strong",[s._v("（1）编码阶段")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("尽量减少data中的数据，data中的数据都会增加getter和setter，会收集对应的watcher")])]),s._v(" "),n("li",[n("p",[s._v("v-if和v-for不能连用")])]),s._v(" "),n("li",[n("p",[s._v("如果需要使用v-for给每项元素绑定事件时使用事件代理")])]),s._v(" "),n("li",[n("p",[s._v("SPA 页面采用keep-alive缓存组件")])]),s._v(" "),n("li",[n("p",[s._v("在更多的情况下，使用v-if替代v-show")])]),s._v(" "),n("li",[n("p",[s._v("key保证唯一")])]),s._v(" "),n("li",[n("p",[s._v("使用路由懒加载、异步组件")])]),s._v(" "),n("li",[n("p",[s._v("防抖、节流")])]),s._v(" "),n("li",[n("p",[s._v("第三方模块按需导入")])]),s._v(" "),n("li",[n("p",[s._v("长列表滚动到可视区域动态加载")])]),s._v(" "),n("li",[n("p",[s._v("图片懒加载")])])]),s._v(" "),n("p",[n("strong",[s._v("（2）SEO优化")])]),s._v(" "),n("ul",[n("li",[s._v("预渲染")]),s._v(" "),n("li",[s._v("服务端渲染SSR")])]),s._v(" "),n("p",[n("strong",[s._v("（3）打包优化")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("压缩代码")])]),s._v(" "),n("li",[n("p",[s._v("Tree Shaking/Scope Hoisting")])]),s._v(" "),n("li",[n("p",[s._v("使用cdn加载第三方模块")])]),s._v(" "),n("li",[n("p",[s._v("多线程打包happypack")])]),s._v(" "),n("li",[n("p",[s._v("splitChunks抽离公共文件")])]),s._v(" "),n("li",[n("p",[s._v("sourceMap优化")])])]),s._v(" "),n("p",[n("strong",[s._v("（4）用户体验")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("骨架屏")])]),s._v(" "),n("li",[n("p",[s._v("PWA")])]),s._v(" "),n("li",[n("p",[s._v("还可以使用缓存(客户端缓存、服务端缓存)优化、服务端开启gzip压缩等。")])])]),s._v(" "),n("h3",{attrs:{id:"_37-对-spa-单页面的理解-它的优缺点分别是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_37-对-spa-单页面的理解-它的优缺点分别是什么"}},[s._v("#")]),s._v(" 37. 对 SPA 单页面的理解，它的优缺点分别是什么？")]),s._v(" "),n("p",[s._v("SPA（ single-page application ）仅在 Web 页面初始化时加载相应的 HTML、JavaScript 和 CSS。一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI 与用户的交互，避免页面的重新加载。")]),s._v(" "),n("p",[n("strong",[s._v("优点：")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；")])]),s._v(" "),n("li",[n("p",[s._v("基于上面一点，SPA 相对对服务器压力小；")])]),s._v(" "),n("li",[n("p",[s._v("前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理；")])])]),s._v(" "),n("p",[n("strong",[s._v("缺点：")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("初次加载耗时多：为实现单页 Web 应用功能及显示效果，需要在加载页面的时候将 JavaScript、CSS 统一加载，部分页面按需加载；")])]),s._v(" "),n("li",[n("p",[s._v("前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理；")])]),s._v(" "),n("li",[n("p",[s._v("SEO 难度较大：由于所有的内容都在一个页面中动态替换显示，所以在 SEO 上其有着天然的弱势。")])])]),s._v(" "),n("h3",{attrs:{id:"_38-template和jsx的有什么分别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_38-template和jsx的有什么分别"}},[s._v("#")]),s._v(" 38. template和jsx的有什么分别？")]),s._v(" "),n("p",[s._v("对于 runtime 来说，只需要保证组件存在 render 函数即可，而有了预编译之后，只需要保证构建过程中生成 render 函数就可以。在 webpack 中，使用"),n("code",[s._v("vue-loader")]),s._v("编译.vue文件，内部依赖的"),n("code",[s._v("vue-template-compiler")]),s._v("模块，在 webpack 构建过程中，将template预编译成 render 函数。与 react 类似，在添加了jsx的语法糖解析器"),n("code",[s._v("babel-plugin-transform-vue-jsx")]),s._v("之后，就可以直接手写render函数。")]),s._v(" "),n("p",[s._v("所以，template和jsx的都是render的一种表现形式，不同的是：JSX相对于template而言，具有更高的灵活性，在复杂的组件中，更具有优势，而 template 虽然显得有些呆滞。但是 template 在代码结构上更符合视图与逻辑分离的习惯，更简单、更直观、更好维护。")]),s._v(" "),n("h3",{attrs:{id:"_39-vue初始化页面闪动问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_39-vue初始化页面闪动问题"}},[s._v("#")]),s._v(" 39. vue初始化页面闪动问题")]),s._v(" "),n("p",[s._v("使用vue开发时，在vue初始化之前，由于div是不归vue管的，所以我们写的代码在还没有解析的情况下会容易出现花屏现象，看到类似于"+s._s(s.message)+"的字样，虽然一般情况下这个时间很短暂，但是还是有必要让解决这个问题的。")]),s._v(" "),n("p",[s._v("首先：在css里加上以下代码：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("[v-cloak] {\n    display: none;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("如果没有彻底解决问题，则在根元素加上"),n("code",[s._v('style="display: none;" :style="{display: \'block\'}"')])]),s._v(" "),n("h3",{attrs:{id:"_40-extend-有什么作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_40-extend-有什么作用"}},[s._v("#")]),s._v(" 40. extend 有什么作用")]),s._v(" "),n("p",[s._v("这个 API 很少用到，作用是扩展组件生成一个构造器，通常会与 "),n("code",[s._v("$mount")]),s._v(" 一起使用。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 创建组件构造器\nlet Component = Vue.extend({\n  template: '<div>test</div>'\n})\n// 挂载到 #app 上\nnew Component().$mount('#app')\n// 除了上面的方式，还可以用来扩展已有的组件\nlet SuperComponent = Vue.extend(Component)\nnew SuperComponent({\n    created() {\n        console.log(1)\n    }\n})\nnew SuperComponent().$mount('#app')\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h3",{attrs:{id:"_41-mixin-和-mixins-区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_41-mixin-和-mixins-区别"}},[s._v("#")]),s._v(" 41. mixin 和 mixins 区别")]),s._v(" "),n("p",[n("code",[s._v("mixin")]),s._v(" 用于全局混入，会影响到每个组件实例，通常插件都是这样做初始化的。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Vue.mixin({\n    beforeCreate() {\n        // ...逻辑\n        // 这种方式会影响到每个组件的 beforeCreate 钩子函数\n    }\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("虽然文档不建议在应用中直接使用 "),n("code",[s._v("mixin")]),s._v("，但是如果不滥用的话也是很有帮助的，比如可以全局混入封装好的 "),n("code",[s._v("ajax")]),s._v(" 或者一些工具函数等等。")]),s._v(" "),n("p",[n("code",[s._v("mixins")]),s._v(" 应该是最常使用的扩展组件的方式了。如果多个组件中有相同的业务逻辑，就可以将这些逻辑剥离出来，通过 "),n("code",[s._v("mixins")]),s._v(" 混入代码，比如上拉下拉加载数据这种逻辑等等。")]),s._v(" "),n("p",[s._v("另外需要注意的是 "),n("code",[s._v("mixins")]),s._v(" 混入的钩子函数会先于组件内的钩子函数执行，并且在遇到同名选项的时候也会有选择性的进行合并。")]),s._v(" "),n("h3",{attrs:{id:"_42-mvvm的优缺点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_42-mvvm的优缺点"}},[s._v("#")]),s._v(" 42. "),n("strong",[s._v("MVVM")]),s._v("的优缺点**?**")]),s._v(" "),n("p",[s._v("优点:")]),s._v(" "),n("ul",[n("li",[n("p",[s._v('分离视图（View）和模型（Model），降低代码耦合，提⾼视图或者逻辑的重⽤性: ⽐如视图（View）可以独⽴于Model变化和修改，⼀个ViewModel可以绑定不同的"View"上，当View变化的时候Model不可以不变，当Model变化的时候View也可以不变。你可以把⼀些视图逻辑放在⼀个ViewModel⾥⾯，让很多view重⽤这段视图逻辑')])]),s._v(" "),n("li",[n("p",[s._v("提⾼可测试性: ViewModel的存在可以帮助开发者更好地编写测试代码")])]),s._v(" "),n("li",[n("p",[s._v("⾃动更新dom: 利⽤双向绑定,数据更新后视图⾃动更新,让开发者从繁琐的⼿动dom中解放")])])]),s._v(" "),n("p",[s._v("缺点:")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("Bug很难被调试: 因为使⽤双向绑定的模式，当你看到界⾯异常了，有可能是你View的代码有Bug，也可能是Model的代码有问题。数据绑定使得⼀个位置的Bug被快速传递到别的位置，要定位原始出问题的地⽅就变得不那么容易了。另外，数据绑定的声明是指令式地写在View的模版当中的，这些内容是没办法去打断点debug的")])]),s._v(" "),n("li",[n("p",[s._v("⼀个⼤的模块中model也会很⼤，虽然使⽤⽅便了也很容易保证了数据的⼀致性，当时⻓期持有，不释放内存就造成了花费更多的内存")])]),s._v(" "),n("li",[n("p",[s._v("对于⼤型的图形应⽤程序，视图状态较多，ViewModel的构建和维护的成本都会⽐较⾼。")])])]),s._v(" "),n("h3",{attrs:{id:"_43-v-if和v-for哪个优先级更高-如果同时出现-应如何优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_43-v-if和v-for哪个优先级更高-如果同时出现-应如何优化"}},[s._v("#")]),s._v(" 43. "),n("strong",[s._v("v-if"),n("strong",[n("strong",[s._v("和")])]),s._v("v-for哪个优先级更高？如果同时出现，应如何优化？")])]),s._v(" "),n("p",[s._v("v-for优先于v-if被解析，如果同时出现，每次渲染都会"),n("strong",[s._v("先执行循环再判断条件")]),s._v("，无论如何循环都不可避免，浪费了性能。")]),s._v(" "),n("p",[s._v("要避免出现这种情况，则在外层嵌套template，在这一层进行v-if判断，然后在内部进行v-for循环。如果条件出现在循环内部，可通过计算属性提前过滤掉那些不需要显示的项。")]),s._v(" "),n("h3",{attrs:{id:"_44-对vue组件化的理解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_44-对vue组件化的理解"}},[s._v("#")]),s._v(" 44. 对Vue组件化的理解")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("组件是独立和可复用的代码组织单元。组件系统是Vue核心特性之一，它使开发者使用小型、独立和通常可复用的组件构建大型应用；")])]),s._v(" "),n("li",[n("p",[s._v("组件化开发能大幅提高应用开发效率、测试性、复用性等；")])]),s._v(" "),n("li",[n("p",[s._v("组件使用按分类有：页面组件、业务组件、通用组件；")])]),s._v(" "),n("li",[n("p",[s._v("vue的组件是基于配置的，我们通常编写的组件是组件配置而非组件，框架后续会生成其构造函数，它们基于VueComponent，扩展于Vue；")])]),s._v(" "),n("li",[n("p",[s._v("vue中常见组件化技术有：属性prop，自定义事件，插槽等，它们主要用于组件通信、扩展等；6.合理的划分组件，有助于提升应用性能；")])]),s._v(" "),n("li",[n("p",[s._v("组件应该是高内聚、低耦合的；")])]),s._v(" "),n("li",[n("p",[s._v("遵循单向数据流的原则。")])])]),s._v(" "),n("h3",{attrs:{id:"_45-对vue设计原则的理解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_45-对vue设计原则的理解"}},[s._v("#")]),s._v(" 45. 对vue设计原则的理解")]),s._v(" "),n("ol",[n("li",[n("p",[n("strong",[s._v("渐进式JavaScript框架")]),s._v("：与其它大型框架不同的是，Vue被设计为可以自底向上逐层应用。Vue的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue也完全能够为复杂的单页应用提供驱动。")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("易用性")]),s._v("：vue提供数据响应式、声明式模板语法和基于配置的组件系统等核心特性。这些使我们只需要关注应用的核心业务即可，只要会写js、html和css就能轻松编写vue应用。")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("灵活性")]),s._v("：渐进式框架的最大优点就是灵活性，如果应用足够小，我们可能仅需要vue核心特性即可完成功能；随着应用规模不断扩大，我们才可能逐渐引入路由、状态管理、vue-cli等库和工具，不管是应用体积还是学习难度都是一个逐渐增加的平和曲线。")])]),s._v(" "),n("li",[n("p",[s._v("**高效性：**超快的虚拟DOM和diﬀ算法使我们的应用拥有最佳的性能表现。追求高效的过程还在继续，vue3中引入Proxy对数据响应式改进以及编译器中对于静态内容编译的改进都会让vue更加高效。")])])]),s._v(" "),n("h3",{attrs:{id:"_46-常见的vue性能优化方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_46-常见的vue性能优化方法"}},[s._v("#")]),s._v(" 46. 常见的Vue性能优化方法")]),s._v(" "),n("ol",[n("li",[s._v("路由懒加载")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const router = new VueRouter({ routes: [\n  \t{ path: '/foo', component: () => import('./Foo.vue') }\n  ]\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("ol",[n("li",[s._v("keep-alive缓存页面")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<template>\n  <div id="app">\n    <keep-alive>\n      <router-view/>\n    </keep-alive>\n  </div>\n</template>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("ol",[n("li",[s._v("使用v-show复用DOM")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<template>\n  <div class="cell">\n     \x3c!--这种情况用v-show复用DOM，比v-if效果好--\x3e\n     <div v-show="value" class="on">\n        <Heavy :n="10000"/>\n     </div>\n     <section v-show="!value" class="off">\n        <Heavy :n="10000"/>\n     </section>\n  </div>\n</template>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("ol",[n("li",[s._v("v-for 遍历避免同时使用 v-if")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<template>\n  <ul>\n\t\t<li v-for="user in activeUsers" :key="user.id">\n\t\t\t{{ user.name }}\n\t\t</li>\n\t</ul>\n</template>\n\n<script>\nexport default { \n  computed: {\n\t\tactiveUsers: function () {\n\t\t\treturn this.users.filter(function (user) { \n        return user.isActive\n      })\n\t\t}\n\t}\n}\n<\/script>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("ol",[n("li",[s._v("长列表性能优化")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// 如果列表是纯粹的数据展示，不会有任何改变，就不需要做响应化\nexport default { \n\tdata: () => ({\n\t\tusers: []\n\t}),\n\tasync created() {\n\t\tconst users = await axios.get("/api/users"); \n\t\tthis.users = Object.freeze(users);\n\t}\t\n};\n\n// 如果是大数据长列表，可采用虚拟滚动，只渲染少部分区域的内容\n<recycle-scroller class="items" :items="items" :item-size="24">\n\t<template v-slot="{ item }">\n \t\t<FetchItemView :item="item" @vote="voteItem(item)"/>\n  </template>\n</recycle-scroller>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("ol",[n("li",[s._v("事件的销毁")])]),s._v(" "),n("p",[s._v("Vue 组件销毁时，会自动解绑它的全部指令及事件监听器，但是仅限于组件本身的事件。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("created() {\n\tthis.timer = setInterval(this.refresh, 2000)\n},\nbeforeDestroy() { \n\tclearInterval(this.timer)\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("ol",[n("li",[s._v("图片懒加载")])]),s._v(" "),n("p",[s._v("对于图片过多的页面，为了加速页面加载速度，所以很多时候我们需要将页面内未出现在可视区域内的图片先不做加载， 等到滚动到可视区域后再去加载。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<img v-lazy="/static/img/1.png">\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ol",[n("li",[s._v("第三方插件按需引入")])]),s._v(" "),n("p",[s._v("像element-ui这样的第三方组件库可以按需引入避免体积太大。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import Vue from 'vue';\nimport { Button, Select } from 'element-ui';\n\n\nVue.use(Button) Vue.use(Select)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("ol",[n("li",[s._v("无状态的组件标记为函数式组件")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<template functional>\n\t<div class="cell">\n\t\t<div v-if="props.value" class="on"></div>\n\t\t<section v-else class="off"></section>\n\t</div>\n</template>\n\n\n<script>\n\texport default { props: [\'value\'] }\n<\/script>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("ol",[n("li",[s._v("子组件分隔")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("<template>\n\t<div>\n\t\t<ChildComp/>\n\t</div>\n</template>\n\n<script>\n\texport default { \n    components: {\n\t\t\tChildComp: { \n        methods: {\n\t\t\t\t\theavy () { /* 耗时任务 */ }\n\t\t\t\t},\n\t\t\t\trender (h) {\n\t\t\t\t\treturn h('div', this.heavy())\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n<\/script>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("ol",[n("li",[s._v("变量本地化")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("<template>\n\t<div :style=\"{ opacity: start / 300 }\">\n\t\t{{ result }}\n\t</div>\n</template>\n\n<script>\nimport { heavy } from '@/utils'\n\nexport default { \n  props: ['start'], \n  computed: {\n\t\tbase () { \n      return 42 \n    }, \n    result () {\n\t\t\tconst base = this.base // 不要频繁引用this.base\n\t\t\tlet result = this.start\n\t\t\tfor (let i = 0; i < 1000; i++) { \n        result += heavy(base)\n\t\t\t}\n\t\t\treturn result\n\t\t}\n\t}\n}\n<\/script>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("ol",[n("li",[s._v("SSR")])]),s._v(" "),n("h3",{attrs:{id:"_47-v-model的实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_47-v-model的实现原理"}},[s._v("#")]),s._v(" 47. v-model的实现原理")]),s._v(" "),n("p",[s._v("vue中v-model可以实现数据的双向绑定，但是为什么这个指令就可以实现数据的双向绑定呢？其实v-model是vue的一个语法糖。即利用v-model绑定数据后，既绑定了数据，又添加了一个input事件监听。")]),s._v(" "),n("p",[s._v("实现原理：")]),s._v(" "),n("ul",[n("li",[s._v("v-bind绑定响应数据")]),s._v(" "),n("li",[s._v("触发input事件并传递数据")])]),s._v(" "),n("p",[s._v("示例：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<input v-model="text"></input>\n// 等价于：\n<input :value="text" @input="text = $event.target.value"></input>\n// 组件中使用：\n<custom-input :value="text" @input="$event"></custom-input>\n// 根据v-model原理模拟：\n<input type="text" id="ipt1">\n<input type="text" id="ipt2">\n<script>\n    var ipt1=document.getElementById(\'ipt1\');\n    var ipt2=document.getElementById(\'ipt2\');\n    ipt1.addEventListener("input",function(){\n        ipt2.value=ipt1.value;\n    })\n<\/script>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h2",{attrs:{id:"二、生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、生命周期"}},[s._v("#")]),s._v(" 二、生命周期")]),s._v(" "),n("h3",{attrs:{id:"_1-说一下vue的生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-说一下vue的生命周期"}},[s._v("#")]),s._v(" 1. 说一下Vue的生命周期")]),s._v(" "),n("p",[s._v("Vue 实例有⼀个完整的⽣命周期，也就是从开始创建、初始化数据、编译模版、挂载Dom -> 渲染、更新 -> 渲染、卸载 等⼀系列过程，称这是Vue的⽣命周期。")]),s._v(" "),n("ol",[n("li",[n("p",[n("strong",[s._v("beforeCreate（创建前）")]),s._v("：数据观测和初始化事件还未开始，此时 data 的响应式追踪、event/watcher 都还没有被设置，也就是说不能访问到data、computed、watch、methods上的方法和数据。")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("created")]),s._v("**（创建后）** ：实例创建完成，实例上配置的 options 包括 data、computed、watch、methods 等都配置完成，但是此时渲染得节点还未挂载到 DOM，所以不能访问到 "),n("code",[s._v("$el")]),s._v(" 属性。")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("beforeMount（挂载前）")]),s._v("：在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。此时还没有挂载html到页面上。")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("mounted（挂载后）")]),s._v("：在el被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html 页面中。此过程中进行ajax交互。")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("beforeUpdate（更新前）")]),s._v("：响应式数据更新时调用，此时虽然响应式数据更新了，但是对应的真实 DOM 还没有被渲染。")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("updated（更新后）")]),s._v(" ：在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。此时 DOM 已经根据响应式数据的变化更新了。调用时，组件 DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("beforeDestroy（销毁前）")]),s._v("：实例销毁之前调用。这一步，实例仍然完全可用，"),n("code",[s._v("this")]),s._v(" 仍能获取到实例。")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("destroyed（销毁后）")]),s._v("：实例销毁后调用，调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务端渲染期间不被调用。")])])]),s._v(" "),n("p",[s._v("另外还有 "),n("code",[s._v("keep-alive")]),s._v(" 独有的生命周期，分别为 "),n("code",[s._v("activated")]),s._v(" 和 "),n("code",[s._v("deactivated")]),s._v(" 。用 "),n("code",[s._v("keep-alive")]),s._v(" 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 "),n("code",[s._v("deactivated")]),s._v(" 钩子函数，命中缓存渲染后会执行 "),n("code",[s._v("activated")]),s._v(" 钩子函数。")]),s._v(" "),n("h3",{attrs:{id:"_2-vue-子组件和父组件执行顺序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-vue-子组件和父组件执行顺序"}},[s._v("#")]),s._v(" 2. Vue 子组件和父组件执行顺序")]),s._v(" "),n("p",[n("strong",[s._v("加载渲染过程：")])]),s._v(" "),n("p",[s._v("1.父组件 beforeCreate")]),s._v(" "),n("p",[s._v("2.父组件 created")]),s._v(" "),n("p",[s._v("3.父组件 beforeMount")]),s._v(" "),n("p",[s._v("4.子组件 beforeCreate")]),s._v(" "),n("p",[s._v("5.子组件 created")]),s._v(" "),n("p",[s._v("6.子组件 beforeMount")]),s._v(" "),n("p",[s._v("7.子组件 mounted")]),s._v(" "),n("p",[s._v("8.父组件 mounted")]),s._v(" "),n("p",[n("strong",[s._v("更新过程：")])]),s._v(" "),n("p",[s._v("\\1. 父组件 beforeUpdate")]),s._v(" "),n("p",[s._v("2.子组件 beforeUpdate")]),s._v(" "),n("p",[s._v("3.子组件 updated")]),s._v(" "),n("p",[s._v("4.父组件 updated")]),s._v(" "),n("p",[n("strong",[s._v("销毁过程：")])]),s._v(" "),n("p",[s._v("\\1. 父组件 beforeDestroy")]),s._v(" "),n("p",[s._v("2.子组件 beforeDestroy")]),s._v(" "),n("p",[s._v("3.子组件 destroyed")]),s._v(" "),n("p",[s._v("4.父组件 destoryed")]),s._v(" "),n("h3",{attrs:{id:"_3-created和mounted的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-created和mounted的区别"}},[s._v("#")]),s._v(" 3. created和mounted的区别")]),s._v(" "),n("ul",[n("li",[s._v("created:在模板渲染成html前调用，即通常初始化某些属性值，然后再渲染成视图。")]),s._v(" "),n("li",[s._v("mounted:在模板渲染成html后调用，通常是初始化页面完成后，再对html的dom节点进行一些需要的操作。")])]),s._v(" "),n("h3",{attrs:{id:"_4-一般在哪个生命周期请求异步数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-一般在哪个生命周期请求异步数据"}},[s._v("#")]),s._v(" 4. 一般在哪个生命周期请求异步数据")]),s._v(" "),n("p",[s._v("我们可以在钩子函数 created、beforeMount、mounted 中进行调用，因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。")]),s._v(" "),n("p",[s._v("推荐在 created 钩子函数中调用异步请求，因为在 created 钩子函数中调用异步请求有以下优点：")]),s._v(" "),n("ul",[n("li",[s._v("能更快获取到服务端数据，减少页面加载时间，用户体验更好；")]),s._v(" "),n("li",[s._v("SSR不支持 beforeMount 、mounted 钩子函数，放在 created 中有助于一致性。")])]),s._v(" "),n("h3",{attrs:{id:"_5-keep-alive-中的生命周期哪些"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-keep-alive-中的生命周期哪些"}},[s._v("#")]),s._v(" 5. keep-alive 中的生命周期哪些")]),s._v(" "),n("p",[s._v("keep-alive是 Vue 提供的一个内置组件，用来对组件进行缓存——在组件切换过程中将状态保留在内存中，防止重复渲染DOM。")]),s._v(" "),n("p",[s._v("如果为一个组件包裹了 keep-alive，那么它会多出两个生命周期：deactivated、activated。同时，beforeDestroy 和 destroyed 就不会再被触发了，因为组件不会被真正销毁。")]),s._v(" "),n("p",[s._v("当组件被换掉时，会被缓存到内存中、触发 deactivated 生命周期；当组件被切回来时，再去缓存里找这个组件、触发 activated钩子函数。")]),s._v(" "),n("h2",{attrs:{id:"三、组件通信"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、组件通信"}},[s._v("#")]),s._v(" 三、组件通信")]),s._v(" "),n("p",[s._v("组件通信的方式如下：")]),s._v(" "),n("h3",{attrs:{id:"_1-props-emit"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-props-emit"}},[s._v("#")]),s._v(" （1） props  /  $emit")]),s._v(" "),n("p",[s._v("父组件通过"),n("code",[s._v("props")]),s._v("向子组件传递数据，子组件通过"),n("code",[s._v("$emit")]),s._v("和父组件通信")]),s._v(" "),n("h5",{attrs:{id:"_1-父组件向子组件传值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-父组件向子组件传值"}},[s._v("#")]),s._v(" 1. 父组件向子组件传值")]),s._v(" "),n("ul",[n("li",[n("p",[n("code",[s._v("props")]),s._v("只能是父组件向子组件进行传值，"),n("code",[s._v("props")]),s._v("使得父子组件之间形成了一个单向下行绑定。子组件的数据会随着父组件不断更新。")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("props")]),s._v(" 可以显示定义一个或一个以上的数据，对于接收的数据，可以是各种数据类型，同样也可以传递一个函数。")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("props")]),s._v("属性名规则：若在"),n("code",[s._v("props")]),s._v("中使用驼峰形式，模板中需要使用短横线的形式")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// 父组件\n<template>\n    <div id="father">\n        <son :msg="msgData" :fn="myFunction"></son>\n    </div>\n</template>\n\n<script>\nimport son from "./son.vue";\nexport default {\n    name: father,\n    data() {\n        msgData: "父组件数据";\n    },\n    methods: {\n        myFunction() {\n            console.log("vue");\n        }\n    },\n    components: {\n        son\n    }\n};\n<\/script>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// 子组件\n<template>\n    <div id="son">\n        <p>{{msg}}</p>\n        <button @click="fn">按钮</button>\n    </div>\n</template>\n<script>\nexport default {\n    name: "son",\n    props: ["msg", "fn"]\n};\n<\/script>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h5",{attrs:{id:"_2-子组件向父组件传值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-子组件向父组件传值"}},[s._v("#")]),s._v(" 2. 子组件向父组件传值")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("$emit")]),s._v("绑定一个自定义事件，当这个事件被执行的时就会将参数传递给父组件，而父组件通过"),n("code",[s._v("v-on")]),s._v("监听并接收参数。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 父组件\n<template>\n  <div class=\"section\">\n    <com-article :articles=\"articleList\" @onEmitIndex=\"onEmitIndex\"></com-article>\n    <p>{{currentIndex}}</p>\n  </div>\n</template>\n\n<script>\nimport comArticle from './test/article.vue'\nexport default {\n  name: 'comArticle',\n  components: { comArticle },\n  data() {\n    return {\n      currentIndex: -1,\n      articleList: ['红楼梦', '西游记', '三国演义']\n    }\n  },\n  methods: {\n    onEmitIndex(idx) {\n      this.currentIndex = idx\n    }\n  }\n}\n<\/script>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('//子组件\n<template>\n  <div>\n    <div v-for="(item, index) in articles" :key="index" @click="emitIndex(index)">{{item}}</div>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: [\'articles\'],\n  methods: {\n    emitIndex(index) {\n      this.$emit(\'onEmitIndex\', index) // 触发父组件的方法，并传递参数index\n    }\n  }\n}\n<\/script>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("h3",{attrs:{id:"_2-eventbus事件总线-emit-on"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-eventbus事件总线-emit-on"}},[s._v("#")]),s._v(" （2）eventBus事件总线（$emit / $on）")]),s._v(" "),n("p",[n("code",[s._v("eventBus")]),s._v("事件总线适用于"),n("strong",[s._v("父子组件")]),s._v("、"),n("strong",[s._v("非父子组件")]),s._v("等之间的通信，使用步骤如下：")]),s._v(" "),n("p",[n("strong",[s._v("（1）创建事件中心管理组件之间的通信")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// event-bus.js\n\nimport Vue from 'vue'\nexport const EventBus = new Vue()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("strong",[s._v("（2）发送事件")])]),s._v(" "),n("p",[s._v("假设有两个兄弟组件"),n("code",[s._v("firstCom")]),s._v("和"),n("code",[s._v("secondCom")]),s._v("：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("<template>\n  <div>\n    <first-com></first-com>\n    <second-com></second-com>\n  </div>\n</template>\n\n<script>\nimport firstCom from './firstCom.vue'\nimport secondCom from './secondCom.vue'\nexport default {\n  components: { firstCom, secondCom }\n}\n<\/script>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("在"),n("code",[s._v("firstCom")]),s._v("组件中发送事件：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("<template>\n  <div>\n    <button @click=\"add\">加法</button>    \n  </div>\n</template>\n\n<script>\nimport {EventBus} from './event-bus.js' // 引入事件中心\n\nexport default {\n  data(){\n    return{\n      num:0\n    }\n  },\n  methods:{\n    add(){\n      EventBus.$emit('addition', {\n        num:this.num++\n      })\n    }\n  }\n}\n<\/script>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("p",[n("strong",[s._v("（3）接收事件")])]),s._v(" "),n("p",[s._v("在"),n("code",[s._v("secondCom")]),s._v("组件中发送事件：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("<template>\n  <div>求和: {{count}}</div>\n</template>\n\n<script>\nimport { EventBus } from './event-bus.js'\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  mounted() {\n    EventBus.$on('addition', param => {\n      this.count = this.count + param.num;\n    })\n  }\n}\n<\/script>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("p",[s._v("在上述代码中，这就相当于将"),n("code",[s._v("num")]),s._v("值存贮在了事件总线中，在其他组件中可以直接访问。事件总线就相当于一个桥梁，不用组件通过它来通信。")]),s._v(" "),n("p",[s._v("虽然看起来比较简单，但是这种方法也有不变之处，如果项目过大，使用这种方式进行通信，后期维护起来会很困难。")]),s._v(" "),n("h3",{attrs:{id:"_3-依赖注入-project-inject"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-依赖注入-project-inject"}},[s._v("#")]),s._v(" （3）依赖注入（project / inject）")]),s._v(" "),n("p",[s._v("这种方式就是Vue中的"),n("strong",[s._v("依赖注入")]),s._v("，该方法用于"),n("strong",[s._v("父子组件之间的通信")]),s._v("。当然这里所说的父子不一定是真正的父子，也可以是祖孙组件，在层数很深的情况下，可以使用这种方法来进行传值。就不用一层一层的传递了。")]),s._v(" "),n("p",[n("code",[s._v("project / inject")]),s._v("是Vue提供的两个钩子，和"),n("code",[s._v("data")]),s._v("、"),n("code",[s._v("methods")]),s._v("是同级的。并且"),n("code",[s._v("project")]),s._v("的书写形式和"),n("code",[s._v("data")]),s._v("一样。")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("project")]),s._v(" 钩子用来发送数据或方法")]),s._v(" "),n("li",[n("code",[s._v("inject")]),s._v("钩子用来接收数据或方法")])]),s._v(" "),n("p",[s._v("在父组件中：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("provide() {\n return {\n    num: this.num\n  };\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("在子组件中：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("inject: ['num']\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("还可以这样写，这样写就可以访问父组件中的所有属性：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("provide() {\n return {\n    app: this\n  };\n}\ndata() {\n return {\n    num: 1\n  };\n}\n\ninject: ['app']\nconsole.log(this.app.num)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[n("strong",[s._v("注意：")]),s._v(" 依赖注入所提供的属性是"),n("strong",[s._v("非响应式")]),s._v("的。")]),s._v(" "),n("h3",{attrs:{id:"_3-ref-refs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-ref-refs"}},[s._v("#")]),s._v(" （3）ref / $refs")]),s._v(" "),n("p",[s._v("这种方式也是实现"),n("strong",[s._v("父子组件")]),s._v("之间的通信。")]),s._v(" "),n("p",[n("code",[s._v("ref")]),s._v("： 这个属性用在子组件上，它的引用就指向了子组件的实例。可以通过实例来访问组件的数据和方法。")]),s._v(" "),n("p",[s._v("在子组件中：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("export default {\n  data () {\n    return {\n      name: 'JavaScript'\n    }\n  },\n  methods: {\n    sayHello () {\n      console.log('hello')\n    }\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("在父组件中：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("<template>\n  <child ref=\"child\"></component-a>\n</template>\n<script>\n  import child from './child.vue'\n  export default {\n    components: { child },\n    mounted () {\n      console.log(this.$refs.child.name);  // JavaScript\n      this.$refs.child.sayHello();  // hello\n    }\n  }\n<\/script>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h3",{attrs:{id:"_4-parent-children"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-parent-children"}},[s._v("#")]),s._v(" （4）$parent / $children")]),s._v(" "),n("ul",[n("li",[s._v("使用"),n("code",[s._v("$parent")]),s._v("可以让组件访问父组件的实例（访问的是上一级父组件的属性和方法）")]),s._v(" "),n("li",[s._v("使用"),n("code",[s._v("$children")]),s._v("可以让组件访问子组件的实例，但是，"),n("code",[s._v("$children")]),s._v("并不能保证顺序，并且访问的数据也不是响应式的。")])]),s._v(" "),n("p",[s._v("在子组件中：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("<template>\n  <div>\n    <span>{{message}}</span>\n    <p>获取父组件的值为:  {{parentVal}}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Vue'\n    }\n  },\n  computed:{\n    parentVal(){\n      return this.$parent.msg;\n    }\n  }\n}\n<\/script>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("p",[s._v("在父组件中：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 父组件中\n<template>\n  <div class=\"hello_world\">\n    <div>{{msg}}</div>\n    <child></child>\n    <button @click=\"change\">点击改变子组件值</button>\n  </div>\n</template>\n\n<script>\nimport child from './child.vue'\nexport default {\n  components: { child },\n  data() {\n    return {\n      msg: 'Welcome'\n    }\n  },\n  methods: {\n    change() {\n      // 获取到子组件\n      this.$children[0].message = 'JavaScript'\n    }\n  }\n}\n<\/script>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("p",[s._v("在上面的代码中，子组件获取到了父组件的"),n("code",[s._v("parentVal")]),s._v("值，父组件改变了子组件中"),n("code",[s._v("message")]),s._v("的值。")]),s._v(" "),n("p",[n("strong",[s._v("需要注意：")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("通过"),n("code",[s._v("$parent")]),s._v("访问到的是上一级父组件的实例，可以使用"),n("code",[s._v("$root")]),s._v("来访问根组件的实例")])]),s._v(" "),n("li",[n("p",[s._v("在组件中使用"),n("code",[s._v("$children")]),s._v("拿到的是所有的子组件的实例，它是一个数组，并且是无序的")])]),s._v(" "),n("li",[n("p",[s._v("在根组件"),n("code",[s._v("#app")]),s._v("上拿"),n("code",[s._v("$parent")]),s._v("得到的是"),n("code",[s._v("new Vue()")]),s._v("的实例，在这实例上再拿"),n("code",[s._v("$parent")]),s._v("得到的是"),n("code",[s._v("undefined")]),s._v("，而在最底层的子组件拿"),n("code",[s._v("$children")]),s._v("是个空数组")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("$children")]),s._v(" 的值是"),n("strong",[s._v("数组")]),s._v("，而"),n("code",[s._v("$parent")]),s._v("是个"),n("strong",[s._v("对象")])])])]),s._v(" "),n("h3",{attrs:{id:"_5-attrs-listeners"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-attrs-listeners"}},[s._v("#")]),s._v(" （5）$attrs / $listeners")]),s._v(" "),n("p",[s._v("考虑一种场景，如果A是B组件的父组件，B是C组件的父组件。如果想要组件A给组件C传递数据，这种隔代的数据，该使用哪种方式呢？")]),s._v(" "),n("p",[s._v("如果是用"),n("code",[s._v("props/$emit")]),s._v("来一级一级的传递，确实可以完成，但是比较复杂；如果使用事件总线，在多人开发或者项目较大的时候，维护起来很麻烦；如果使用Vuex，的确也可以，但是如果仅仅是传递数据，那可能就有点浪费了。")]),s._v(" "),n("p",[s._v("针对上述情况，Vue引入了"),n("code",[s._v("$attrs / $listeners")]),s._v("，实现组件之间的跨代通信。")]),s._v(" "),n("p",[s._v("先来看一下"),n("code",[s._v("inheritAttrs")]),s._v("，它的默认值true，继承所有的父组件属性除"),n("code",[s._v("props")]),s._v("之外的所有属性；"),n("code",[s._v("inheritAttrs：false")]),s._v(" 只继承class属性 。")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("$attrs")]),s._v("：继承所有的父组件属性（除了prop传递的属性、class 和 style ），一般用在子组件的子元素上")]),s._v(" "),n("li",[n("code",[s._v("$listeners")]),s._v("：该属性是一个对象，里面包含了作用在这个组件上的所有监听器，可以配合 "),n("code",[s._v('v-on="$listeners"')]),s._v(" 将所有的事件监听器指向这个组件的某个特定的子元素。（相当于子组件继承父组件的事件）")])]),s._v(" "),n("p",[s._v("A组件（"),n("code",[s._v("APP.vue")]),s._v("）：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<template>\n    <div id="app">\n        //此处监听了两个事件，可以在B组件或者C组件中直接触发 \n        <child1 :p-child1="child1" :p-child2="child2" @test1="onTest1" @test2="onTest2"></child1>\n    </div>\n</template>\n<script>\nimport Child1 from \'./Child1.vue\';\nexport default {\n    components: { Child1 },\n    methods: {\n        onTest1() {\n            console.log(\'test1 running\');\n        },\n        onTest2() {\n            console.log(\'test2 running\');\n        }\n    }\n};\n<\/script>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("p",[s._v("B组件（"),n("code",[s._v("Child1.vue")]),s._v("）：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("<template>\n    <div class=\"child-1\">\n        <p>props: {{pChild1}}</p>\n        <p>$attrs: {{$attrs}}</p>\n        <child2 v-bind=\"$attrs\" v-on=\"$listeners\"></child2>\n    </div>\n</template>\n<script>\nimport Child2 from './Child2.vue';\nexport default {\n    props: ['pChild1'],\n    components: { Child2 },\n    inheritAttrs: false,\n    mounted() {\n        this.$emit('test1'); // 触发APP.vue中的test1方法\n    }\n};\n<\/script>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[s._v("C 组件 ("),n("code",[s._v("Child2.vue")]),s._v(")：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("<template>\n    <div class=\"child-2\">\n        <p>props: {{pChild2}}</p>\n        <p>$attrs: {{$attrs}}</p>\n    </div>\n</template>\n<script>\nexport default {\n    props: ['pChild2'],\n    inheritAttrs: false,\n    mounted() {\n        this.$emit('test2');// 触发APP.vue中的test2方法\n    }\n};\n<\/script>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("在上述代码中：")]),s._v(" "),n("ul",[n("li",[s._v("C组件中能直接触发test的原因在于 B组件调用C组件时 使用 v-on 绑定了"),n("code",[s._v("$listeners")]),s._v(" 属性")]),s._v(" "),n("li",[s._v("在B组件中通过v-bind 绑定"),n("code",[s._v("$attrs")]),s._v("属性，C组件可以直接获取到A组件中传递下来的props（除了B组件中props声明的）")])]),s._v(" "),n("h3",{attrs:{id:"_6-总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-总结"}},[s._v("#")]),s._v(" （6）总结")]),s._v(" "),n("p",[n("strong",[s._v("（1）父子组件间通信")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("子组件通过 props 属性来接受父组件的数据，然后父组件在子组件上注册监听事件，子组件通过 emit 触发事件来向父组件发送数据。")])]),s._v(" "),n("li",[n("p",[s._v("通过 ref 属性给子组件设置一个名字。父组件通过 $refs 组件名来获得子组件，子组件通过 $parent 获得父组件，这样也可以实现通信。")])]),s._v(" "),n("li",[n("p",[s._v("使用 provide/inject，在父组件中通过 provide提供变量，在子组件中通过 inject 来将变量注入到组件中。不论子组件有多深，只要调用了 inject 那么就可以注入 provide中的数据。")])])]),s._v(" "),n("p",[n("strong",[s._v("（2）兄弟组件间通信")])]),s._v(" "),n("ul",[n("li",[s._v("使用 eventBus 的方法，它的本质是通过创建一个空的 Vue 实例来作为消息传递的对象，通信的组件引入这个实例，通信的组件通过在这个实例上监听和触发事件，来实现消息的传递。")]),s._v(" "),n("li",[s._v("通过 $parent/$refs 来获取到兄弟组件，也可以进行通信。")])]),s._v(" "),n("p",[n("strong",[s._v("（3）任意组件之间")])]),s._v(" "),n("ul",[n("li",[s._v("使用 eventBus ，其实就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件。")])]),s._v(" "),n("p",[s._v("如果业务逻辑复杂，很多组件之间需要同时处理一些公共的数据，这个时候采用上面这一些方法可能不利于项目的维护。这个时候可以使用 vuex ，vuex 的思想就是将这一些公共的数据抽离出来，将它作为一个全局的变量来管理，然后其他组件就可以对这个公共数据进行读写操作，这样达到了解耦的目的。")]),s._v(" "),n("h2",{attrs:{id:"四、路由"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、路由"}},[s._v("#")]),s._v(" 四、路由")]),s._v(" "),n("h3",{attrs:{id:"_1-vue-router-的懒加载如何实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-vue-router-的懒加载如何实现"}},[s._v("#")]),s._v(" 1. Vue-Router 的懒加载如何实现")]),s._v(" "),n("p",[s._v("非懒加载：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import List from '@/components/list.vue'\nconst router = new VueRouter({\n  routes: [\n    { path: '/list', component: List }\n  ]\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("（1）方案一(常用)：使用箭头函数+import动态加载")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const List = () => import('@/components/list.vue')\nconst router = new VueRouter({\n  routes: [\n    { path: '/list', component: List }\n  ]\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("（2）方案二：使用箭头函数+require动态加载")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const router = new Router({\n  routes: [\n   {\n     path: '/list',\n     component: resolve => require(['@/components/list'], resolve)\n   }\n  ]\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("（3）方案三：使用webpack的require.ensure技术，也可以实现按需加载。 这种情况下，多个路由指定相同的chunkName，会合并打包成一个js文件。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// r就是resolve\nconst List = r => require.ensure([], () => r(require('@/components/list')), 'list');\n// 路由也是正常的写法  这种是官方推荐的写的 按模块划分懒加载 \nconst router = new Router({\n  routes: [\n  {\n    path: '/list',\n    component: List,\n    name: 'list'\n  }\n ]\n}))\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h3",{attrs:{id:"_2-路由的hash和history模式的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-路由的hash和history模式的区别"}},[s._v("#")]),s._v(" 2. 路由的hash和history模式的区别")]),s._v(" "),n("p",[s._v("Vue-Router有两种模式："),n("strong",[s._v("hash模式")]),s._v("和"),n("strong",[s._v("history模式")]),s._v("。默认的路由模式是hash模式。")]),s._v(" "),n("h4",{attrs:{id:"_1-hash模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-hash模式"}},[s._v("#")]),s._v(" 1. hash模式")]),s._v(" "),n("p",[n("strong",[s._v("简介：")]),s._v(" hash模式是开发中默认的模式，它的URL带着一个#，例如：http://www.abc.com/#/vue，它的hash值就是"),n("code",[s._v("#/vue")]),s._v("。")]),s._v(" "),n("p",[n("strong",[s._v("特点")]),s._v("：hash值会出现在URL里面，但是不会出现在HTTP请求中，对后端完全没有影响。所以改变hash值，不会重新加载页面。这种模式的浏览器支持度很好，低版本的IE浏览器也支持这种模式。hash路由被称为是前端路由，已经成为SPA（单页面应用）的标配。")]),s._v(" "),n("p",[n("strong",[s._v("原理：")]),s._v(" hash模式的主要原理就是"),n("strong",[s._v("onhashchange()事件")]),s._v("：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("window.onhashchange = function(event){\n\tconsole.log(event.oldURL, event.newURL);\n\tlet hash = location.hash.slice(1);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("使用onhashchange()事件的好处就是，在页面的hash值发生变化时，无需向后端发起请求，window就可以监听事件的改变，并按规则加载相应的代码。除此之外，hash值变化对应的URL都会被浏览器记录下来，这样浏览器就能实现页面的前进和后退。虽然是没有请求后端服务器，但是页面的hash值和对应的URL关联起来了。")]),s._v(" "),n("h4",{attrs:{id:"_2-history模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-history模式"}},[s._v("#")]),s._v(" 2. history模式")]),s._v(" "),n("p",[n("strong",[s._v("简介：")]),s._v(" history模式的URL中没有#，它使用的是传统的路由分发模式，即用户在输入一个URL时，服务器会接收这个请求，并解析这个URL，然后做出相应的逻辑处理。")]),s._v(" "),n("p",[n("strong",[s._v("特点：")]),s._v(" 当使用history模式时，URL就像这样：http://abc.com/user/id。相比hash模式更加好看。但是，history模式需要后台配置支持。如果后台没有正确配置，访问时会返回404。")]),s._v(" "),n("p",[n("strong",[s._v("API：")]),s._v(" history api可以分为两大部分，切换历史状态和修改历史状态：")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("修改历史状态")]),s._v("：包括了 HTML5 History Interface 中新增的 "),n("code",[s._v("pushState()")]),s._v(" 和 "),n("code",[s._v("replaceState()")]),s._v(" 方法，这两个方法应用于浏览器的历史记录栈，提供了对历史记录进行修改的功能。只是当他们进行修改时，虽然修改了url，但浏览器不会立即向后端发送请求。如果要做到改变url但又不刷新页面的效果，就需要前端用上这两个API。")]),s._v(" "),n("li",[n("strong",[s._v("切换历史状态：")]),s._v(" 包括"),n("code",[s._v("forward()")]),s._v("、"),n("code",[s._v("back()")]),s._v("、"),n("code",[s._v("go()")]),s._v("三个方法，对应浏览器的前进，后退，跳转操作。")])]),s._v(" "),n("p",[s._v("虽然history模式丢弃了丑陋的#。但是，它也有自己的缺点，就是在刷新页面的时候，如果没有相应的路由或资源，就会刷出404来。")]),s._v(" "),n("p",[s._v("如果想要切换到history模式，就要进行以下配置（后端也要进行配置）：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const router = new VueRouter({\n  mode: 'history',\n  routes: [...]\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h4",{attrs:{id:"_3-两种模式对比"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-两种模式对比"}},[s._v("#")]),s._v(" 3. 两种模式对比")]),s._v(" "),n("p",[s._v("调用 history.pushState() 相比于直接修改 hash，存在以下优势:")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("pushState() 设置的新 URL 可以是与当前 URL 同源的任意 URL；而 hash 只可修改 # 后面的部分，因此只能设置与当前 URL 同文档的 URL；")])]),s._v(" "),n("li",[n("p",[s._v("pushState() 设置的新 URL 可以与当前 URL 一模一样，这样也会把记录添加到栈中；而 hash 设置的新值必须与原来不一样才会触发动作将记录添加到栈中；")])]),s._v(" "),n("li",[n("p",[s._v("pushState() 通过 stateObject 参数可以添加任意类型的数据到记录中；而 hash 只可添加短字符串；")])]),s._v(" "),n("li",[n("p",[s._v("pushState() 可额外设置 title 属性供后续使用。")])]),s._v(" "),n("li",[n("p",[s._v("hash模式下，仅hash符号之前的url会被包含在请求中，后端如果没有做到对路由的全覆盖，也不会返回404错误；history模式下，前端的url必须和实际向后端发起请求的url一致，如果没有对用的路由处理，将返回404错误。")])])]),s._v(" "),n("p",[s._v("hash模式和history模式都有各自的优势和缺陷，还是要根据实际情况选择性的使用。")]),s._v(" "),n("h3",{attrs:{id:"_3-如何获取页面的hash变化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-如何获取页面的hash变化"}},[s._v("#")]),s._v(" 3. 如何获取页面的hash变化")]),s._v(" "),n("p",[n("strong",[s._v("（1）监听$route的变化")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 监听,当路由发生变化的时候执行\nwatch: {\n  $route: {\n    handler: function(val, oldVal){\n      console.log(val);\n    },\n    // 深度观察监听\n    deep: true\n  }\n},\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[n("strong",[s._v("（2）window.location.hash读取#值")])]),s._v(" "),n("p",[s._v("window.location.hash 的值可读可写，读取来判断状态是否改变，写入时可以在不重载网页的前提下，添加一条历史访问记录。")]),s._v(" "),n("h3",{attrs:{id:"_4-route-和-router-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-route-和-router-的区别"}},[s._v("#")]),s._v(" 4. $route 和$router 的区别")]),s._v(" "),n("ul",[n("li",[s._v("$route 是“路由信息对象”，包括 path，params，hash，query，fullPath，matched，name 等路由信息参数")]),s._v(" "),n("li",[s._v("$router 是“路由实例”对象包括了路由的跳转方法，钩子函数等。")])]),s._v(" "),n("h3",{attrs:{id:"_5-如何定义动态路由-如何获取传过来的动态参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-如何定义动态路由-如何获取传过来的动态参数"}},[s._v("#")]),s._v(" 5. 如何定义动态路由？如何获取传过来的动态参数？")]),s._v(" "),n("p",[n("strong",[s._v("（1）param方式")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("配置路由格式："),n("code",[s._v("/router/:id")])])]),s._v(" "),n("li",[n("p",[s._v("传递的方式：在path后面跟上对应的值")])]),s._v(" "),n("li",[n("p",[s._v("传递后形成的路径："),n("code",[s._v("/router/123")])])])]),s._v(" "),n("p",[s._v("1）路由定义")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//在APP.vue中\n<router-link :to=\"'/user/'+userId\" replace>用户</router-link>    \n\n//在index.js\n{\n   path: '/user/:userid',\n   component: User,\n},\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("2）路由跳转")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 方法1：\n<router-link :to=\"{ name: 'users', params: { uname: wade }}\">按钮</router-link\n\n// 方法2：\nthis.$router.push({name:'users',params:{uname:wade}})\n\n// 方法3：\nthis.$router.push('/user/' + wade)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("3）参数获取")]),s._v(" "),n("p",[s._v("通过 "),n("code",[s._v("$route.params.userid")]),s._v(" 获取传递的值")]),s._v(" "),n("p",[n("strong",[s._v("（2）query方式")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("配置路由格式："),n("code",[s._v("/router")]),s._v("，也就是普通配置")])]),s._v(" "),n("li",[n("p",[s._v("传递的方式：对象中使用query的key作为传递方式")])]),s._v(" "),n("li",[n("p",[s._v("传递后形成的路径："),n("code",[s._v("/route?id=123")])])])]),s._v(" "),n("p",[s._v("1）路由定义")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('//方式1：直接在router-link 标签上以对象的形式\n<router-link :to="{path:\'/profile\',query:{name:\'why\',age:28,height:188}}">档案</router-link>\n\n// 方式2：写成按钮以点击事件形式\n<button @click=\'profileClick\'>我的</button>    \n\nprofileClick(){\n  this.$router.push({\n    path: "/profile",\n    query: {\n        name: "kobi",\n        age: "28",\n        height: 198\n    }\n  });\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("2）跳转方法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 方法1：\n<router-link :to=\"{ name: 'users', query: { uname: james }}\">按钮</router-link>\n\n// 方法2：\nthis.$router.push({ name: 'users', query:{ uname:james }})\n\n// 方法3：\n<router-link :to=\"{ path: '/user', query: { uname:james }}\">按钮</router-link>\n\n// 方法4：\nthis.$router.push({ path: '/user', query:{ uname:james }})\n\n// 方法5：\nthis.$router.push('/user?uname=' + jsmes)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("3）获取参数")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("通过$route.query 获取传递的值\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"_6-vue-router-路由钩子在生命周期的体现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-vue-router-路由钩子在生命周期的体现"}},[s._v("#")]),s._v(" 6. Vue-router 路由钩子在生命周期的体现")]),s._v(" "),n("p",[s._v("一、Vue-Router导航守卫")]),s._v(" "),n("p",[s._v("有的时候，需要通过路由来进行一些操作，比如最常见的登录权限验证，当用户满足条件时，才让其进入导航，否则就取消跳转，并跳到登录页面让其登录。")]),s._v(" "),n("p",[s._v("为此有很多种方法可以植入路由的导航过程：全局的，单个路由独享的，或者组件级的")]),s._v(" "),n("ol",[n("li",[s._v("全局路由钩子")])]),s._v(" "),n("p",[s._v("全局有三个路由钩子;")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("router.beforeEach 全局前置守卫 进入路由之前")])]),s._v(" "),n("li",[n("p",[s._v("router.beforeResolve 全局解析守卫（2.5.0+）在 beforeRouteEnter 调用之后调用")])]),s._v(" "),n("li",[n("p",[s._v("router.afterEach 全局后置钩子 进入路由之后")])])]),s._v(" "),n("p",[s._v("具体使用∶")]),s._v(" "),n("ul",[n("li",[s._v("beforeEach（判断是否登录了，没登录就跳转到登录页）")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("router.beforeEach((to, from, next) => {  \n    let ifInfo = Vue.prototype.$common.getSession('userData');  // 判断是否登录的存储信息\n    if (!ifInfo) { \n        // sessionStorage里没有储存user信息    \n        if (to.path == '/') { \n            //如果是登录页面路径，就直接next()      \n            next();    \n        } else { \n            //不然就跳转到登录      \n            Message.warning(\"请重新登录！\");     \n            window.location.href = Vue.prototype.$loginUrl;    \n        }  \n    } else {    \n        return next();  \n    }\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("ul",[n("li",[s._v("afterEach （跳转之后滚动条回到顶部）")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("router.afterEach((to, from) => {  \n    // 跳转之后滚动条回到顶部  \n    window.scrollTo(0,0);\n});\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("ol",[n("li",[s._v("单个路由独享钩子")])]),s._v(" "),n("p",[n("strong",[s._v("beforeEnter")])]),s._v(" "),n("p",[s._v("如果不想全局配置守卫的话，可以为某些路由单独配置守卫，有三个参数∶ to、from、next")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("export default [    \n    {        \n        path: '/',        \n        name: 'login',        \n        component: login,        \n        beforeEnter: (to, from, next) => {          \n            console.log('即将进入登录页面')          \n            next()        \n        }    \n    }\n]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("ol",[n("li",[s._v("组件内钩子")])]),s._v(" "),n("p",[s._v("beforeRouteUpdate、beforeRouteEnter、beforeRouteLeave")]),s._v(" "),n("p",[s._v("这三个钩子都有三个参数∶to、from、next")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("beforeRouteEnter∶ 进入组件前触发")])]),s._v(" "),n("li",[n("p",[s._v("beforeRouteUpdate∶ 当前地址改变并且改组件被复用时触发，举例来说，带有动态参数的路径foo/∶id，在 /foo/1 和 /foo/2 之间跳转的时候，由于会渲染同样的foa组件，这个钩子在这种情况下就会被调用")])]),s._v(" "),n("li",[n("p",[s._v("beforeRouteLeave∶ 离开组件被调用")])])]),s._v(" "),n("p",[s._v("注意点，beforeRouteEnter组件内还访问不到this，因为该守卫执行前组件实例还没有被创建，需要传一个回调给 next来访问，例如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("beforeRouteEnter(to, from, next) {      \n    next(target => {        \n        if (from.path == '/classProcess') {          \n            target.isFromProcess = true        \n        }      \n    })    \n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("二、Vue路由钩子在生命周期函数的体现")]),s._v(" "),n("ol",[n("li",[s._v("完整的路由导航解析流程（不包括其他生命周期）")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("触发进入其他路由。")])]),s._v(" "),n("li",[n("p",[s._v("调用要离开路由的组件守卫beforeRouteLeave")])]),s._v(" "),n("li",[n("p",[s._v("调用局前置守卫∶ beforeEach")])]),s._v(" "),n("li",[n("p",[s._v("在重用的组件里调用 beforeRouteUpdate")])]),s._v(" "),n("li",[n("p",[s._v("调用路由独享守卫 beforeEnter。")])]),s._v(" "),n("li",[n("p",[s._v("解析异步路由组件。")])]),s._v(" "),n("li",[n("p",[s._v("在将要进入的路由组件中调用 beforeRouteEnter")])]),s._v(" "),n("li",[n("p",[s._v("调用全局解析守卫 beforeResolve")])]),s._v(" "),n("li",[n("p",[s._v("导航被确认。")])]),s._v(" "),n("li",[n("p",[s._v("调用全局后置钩子的 afterEach 钩子。")])]),s._v(" "),n("li",[n("p",[s._v("触发DOM更新（mounted）。")])]),s._v(" "),n("li",[n("p",[s._v("执行beforeRouteEnter 守卫中传给 next 的回调函数")])])]),s._v(" "),n("ol",[n("li",[s._v("触发钩子的完整顺序")])]),s._v(" "),n("p",[s._v("路由导航、keep-alive、和组件生命周期钩子结合起来的，触发顺序，假设是从a组件离开，第一次进入b组件∶")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("beforeRouteLeave：路由组件的组件离开路由前钩子，可取消路由离开。")])]),s._v(" "),n("li",[n("p",[s._v("beforeEach：路由全局前置守卫，可用于登录验证、全局路由loading等。")])]),s._v(" "),n("li",[n("p",[s._v("beforeEnter：路由独享守卫")])]),s._v(" "),n("li",[n("p",[s._v("beforeRouteEnter：路由组件的组件进入路由前钩子。")])]),s._v(" "),n("li",[n("p",[s._v("beforeResolve：路由全局解析守卫")])]),s._v(" "),n("li",[n("p",[s._v("afterEach：路由全局后置钩子")])]),s._v(" "),n("li",[n("p",[s._v("beforeCreate：组件生命周期，不能访问tAis。")])]),s._v(" "),n("li",[n("p",[s._v("created;组件生命周期，可以访问tAis，不能访问dom。")])]),s._v(" "),n("li",[n("p",[s._v("beforeMount：组件生命周期")])]),s._v(" "),n("li",[n("p",[s._v("deactivated：离开缓存组件a，或者触发a的beforeDestroy和destroyed组件销毁钩子。")])]),s._v(" "),n("li",[n("p",[s._v("mounted：访问/操作dom。")])]),s._v(" "),n("li",[n("p",[s._v("activated：进入缓存组件，进入a的嵌套子组件（如果有的话）。")])]),s._v(" "),n("li",[n("p",[s._v("执行beforeRouteEnter回调函数next。")])])]),s._v(" "),n("ol",[n("li",[s._v("导航行为被触发到导航完成的整个过程")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("导航行为被触发，此时导航未被确认。")])]),s._v(" "),n("li",[n("p",[s._v("在失活的组件里调用离开守卫 beforeRouteLeave。")])]),s._v(" "),n("li",[n("p",[s._v("调用全局的 beforeEach守卫。")])]),s._v(" "),n("li",[n("p",[s._v("在重用的组件里调用 beforeRouteUpdate 守卫(2.2+)。")])]),s._v(" "),n("li",[n("p",[s._v("在路由配置里调用 beforeEnteY。")])]),s._v(" "),n("li",[n("p",[s._v("解析异步路由组件（如果有）。")])]),s._v(" "),n("li",[n("p",[s._v("在被激活的组件里调用 beforeRouteEnter。")])]),s._v(" "),n("li",[n("p",[s._v("调用全局的 beforeResolve 守卫（2.5+），标示解析阶段完成。")])]),s._v(" "),n("li",[n("p",[s._v("导航被确认。")])]),s._v(" "),n("li",[n("p",[s._v("调用全局的 afterEach 钩子。")])]),s._v(" "),n("li",[n("p",[s._v("非重用组件，开始组件实例的生命周期：beforeCreate&created、beforeMount&mounted")])]),s._v(" "),n("li",[n("p",[s._v("触发 DOM 更新。")])]),s._v(" "),n("li",[n("p",[s._v("用创建好的实例调用 beforeRouteEnter守卫中传给 next 的回调函数。")])]),s._v(" "),n("li",[n("p",[s._v("导航完成")])])]),s._v(" "),n("h3",{attrs:{id:"_7-vue-router跳转和location-href有什么区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-vue-router跳转和location-href有什么区别"}},[s._v("#")]),s._v(" 7. Vue-router跳转和location.href有什么区别")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("使用 "),n("code",[s._v("location.href= /url")]),s._v("来跳转，简单方便，但是刷新了页面；")])]),s._v(" "),n("li",[n("p",[s._v("使用 "),n("code",[s._v("history.pushState( /url )")]),s._v(" ，无刷新页面，静态跳转；")])]),s._v(" "),n("li",[n("p",[s._v("引进 router ，然后使用 "),n("code",[s._v("router.push( /url )")]),s._v(" 来跳转，使用了 "),n("code",[s._v("diff")]),s._v(" 算法，实现了按需加载，减少了 dom 的消耗。其实使用 router 跳转和使用 "),n("code",[s._v("history.pushState()")]),s._v(" 没什么差别的，因为vue-router就是用了 "),n("code",[s._v("history.pushState()")]),s._v(" ，尤其是在history模式下。")])])]),s._v(" "),n("h3",{attrs:{id:"_8-params和query的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-params和query的区别"}},[s._v("#")]),s._v(" 8. params和query的区别")]),s._v(" "),n("p",[n("strong",[s._v("用法")]),s._v("：query要用path来引入，params要用name来引入，接收参数都是类似的，分别是 "),n("code",[s._v("this.$route.query.name")]),s._v(" 和 "),n("code",[s._v("this.$route.params.name")]),s._v(" 。")]),s._v(" "),n("p",[n("strong",[s._v("url地址显示")]),s._v("：query更加类似于ajax中get传参，params则类似于post，说的再简单一点，前者在浏览器地址栏中显示参数，后者则不显示")]),s._v(" "),n("p",[n("strong",[s._v("注意")]),s._v("：query刷新不会丢失query里面的数据 params刷新会丢失 params里面的数据。")]),s._v(" "),n("h3",{attrs:{id:"_9-vue-router-导航守卫有哪些"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-vue-router-导航守卫有哪些"}},[s._v("#")]),s._v(" 9. Vue-router 导航守卫有哪些")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("全局前置/钩子：beforeEach、beforeResolve、afterEach")])]),s._v(" "),n("li",[n("p",[s._v("路由独享的守卫：beforeEnter")])]),s._v(" "),n("li",[n("p",[s._v("组件内的守卫：beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave")])])]),s._v(" "),n("h3",{attrs:{id:"_10-对前端路由的理解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-对前端路由的理解"}},[s._v("#")]),s._v(" 10. 对前端路由的理解")]),s._v(" "),n("p",[s._v("在前端技术早期，一个 url 对应一个页面，如果要从 A 页面切换到 B 页面，那么必然伴随着页面的刷新。这个体验并不好，不过在最初也是无奈之举——用户只有在刷新页面的情况下，才可以重新去请求数据。")]),s._v(" "),n("p",[s._v("后来，改变发生了——Ajax 出现了，它允许人们在不刷新页面的情况下发起请求；与之共生的，还有“不刷新页面即可更新页面内容”这种需求。在这样的背景下，出现了 "),n("strong",[s._v("SPA（单页面应用")]),s._v("）。")]),s._v(" "),n("p",[s._v("SPA极大地提升了用户体验，它允许页面在不刷新的情况下更新页面内容，使内容的切换更加流畅。但是在 SPA 诞生之初，人们并没有考虑到“定位”这个问题——在内容切换前后，页面的 URL 都是一样的，这就带来了两个问题：")]),s._v(" "),n("ul",[n("li",[s._v("SPA 其实并不知道当前的页面“进展到了哪一步”。可能在一个站点下经过了反复的“前进”才终于唤出了某一块内容，但是此时只要刷新一下页面，一切就会被清零，必须重复之前的操作、才可以重新对内容进行定位——SPA 并不会“记住”你的操作。")]),s._v(" "),n("li",[s._v("由于有且仅有一个 URL 给页面做映射，这对 SEO 也不够友好，搜索引擎无法收集全面的信息")])]),s._v(" "),n("p",[s._v("为了解决这个问题，前端路由出现了。")]),s._v(" "),n("p",[s._v("前端路由可以帮助我们在仅有一个页面的情况下，“记住”用户当前走到了哪一步——为 SPA 中的各个视图匹配一个唯一标识。这意味着用户前进、后退触发的新内容，都会映射到不同的 URL 上去。此时即便他刷新页面，因为当前的 URL 可以标识出他所处的位置，因此内容也不会丢失。")]),s._v(" "),n("p",[s._v("那么如何实现这个目的呢？首先要解决两个问题：")]),s._v(" "),n("ul",[n("li",[s._v("当用户刷新页面时，浏览器会默认根据当前 URL 对资源进行重新定位（发送请求）。这个动作对 SPA 是不必要的，因为我们的 SPA 作为单页面，无论如何也只会有一个资源与之对应。此时若走正常的请求-刷新流程，反而会使用户的前进后退操作无法被记录。")]),s._v(" "),n("li",[s._v("单页面应用对服务端来说，就是一个URL、一套资源，那么如何做到用“不同的URL”来映射不同的视图内容呢？")])]),s._v(" "),n("p",[s._v("从这两个问题来看，服务端已经完全救不了这个场景了。所以要靠咱们前端自力更生，不然怎么叫“前端路由”呢？作为前端，可以提供这样的解决思路：")]),s._v(" "),n("ul",[n("li",[s._v("拦截用户的刷新操作，避免服务端盲目响应、返回不符合预期的资源内容。把刷新这个动作完全放到前端逻辑里消化掉。")]),s._v(" "),n("li",[s._v("感知 URL 的变化。这里不是说要改造 URL、凭空制造出 N 个 URL 来。而是说 URL 还是那个 URL，只不过我们可以给它做一些微小的处理——这些处理并不会影响 URL 本身的性质，不会影响服务器对它的识别，只有我们前端感知的到。一旦我们感知到了，我们就根据这些变化、用 JS 去给它生成不同的内容。")])]),s._v(" "),n("h2",{attrs:{id:"五、vuex"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五、vuex"}},[s._v("#")]),s._v(" 五、Vuex")]),s._v(" "),n("h3",{attrs:{id:"_1-vuex-的原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-vuex-的原理"}},[s._v("#")]),s._v(" 1. Vuex 的原理")]),s._v(" "),n("p",[s._v("Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。")]),s._v(" "),n("ul",[n("li",[s._v("Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。")]),s._v(" "),n("li",[s._v("改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样可以方便地跟踪每一个状态的变化。")])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/jpeg/1500604/1609522434579-ff590978-32e1-4cf5-bbbd-d8caf932f8d6.jpeg",alt:"img"}})]),s._v(" "),n("p",[s._v("Vuex为Vue Components建立起了一个完整的生态圈，包括开发中的API调用一环。")]),s._v(" "),n("p",[n("strong",[s._v("（1）核心流程中的主要功能：")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("Vue Components 是 vue 组件，组件会触发（dispatch）一些事件或动作，也就是图中的 Actions;")])]),s._v(" "),n("li",[n("p",[s._v("在组件中发出的动作，肯定是想获取或者改变数据的，但是在 vuex 中，数据是集中管理的，不能直接去更改数据，所以会把这个动作提交（Commit）到 Mutations 中;")])]),s._v(" "),n("li",[n("p",[s._v("然后 Mutations 就去改变（Mutate）State 中的数据;")])]),s._v(" "),n("li",[n("p",[s._v("当 State 中的数据被改变之后，就会重新渲染（Render）到 Vue Components 中去，组件展示更新后的数据，完成一个流程。")])])]),s._v(" "),n("p",[n("strong",[s._v("（2）各模块在核心流程中的主要功能：")])]),s._v(" "),n("ul",[n("li",[n("p",[n("code",[s._v("Vue Components")]),s._v("∶ Vue组件。HTML页面上，负责接收用户操作等交互行为，执行dispatch方法触发对应action进行回应。")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("dispatch")]),s._v("∶操作行为触发方法，是唯一能执行action的方法。")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("actions")]),s._v("∶ 操作行为处理模块。负责处理Vue Components接收到的所有交互行为。包含同步/异步操作，支持多个同名方法，按照注册的顺序依次触发。向后台API请求的操作就在这个模块中进行，包括触发其他action以及提交mutation的操作。该模块提供了Promise的封装，以支持action的链式触发。")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("commit")]),s._v("∶状态改变提交操作方法。对mutation进行提交，是唯一能执行mutation的方法。")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("mutations")]),s._v("∶状态改变操作方法。是Vuex修改state的唯一推荐方法，其他修改方式在严格模式下将会报错。该方法只能进行同步操作，且方法名只能全局唯一。操作之中会有一些hook暴露出来，以进行state的监控等。")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("state")]),s._v("∶ 页面状态管理容器对象。集中存储Vuecomponents中data对象的零散数据，全局唯一，以进行统一的状态管理。页面显示所需的数据从该对象中进行读取，利用Vue的细粒度数据响应机制来进行高效的状态更新。")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("getters")]),s._v("∶ state对象读取方法。图中没有单独列出该模块，应该被包含在了render中，Vue Components通过该方法读取全局state对象。")])])]),s._v(" "),n("p",[n("strong",[s._v("总结：")])]),s._v(" "),n("p",[s._v("Vuex 实现了一个单向数据流，在全局拥有一个 State 存放数据，当组件要更改 State 中的数据时，必须通过 Mutation 提交修改信息， Mutation 同时提供了订阅者模式供外部插件调用获取 State 数据的更新。而当所有异步操作(常见于调用后端接口异步获取更新数据)或批量的同步操作需要走 Action ，但 Action 也是无法直接修改 State 的，还是需要通过Mutation 来修改State的数据。最后，根据 State 的变化，渲染到视图上。")]),s._v(" "),n("h3",{attrs:{id:"_2-vuex中action和mutation的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-vuex中action和mutation的区别"}},[s._v("#")]),s._v(" 2. Vuex中action和mutation的区别")]),s._v(" "),n("p",[s._v("mutation中的操作是一系列的同步函数，用于修改state中的变量的的状态。当使用vuex时需要通过commit来提交需要操作的内容。mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是实际进行状态更改的地方，并且它会接受 state 作为第一个参数：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const store = new Vuex.Store({\n  state: {\n    count: 1\n  },\n  mutations: {\n    increment (state) {\n      state.count++      // 变更状态\n    }\n  }\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("当触发一个类型为 increment 的 mutation 时，需要调用此函数：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("store.commit('increment')\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("而Action类似于mutation，不同点在于：")]),s._v(" "),n("ul",[n("li",[s._v("Action 可以包含任意异步操作。")]),s._v(" "),n("li",[s._v("Action 提交的是 mutation，而不是直接变更状态。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const store = new Vuex.Store({\n  state: {\n    count: 0\n  },\n  mutations: {\n    increment (state) {\n      state.count++\n    }\n  },\n  actions: {\n    increment (context) {\n      context.commit('increment')\n    }\n  }\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 context.commit 提交一个 mutation，或者通过 context.state 和 context.getters 来获取 state 和 getters。")]),s._v(" "),n("p",[s._v("所以，两者的不同点如下：")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("Mutation专注于修改State，理论上是修改State的唯一途径；Action业务代码、异步请求。")])]),s._v(" "),n("li",[n("p",[s._v("Mutation：必须同步执行；Action：可以异步，但不能直接操作State。")])]),s._v(" "),n("li",[n("p",[s._v("在视图更新时，先触发actions，actions再触发mutation")])]),s._v(" "),n("li",[n("p",[s._v("mutation的参数是state，它包含store中的数据；store的参数是context，它是 state 的父级，包含 state、getters")])])]),s._v(" "),n("h3",{attrs:{id:"_3-vuex-和-localstorage-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-vuex-和-localstorage-的区别"}},[s._v("#")]),s._v(" 3. Vuex 和 localStorage 的区别")]),s._v(" "),n("p",[n("strong",[s._v("（1）最重要的区别")])]),s._v(" "),n("ul",[n("li",[s._v("vuex存储在内存中")]),s._v(" "),n("li",[s._v("localstorage 则以文件的方式存储在本地，只能存储字符串类型的数据，存储对象需要 JSON的stringify和parse方法进行处理。 读取内存比读取硬盘速度要快")])]),s._v(" "),n("p",[n("strong",[s._v("（2）应用场景")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。vuex用于组件之间的传值。")])]),s._v(" "),n("li",[n("p",[s._v("localstorage是本地存储，是将数据存储到浏览器的方法，一般是在跨页面传递数据时使用 。")])]),s._v(" "),n("li",[n("p",[s._v("Vuex能做到数据的响应式，localstorage不能")])])]),s._v(" "),n("p",[n("strong",[s._v("（3）永久性")])]),s._v(" "),n("p",[s._v("刷新页面时vuex存储的值会丢失，localstorage不会。")]),s._v(" "),n("p",[s._v("**注意：**对于不变的数据确实可以用localstorage可以代替vuex，但是当两个组件共用一个数据源（对象或数组）时，如果其中一个组件改变了该数据源，希望另一个组件响应该变化时，localstorage无法做到，原因就是区别1。")]),s._v(" "),n("h3",{attrs:{id:"_4-redux-和-vuex-有什么区别-它们的共同思想"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-redux-和-vuex-有什么区别-它们的共同思想"}},[s._v("#")]),s._v(" 4. Redux 和 Vuex 有什么区别，它们的共同思想")]),s._v(" "),n("p",[n("strong",[s._v("（1）Redux 和 Vuex区别")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("Vuex改进了Redux中的Action和Reducer函数，以mutations变化函数取代Reducer，无需switch，只需在对应的mutation函数里改变state值即可")])]),s._v(" "),n("li",[n("p",[s._v("Vuex由于Vue自动重新渲染的特性，无需订阅重新渲染函数，只要生成新的State即可")])]),s._v(" "),n("li",[n("p",[s._v("Vuex数据流的顺序是∶View调用store.commit提交对应的请求到Store中对应的mutation函数->store改变（vue检测到数据变化自动渲染）")])])]),s._v(" "),n("p",[s._v("通俗点理解就是，vuex 弱化 dispatch，通过commit进行 store状态的一次更变;取消了action概念，不必传入特定的 action形式进行指定变更;弱化reducer，基于commit参数直接对数据进行转变，使得框架更加简易;")]),s._v(" "),n("p",[n("strong",[s._v("（2）共同思想")])]),s._v(" "),n("ul",[n("li",[s._v("单—的数据源")]),s._v(" "),n("li",[s._v("变化可以预测")])]),s._v(" "),n("p",[s._v("本质上：redux与vuex都是对mvvm思想的服务，将数据从视图中抽离的一种方案;")]),s._v(" "),n("p",[s._v("形式上：vuex借鉴了redux，将store作为全局的数据中心，进行mode管理;")]),s._v(" "),n("h3",{attrs:{id:"_5-为什么要用-vuex-或者-redux"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-为什么要用-vuex-或者-redux"}},[s._v("#")]),s._v(" 5. 为什么要用 Vuex 或者 Redux")]),s._v(" "),n("p",[s._v("由于传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。我们经常会采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致代码无法维护。")]),s._v(" "),n("p",[s._v('所以需要把组件的共享状态抽取出来，以一个全局单例模式管理。在这种模式下，组件树构成了一个巨大的"视图"，不管在树的哪个位置，任何组件都能获取状态或者触发行为。')]),s._v(" "),n("p",[s._v("另外，通过定义和隔离状态管理中的各种概念并强制遵守一定的规则，代码将会变得更结构化且易维护。")]),s._v(" "),n("h3",{attrs:{id:"_6-vuex有哪几种属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-vuex有哪几种属性"}},[s._v("#")]),s._v(" 6. Vuex有哪几种属性？")]),s._v(" "),n("p",[s._v("有五种，分别是 State、 Getter、Mutation 、Action、 Module")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("state => 基本数据(数据源存放地)")])]),s._v(" "),n("li",[n("p",[s._v("getters => 从基本数据派生出来的数据")])]),s._v(" "),n("li",[n("p",[s._v("mutations => 提交更改数据的方法，同步")])]),s._v(" "),n("li",[n("p",[s._v("actions => 像一个装饰器，包裹mutations，使之可以异步。")])]),s._v(" "),n("li",[n("p",[s._v("modules => 模块化Vuex")])])]),s._v(" "),n("h3",{attrs:{id:"_7-vuex和单纯的全局对象有什么区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-vuex和单纯的全局对象有什么区别"}},[s._v("#")]),s._v(" 7. Vuex和单纯的全局对象有什么区别？")]),s._v(" "),n("ul",[n("li",[s._v("Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。")]),s._v(" "),n("li",[s._v("不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样可以方便地跟踪每一个状态的变化，从而能够实现一些工具帮助更好地了解我们的应用。")])]),s._v(" "),n("h3",{attrs:{id:"_8-为什么-vuex-的-mutation-中不能做异步操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-为什么-vuex-的-mutation-中不能做异步操作"}},[s._v("#")]),s._v(" 8. 为什么 Vuex 的 mutation 中不能做异步操作？")]),s._v(" "),n("ul",[n("li",[s._v("Vuex中所有的状态更新的唯一途径都是mutation，异步操作通过 Action 来提交 mutation实现，这样可以方便地跟踪每一个状态的变化，从而能够实现一些工具帮助更好地了解我们的应用。")]),s._v(" "),n("li",[s._v("每个mutation执行完成后都会对应到一个新的状态变更，这样devtools就可以打个快照存下来，然后就可以实现 time-travel 了。如果mutation支持异步操作，就没有办法知道状态是何时更新的，无法很好的进行状态的追踪，给调试带来困难。")])]),s._v(" "),n("h3",{attrs:{id:"_9-vuex的严格模式是什么-有什么作用-如何开启"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-vuex的严格模式是什么-有什么作用-如何开启"}},[s._v("#")]),s._v(" 9. Vuex的严格模式是什么,有什么作用，如何开启？")]),s._v(" "),n("p",[s._v("在严格模式下，无论何时发生了状态变更且不是由mutation函数引起的，将会抛出错误。这能保证所有的状态变更都能被调试工具跟踪到。")]),s._v(" "),n("p",[s._v("在Vuex.Store 构造器选项中开启,如下")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const store = new Vuex.Store({\n    strict:true,\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h3",{attrs:{id:"_10-如何在组件中批量使用vuex的getter属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-如何在组件中批量使用vuex的getter属性"}},[s._v("#")]),s._v(" 10. 如何在组件中批量使用Vuex的getter属性")]),s._v(" "),n("p",[s._v("使用mapGetters辅助函数, 利用对象展开运算符将getter混入computed 对象中")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import {mapGetters} from 'vuex'\nexport default{\n    computed:{\n        ...mapGetters(['total','discountTotal'])\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h3",{attrs:{id:"_11-如何在组件中重复使用vuex的mutation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-如何在组件中重复使用vuex的mutation"}},[s._v("#")]),s._v(" 11. 如何在组件中重复使用Vuex的mutation")]),s._v(" "),n("p",[s._v("使用mapMutations辅助函数,在组件中这么使用")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import { mapMutations } from 'vuex'\nmethods:{\n    ...mapMutations({\n        setNumber:'SET_NUMBER',\n    })\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("然后调用"),n("code",[s._v("this.setNumber(10)")]),s._v("相当调用"),n("code",[s._v("this.$store.commit('SET_NUMBER',10)")])]),s._v(" "),n("h2",{attrs:{id:"六、vue-3-0"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#六、vue-3-0"}},[s._v("#")]),s._v(" 六、Vue 3.0")]),s._v(" "),n("h3",{attrs:{id:"_1-vue3-0有什么更新"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-vue3-0有什么更新"}},[s._v("#")]),s._v(" 1. Vue3.0有什么更新")]),s._v(" "),n("p",[n("strong",[s._v("（1）监测机制的改变")])]),s._v(" "),n("ul",[n("li",[s._v("3.0 将带来基于代理 Proxy的 observer 实现，提供全语言覆盖的反应性跟踪。")]),s._v(" "),n("li",[s._v("消除了 Vue 2 当中基于 Object.defineProperty 的实现所存在的很多限制：")])]),s._v(" "),n("p",[n("strong",[s._v("（2）只能监测属性，不能监测对象")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("检测属性的添加和删除；")])]),s._v(" "),n("li",[n("p",[s._v("检测数组索引和长度的变更；")])]),s._v(" "),n("li",[n("p",[s._v("支持 Map、Set、WeakMap 和 WeakSet。")])])]),s._v(" "),n("p",[n("strong",[s._v("（3）模板")])]),s._v(" "),n("ul",[n("li",[s._v("作用域插槽，2.x 的机制导致作用域插槽变了，父组件会重新渲染，而 3.0 把作用域插槽改成了函数的方式，这样只会影响子组件的重新渲染，提升了渲染的性能。")]),s._v(" "),n("li",[s._v("同时，对于 render 函数的方面，vue3.0 也会进行一系列更改来方便习惯直接使用 api 来生成 vdom 。")])]),s._v(" "),n("p",[n("strong",[s._v("（4）对象式的组件声明方式")])]),s._v(" "),n("ul",[n("li",[s._v("vue2.x 中的组件是通过声明的方式传入一系列 option，和 TypeScript 的结合需要通过一些装饰器的方式来做，虽然能实现功能，但是比较麻烦。")]),s._v(" "),n("li",[s._v("3.0 修改了组件的声明方式，改成了类式的写法，这样使得和 TypeScript 的结合变得很容易")])]),s._v(" "),n("p",[n("strong",[s._v("（5）其它方面的更改")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("支持自定义渲染器，从而使得 weex 可以通过自定义渲染器的方式来扩展，而不是直接 fork 源码来改的方式。")])]),s._v(" "),n("li",[n("p",[s._v("支持 Fragment（多个根节点）和 Protal（在 dom 其他部分渲染组建内容）组件，针对一些特殊的场景做了处理。")])]),s._v(" "),n("li",[n("p",[s._v("基于 tree shaking 优化，提供了更多的内置功能。")])])]),s._v(" "),n("h3",{attrs:{id:"_2-defineproperty和proxy的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-defineproperty和proxy的区别"}},[s._v("#")]),s._v(" 2. defineProperty和proxy的区别")]),s._v(" "),n("p",[s._v("Vue 在实例初始化时遍历 data 中的所有属性，并使用 Object.defineProperty 把这些属性全部转为 getter/setter。这样当追踪数据发生变化时，setter 会被自动调用。")]),s._v(" "),n("p",[s._v("Object.defineProperty 是 ES5 中一个无法 shim 的特性，这也就是 Vue 不支持 IE8 以及更低版本浏览器的原因。")]),s._v(" "),n("p",[s._v("但是这样做有以下问题：")]),s._v(" "),n("ol",[n("li",[s._v("添加或删除对象的属性时，Vue 检测不到。因为添加或删除的对象没有在初始化进行响应式处理，只能通过"),n("code",[s._v("$set")]),s._v(" 来调用"),n("code",[s._v("Object.defineProperty()")]),s._v("处理。")]),s._v(" "),n("li",[s._v("无法监控到数组下标和长度的变化。")])]),s._v(" "),n("p",[s._v("Vue3 使用 Proxy 来监控数据的变化。Proxy 是 ES6 中提供的功能，其作用为：用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。相对于"),n("code",[s._v("Object.defineProperty()")]),s._v("，其有以下特点：")]),s._v(" "),n("ol",[n("li",[s._v("Proxy 直接代理整个对象而非对象属性，这样只需做一层代理就可以监听同级结构下的所有属性变化，包括新增属性和删除属性。")]),s._v(" "),n("li",[s._v("Proxy 可以监听数组的变化。")])]),s._v(" "),n("h3",{attrs:{id:"_3-vue3-0-为什么要用-proxy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-vue3-0-为什么要用-proxy"}},[s._v("#")]),s._v(" 3. Vue3.0 为什么要用 proxy？")]),s._v(" "),n("p",[s._v("在 Vue2 中， 0bject.defineProperty 会改变原始数据，而 Proxy 是创建对象的虚拟表示，并提供 set 、get 和 deleteProperty 等处理器，这些处理器可在访问或修改原始对象上的属性时进行拦截，有以下特点∶")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("不需用使用 "),n("code",[s._v("Vue.$set")]),s._v(" 或 "),n("code",[s._v("Vue.$delete")]),s._v(" 触发响应式。")])]),s._v(" "),n("li",[n("p",[s._v("全方位的数组变化检测，消除了Vue2 无效的边界情况。")])]),s._v(" "),n("li",[n("p",[s._v("支持 Map，Set，WeakMap 和 WeakSet。")])])]),s._v(" "),n("p",[s._v("Proxy 实现的响应式原理与 Vue2的实现原理相同，实现方式大同小异∶")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("get 收集依赖")])]),s._v(" "),n("li",[n("p",[s._v("Set、delete 等触发依赖")])]),s._v(" "),n("li",[n("p",[s._v("对于集合类型，就是对集合对象的方法做一层包装：原方法执行后执行依赖相关的收集或触发逻辑。")])])]),s._v(" "),n("h3",{attrs:{id:"_4-vue-3-0-中的-vue-composition-api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-vue-3-0-中的-vue-composition-api"}},[s._v("#")]),s._v(" 4.  Vue 3.0 中的 Vue Composition API？")]),s._v(" "),n("p",[s._v("在 Vue2 中，代码是 Options API 风格的，也就是通过填充 (option) data、methods、computed 等属性来完成一个 Vue 组件。这种风格使得 Vue 相对于 React极为容易上手，同时也造成了几个问题：")]),s._v(" "),n("ol",[n("li",[s._v("由于 Options API 不够灵活的开发方式，使得Vue开发缺乏优雅的方法来在组件间共用代码。")]),s._v(" "),n("li",[s._v("Vue 组件过于依赖"),n("code",[s._v("this")]),s._v("上下文，Vue 背后的一些小技巧使得 Vue 组件的开发看起来与 JavaScript 的开发原则相悖，比如在"),n("code",[s._v("methods")]),s._v(" 中的"),n("code",[s._v("this")]),s._v("竟然指向组件实例来不指向"),n("code",[s._v("methods")]),s._v("所在的对象。这也使得 TypeScript 在Vue2 中很不好用。")])]),s._v(" "),n("p",[s._v("于是在 Vue3 中，舍弃了 Options API，转而投向 Composition API。Composition API本质上是将 Options API 背后的机制暴露给用户直接使用，这样用户就拥有了更多的灵活性，也使得 Vue3 更适合于 TypeScript 结合。")]),s._v(" "),n("p",[s._v("如下，是一个使用了 Vue Composition API 的 Vue3 组件：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("<template>\n  <button @click=\"increment\">\n    Count: {{ count }}\n  </button>\n</template>\n \n<script>\n// Composition API 将组件属性暴露为函数，因此第一步是导入所需的函数\nimport { ref, computed, onMounted } from 'vue'\n \nexport default {\n  setup() {\n// 使用 ref 函数声明了称为 count 的响应属性，对应于Vue2中的data函数\n    const count = ref(0)\n \n// Vue2中需要在methods option中声明的函数，现在直接声明\n    function increment() {\n      count.value++\n    }\n // 对应于Vue2中的mounted声明周期\n    onMounted(() => console.log('component mounted!'))\n \n    return {\n      count,\n      increment\n    }\n  }\n}\n<\/script>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br")])]),n("p",[s._v("显而易见，Vue Composition API 使得 Vue3 的开发风格更接近于原生 JavaScript，带给开发者更多地灵活性")]),s._v(" "),n("h3",{attrs:{id:"_5-composition-api与react-hook很像-区别是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-composition-api与react-hook很像-区别是什么"}},[s._v("#")]),s._v(" 5. Composition API与React Hook很像，区别是什么")]),s._v(" "),n("p",[s._v("从React Hook的实现角度看，React Hook是根据useState调用的顺序来确定下一次重渲染时的state是来源于哪个useState，所以出现了以下限制")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("不能在循环、条件、嵌套函数中调用Hook")])]),s._v(" "),n("li",[n("p",[s._v("必须确保总是在你的React函数的顶层调用Hook")])]),s._v(" "),n("li",[n("p",[s._v("useEffect、useMemo等函数必须手动确定依赖关系")])])]),s._v(" "),n("p",[s._v("而Composition API是基于Vue的响应式系统实现的，与React Hook的相比")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("声明在setup函数内，一次组件实例化只调用一次setup，而React Hook每次重渲染都需要调用Hook，使得React的GC比Vue更有压力，性能也相对于Vue来说也较慢")])]),s._v(" "),n("li",[n("p",[s._v("Compositon API的调用不需要顾虑调用顺序，也可以在循环、条件、嵌套函数中使用")])]),s._v(" "),n("li",[n("p",[s._v("响应式系统自动实现了依赖收集，进而组件的部分的性能优化由Vue内部自己完成，而React Hook需要手动传入依赖，而且必须必须保证依赖的顺序，让useEffect、useMemo等函数正确的捕获依赖变量，否则会由于依赖不正确使得组件性能下降。")])])]),s._v(" "),n("p",[s._v("虽然Compositon API看起来比React Hook好用，但是其设计思想也是借鉴React Hook的。")]),s._v(" "),n("h2",{attrs:{id:"七、虚拟dom"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#七、虚拟dom"}},[s._v("#")]),s._v(" 七、虚拟DOM")]),s._v(" "),n("h3",{attrs:{id:"_1-对虚拟dom的理解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-对虚拟dom的理解"}},[s._v("#")]),s._v(" 1. 对虚拟DOM的理解？")]),s._v(" "),n("p",[s._v("从本质上来说，Virtual Dom是一个JavaScript对象，通过对象的方式来表示DOM结构。将页面的状态抽象为JS对象的形式，配合不同的渲染工具，使跨平台渲染成为可能。通过事务处理机制，将多次DOM修改的结果一次性的更新到页面上，从而有效的减少页面渲染的次数，减少修改DOM的重绘重排次数，提高渲染性能。")]),s._v(" "),n("p",[s._v("虚拟DOM是对DOM的抽象，这个对象是更加轻量级的对 DOM的描述。它设计的最初目的，就是更好的跨平台，比如Node.js就没有DOM，如果想实现SSR，那么一个方式就是借助虚拟DOM，因为虚拟DOM本身是js对象。 在代码渲染到页面之前，vue会把代码转换成一个对象（虚拟 DOM）。以对象的形式来描述真实DOM结构，最终渲染到页面。在每次数据发生变化前，虚拟DOM都会缓存一份，变化之时，现在的虚拟DOM会与缓存的虚拟DOM进行比较。在vue内部封装了diff算法，通过这个算法来进行比较，渲染时修改改变的变化，原先没有发生改变的通过原先的数据进行渲染。")]),s._v(" "),n("p",[s._v("另外现代前端框架的一个基本要求就是无须手动操作DOM，一方面是因为手动操作DOM无法保证程序性能，多人协作的项目中如果review不严格，可能会有开发者写出性能较低的代码，另一方面更重要的是省略手动DOM操作可以大大提高开发效率。")]),s._v(" "),n("h3",{attrs:{id:"_2-虚拟dom的解析过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-虚拟dom的解析过程"}},[s._v("#")]),s._v(" 2. 虚拟DOM的解析过程")]),s._v(" "),n("p",[s._v("虚拟DOM的解析过程：")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("首先对将要插入到文档中的 DOM 树结构进行分析，使用 js 对象将其表示出来，比如一个元素对象，包含 TagName、props 和 Children 这些属性。然后将这个 js 对象树给保存下来，最后再将 DOM 片段插入到文档中。")])]),s._v(" "),n("li",[n("p",[s._v("当页面的状态发生改变，需要对页面的 DOM 的结构进行调整的时候，首先根据变更的状态，重新构建起一棵对象树，然后将这棵新的对象树和旧的对象树进行比较，记录下两棵树的的差异。")])]),s._v(" "),n("li",[n("p",[s._v("最后将记录的有差异的地方应用到真正的 DOM 树中去，这样视图就更新了。")])])]),s._v(" "),n("h3",{attrs:{id:"_3-为什么要用虚拟dom"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-为什么要用虚拟dom"}},[s._v("#")]),s._v(" 3. 为什么要用虚拟DOM")]),s._v(" "),n("p",[n("strong",[s._v("（1）保证性能下限，在不进行手动优化的情况下，提供过得去的性能")])]),s._v(" "),n("p",[s._v("看一下页面渲染的流程："),n("strong",[s._v("解析HTML -> 生成DOM")]),s._v(" "),n("strong",[s._v("->")]),s._v(" "),n("strong",[s._v("生成 CSSOM")]),s._v(" "),n("strong",[s._v("->")]),s._v(" "),n("strong",[s._v("Layout")]),s._v(" "),n("strong",[s._v("->")]),s._v(" "),n("strong",[s._v("Paint")]),s._v(" "),n("strong",[s._v("->")]),s._v(" "),n("strong",[s._v("Compiler")])]),s._v(" "),n("p",[s._v("下面对比一下修改DOM时真实DOM操作和Virtual DOM的过程，来看一下它们重排重绘的性能消耗∶")]),s._v(" "),n("ul",[n("li",[s._v("真实DOM∶ 生成HTML字符串＋重建所有的DOM元素")]),s._v(" "),n("li",[s._v("虚拟DOM∶ 生成vNode+ DOMDiff＋必要的dom更新")])]),s._v(" "),n("p",[s._v("Virtual DOM的更新DOM的准备工作耗费更多的时间，也就是JS层面，相比于更多的DOM操作它的消费是极其便宜的。尤雨溪在社区论坛中说道∶ 框架给你的保证是，你不需要手动优化的情况下，依然可以给你提供过得去的性能。")]),s._v(" "),n("p",[n("strong",[s._v("（2）跨平台")])]),s._v(" "),n("p",[s._v("Virtual DOM本质上是JavaScript的对象，它可以很方便的跨平台操作，比如服务端渲染、uniapp等。")]),s._v(" "),n("h3",{attrs:{id:"_4-虚拟dom真的比真实dom性能好吗"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-虚拟dom真的比真实dom性能好吗"}},[s._v("#")]),s._v(" 4. 虚拟DOM真的比真实DOM性能好吗")]),s._v(" "),n("ul",[n("li",[s._v("首次渲染大量DOM时，由于多了一层虚拟DOM的计算，会比innerHTML插入慢。")]),s._v(" "),n("li",[s._v("正如它能保证性能下限，在真实DOM操作的时候进行针对性的优化时，还是更快的。")])]),s._v(" "),n("h3",{attrs:{id:"_5-diff算法的原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-diff算法的原理"}},[s._v("#")]),s._v(" 5. DIFF算法的原理")]),s._v(" "),n("p",[s._v("在新老虚拟DOM对比时：")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("首先，对比节点本身，判断是否为同一节点，如果不为相同节点，则删除该节点重新创建节点进行替换")])]),s._v(" "),n("li",[n("p",[s._v("如果为相同节点，进行patchVnode，判断如何对该节点的子节点进行处理，先判断一方有子节点一方没有子节点的情况(如果新的children没有子节点，将旧的子节点移除)")])]),s._v(" "),n("li",[n("p",[s._v("比较如果都有子节点，则进行updateChildren，判断如何对这些新老节点的子节点进行操作（diff核心）。")])]),s._v(" "),n("li",[n("p",[s._v("匹配时，找到相同的子节点，递归比较子节点")])])]),s._v(" "),n("p",[s._v("在diff中，只对同层的子节点进行比较，放弃跨级的节点比较，使得时间复杂从O(n3)降低值O(n)，也就是说，只有当新旧children都为多个子节点时才需要用核心的Diff算法进行同层级比较。")]),s._v(" "),n("h3",{attrs:{id:"_6-vue中key的作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-vue中key的作用"}},[s._v("#")]),s._v(" 6. Vue中key的作用")]),s._v(" "),n("p",[s._v("vue 中 key 值的作用可以分为两种情况来考虑：")]),s._v(" "),n("ul",[n("li",[s._v("第一种情况是 v-if 中使用 key。由于 Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。因此当使用 v-if 来实现元素切换的时候，如果切换前后含有相同类型的元素，那么这个元素就会被复用。如果是相同的 input 元素，那么切换前后用户的输入不会被清除掉，这样是不符合需求的。因此可以通过使用 key 来唯一的标识一个元素，这个情况下，使用 key 的元素不会被复用。这个时候 key 的作用是用来标识一个独立的元素。")]),s._v(" "),n("li",[s._v("第二种情况是 v-for 中使用 key。用 v-for 更新已渲染过的元素列表时，它默认使用“就地复用”的策略。如果数据项的顺序发生了改变，Vue 不会移动 DOM 元素来匹配数据项的顺序，而是简单复用此处的每个元素。因此通过为每个列表项提供一个 key 值，来以便 Vue 跟踪元素的身份，从而高效的实现复用。这个时候 key 的作用是为了高效的更新渲染虚拟 DOM。")])]),s._v(" "),n("p",[s._v("key 是为 Vue 中 vnode 的唯一标记，通过这个 key，diff 操作可以更准确、更快速")]),s._v(" "),n("ul",[n("li",[s._v("更准确：因为带 key 就不是就地复用了，在 sameNode 函数a.key === b.key对比中可以避免就地复用的情况。所以会更加准确。")]),s._v(" "),n("li",[s._v("更快速：利用 key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快")])]),s._v(" "),n("h3",{attrs:{id:"_7-为什么不建议用index作为key"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-为什么不建议用index作为key"}},[s._v("#")]),s._v(" 7. 为什么不建议用index作为key?")]),s._v(" "),n("p",[s._v("使用index 作为 key和没写基本上没区别，因为不管数组的顺序怎么颠倒，index 都是 0, 1, 2...这样排列，导致 Vue 会复用错误的旧子节点，做很多额外的工作。")])])}),[],!1,null,null,null);e.default=a.exports}}]);